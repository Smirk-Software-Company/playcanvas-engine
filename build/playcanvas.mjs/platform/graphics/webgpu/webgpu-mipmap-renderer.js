import { Shader } from '../shader.js';
import { SHADERLANGUAGE_WGSL } from '../constants.js';
import { Debug, DebugHelper } from '../../../core/debug.js';
import { DebugGraphics } from '../debug-graphics.js';

/**
 * A WebGPU helper class implementing texture mipmap generation.
 *
 * @ignore
 */
class WebgpuMipmapRenderer {
  constructor(device) {
    /** @type {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} */
    this.device = void 0;
    this.device = device;

    // Shader that renders a fullscreen textured quad
    const code = `
 
            var<private> pos : array<vec2f, 4> = array<vec2f, 4>(
                vec2(-1.0, 1.0), vec2(1.0, 1.0),
                vec2(-1.0, -1.0), vec2(1.0, -1.0)
            );

            struct VertexOutput {
                @builtin(position) position : vec4f,
                @location(0) texCoord : vec2f
            };

            @vertex
            fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {
              var output : VertexOutput;
              output.texCoord = pos[vertexIndex] * vec2f(0.5, -0.5) + vec2f(0.5);
              output.position = vec4f(pos[vertexIndex], 0, 1);
              return output;
            }

            @group(0) @binding(0) var imgSampler : sampler;
            @group(0) @binding(1) var img : texture_2d<f32>;

            @fragment
            fn fragmentMain(@location(0) texCoord : vec2f) -> @location(0) vec4f {
              return textureSample(img, imgSampler, texCoord);
            }
        `;
    this.shader = new Shader(device, {
      name: 'WebGPUMipmapRendererShader',
      shaderLanguage: SHADERLANGUAGE_WGSL,
      vshader: code,
      fshader: code
    });

    // using minified rendering, so that's the only filter mode we need to set.
    this.minSampler = device.wgpu.createSampler({
      minFilter: 'linear'
    });
  }
  destroy() {
    this.shader.destroy();
    this.shader = null;
  }

  /**
   * Generates mipmaps for the specified WebGPU texture.
   *
   * @param {import('./webgpu-texture.js').WebgpuTexture} webgpuTexture - The texture to generate mipmaps for.
   */
  generate(webgpuTexture) {
    var _device$commandEncode;
    // ignore texture with no mipmaps
    const textureDescr = webgpuTexture.descr;
    if (textureDescr.mipLevelCount <= 1) {
      return;
    }

    // not all types are currently supported
    if (webgpuTexture.texture.volume) {
      Debug.warnOnce('WebGPU mipmap generation is not supported volume texture.', webgpuTexture.texture);
      return;
    }
    const device = this.device;
    const wgpu = device.wgpu;

    /** @type {import('./webgpu-shader.js').WebgpuShader} */
    const webgpuShader = this.shader.impl;
    const pipeline = wgpu.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: webgpuShader.getVertexShaderModule(),
        entryPoint: webgpuShader.vertexEntryPoint
      },
      fragment: {
        module: webgpuShader.getFragmentShaderModule(),
        entryPoint: webgpuShader.fragmentEntryPoint,
        targets: [{
          format: textureDescr.format // use the same format as the texture
        }]
      },

      primitive: {
        topology: 'triangle-strip'
      }
    });
    DebugHelper.setLabel(pipeline, 'RenderPipeline-MipmapRenderer');
    const numFaces = webgpuTexture.texture.cubemap ? 6 : 1;
    const srcViews = [];
    for (let face = 0; face < numFaces; face++) {
      srcViews.push(webgpuTexture.createView({
        dimension: '2d',
        baseMipLevel: 0,
        mipLevelCount: 1,
        baseArrayLayer: face
      }));
    }

    // loop through each mip level and render the previous level's contents into it.
    const commandEncoder = (_device$commandEncode = device.commandEncoder) != null ? _device$commandEncode : wgpu.createCommandEncoder();
    DebugHelper.setLabel(commandEncoder, 'MipmapRendererEncoder');
    DebugGraphics.pushGpuMarker(device, 'MIPMAP-RENDERER');
    for (let i = 1; i < textureDescr.mipLevelCount; i++) {
      for (let face = 0; face < numFaces; face++) {
        const dstView = webgpuTexture.createView({
          dimension: '2d',
          baseMipLevel: i,
          mipLevelCount: 1,
          baseArrayLayer: face
        });
        const passEncoder = commandEncoder.beginRenderPass({
          colorAttachments: [{
            view: dstView,
            loadOp: 'clear',
            storeOp: 'store'
          }]
        });
        DebugHelper.setLabel(passEncoder, `MipmapRenderer-PassEncoder_${i}`);
        const bindGroup = wgpu.createBindGroup({
          layout: pipeline.getBindGroupLayout(0),
          entries: [{
            binding: 0,
            resource: this.minSampler
          }, {
            binding: 1,
            resource: srcViews[face]
          }]
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(4);
        passEncoder.end();

        // next iteration
        srcViews[face] = dstView;
      }
    }
    DebugGraphics.popGpuMarker(device);

    // submit the encoded commands if we created the encoder
    if (!device.commandEncoder) {
      const cb = commandEncoder.finish();
      DebugHelper.setLabel(cb, 'MipmapRenderer-CommandBuffer');
      device.addCommandBuffer(cb);
    }

    // clear invalidated state
    device.pipeline = null;
  }
}

export { WebgpuMipmapRenderer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LW1pcG1hcC1yZW5kZXJlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtbWlwbWFwLXJlbmRlcmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNoYWRlciB9IGZyb20gXCIuLi9zaGFkZXIuanNcIjtcbmltcG9ydCB7IFNIQURFUkxBTkdVQUdFX1dHU0wgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBEZWJ1ZywgRGVidWdIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9kZWJ1Zy5qc1wiO1xuaW1wb3J0IHsgRGVidWdHcmFwaGljcyB9IGZyb20gXCIuLi9kZWJ1Zy1ncmFwaGljcy5qc1wiO1xuXG4vKipcbiAqIEEgV2ViR1BVIGhlbHBlciBjbGFzcyBpbXBsZW1lbnRpbmcgdGV4dHVyZSBtaXBtYXAgZ2VuZXJhdGlvbi5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFdlYmdwdU1pcG1hcFJlbmRlcmVyIHtcbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi93ZWJncHUtZ3JhcGhpY3MtZGV2aWNlLmpzJykuV2ViZ3B1R3JhcGhpY3NEZXZpY2V9ICovXG4gICAgZGV2aWNlO1xuXG4gICAgY29uc3RydWN0b3IoZGV2aWNlKSB7XG4gICAgICAgIHRoaXMuZGV2aWNlID0gZGV2aWNlO1xuXG4gICAgICAgIC8vIFNoYWRlciB0aGF0IHJlbmRlcnMgYSBmdWxsc2NyZWVuIHRleHR1cmVkIHF1YWRcbiAgICAgICAgY29uc3QgY29kZSA9IGBcbiBcbiAgICAgICAgICAgIHZhcjxwcml2YXRlPiBwb3MgOiBhcnJheTx2ZWMyZiwgND4gPSBhcnJheTx2ZWMyZiwgND4oXG4gICAgICAgICAgICAgICAgdmVjMigtMS4wLCAxLjApLCB2ZWMyKDEuMCwgMS4wKSxcbiAgICAgICAgICAgICAgICB2ZWMyKC0xLjAsIC0xLjApLCB2ZWMyKDEuMCwgLTEuMClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xuICAgICAgICAgICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzRmLFxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigwKSB0ZXhDb29yZCA6IHZlYzJmXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBAdmVydGV4XG4gICAgICAgICAgICBmbiB2ZXJ0ZXhNYWluKEBidWlsdGluKHZlcnRleF9pbmRleCkgdmVydGV4SW5kZXggOiB1MzIpIC0+IFZlcnRleE91dHB1dCB7XG4gICAgICAgICAgICAgIHZhciBvdXRwdXQgOiBWZXJ0ZXhPdXRwdXQ7XG4gICAgICAgICAgICAgIG91dHB1dC50ZXhDb29yZCA9IHBvc1t2ZXJ0ZXhJbmRleF0gKiB2ZWMyZigwLjUsIC0wLjUpICsgdmVjMmYoMC41KTtcbiAgICAgICAgICAgICAgb3V0cHV0LnBvc2l0aW9uID0gdmVjNGYocG9zW3ZlcnRleEluZGV4XSwgMCwgMSk7XG4gICAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygwKSB2YXIgaW1nU2FtcGxlciA6IHNhbXBsZXI7XG4gICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMSkgdmFyIGltZyA6IHRleHR1cmVfMmQ8ZjMyPjtcblxuICAgICAgICAgICAgQGZyYWdtZW50XG4gICAgICAgICAgICBmbiBmcmFnbWVudE1haW4oQGxvY2F0aW9uKDApIHRleENvb3JkIDogdmVjMmYpIC0+IEBsb2NhdGlvbigwKSB2ZWM0ZiB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlU2FtcGxlKGltZywgaW1nU2FtcGxlciwgdGV4Q29vcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIHRoaXMuc2hhZGVyID0gbmV3IFNoYWRlcihkZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWU6ICdXZWJHUFVNaXBtYXBSZW5kZXJlclNoYWRlcicsXG4gICAgICAgICAgICBzaGFkZXJMYW5ndWFnZTogU0hBREVSTEFOR1VBR0VfV0dTTCxcbiAgICAgICAgICAgIHZzaGFkZXI6IGNvZGUsXG4gICAgICAgICAgICBmc2hhZGVyOiBjb2RlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHVzaW5nIG1pbmlmaWVkIHJlbmRlcmluZywgc28gdGhhdCdzIHRoZSBvbmx5IGZpbHRlciBtb2RlIHdlIG5lZWQgdG8gc2V0LlxuICAgICAgICB0aGlzLm1pblNhbXBsZXIgPSBkZXZpY2Uud2dwdS5jcmVhdGVTYW1wbGVyKHsgbWluRmlsdGVyOiAnbGluZWFyJyB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNoYWRlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc2hhZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgbWlwbWFwcyBmb3IgdGhlIHNwZWNpZmllZCBXZWJHUFUgdGV4dHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuL3dlYmdwdS10ZXh0dXJlLmpzJykuV2ViZ3B1VGV4dHVyZX0gd2ViZ3B1VGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGdlbmVyYXRlIG1pcG1hcHMgZm9yLlxuICAgICAqL1xuICAgIGdlbmVyYXRlKHdlYmdwdVRleHR1cmUpIHtcblxuICAgICAgICAvLyBpZ25vcmUgdGV4dHVyZSB3aXRoIG5vIG1pcG1hcHNcbiAgICAgICAgY29uc3QgdGV4dHVyZURlc2NyID0gd2ViZ3B1VGV4dHVyZS5kZXNjcjtcbiAgICAgICAgaWYgKHRleHR1cmVEZXNjci5taXBMZXZlbENvdW50IDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdCBhbGwgdHlwZXMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKHdlYmdwdVRleHR1cmUudGV4dHVyZS52b2x1bWUpIHtcbiAgICAgICAgICAgIERlYnVnLndhcm5PbmNlKCdXZWJHUFUgbWlwbWFwIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCB2b2x1bWUgdGV4dHVyZS4nLCB3ZWJncHVUZXh0dXJlLnRleHR1cmUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gICAgICAgIGNvbnN0IHdncHUgPSBkZXZpY2Uud2dwdTtcblxuICAgICAgICAvKiogQHR5cGUge2ltcG9ydCgnLi93ZWJncHUtc2hhZGVyLmpzJykuV2ViZ3B1U2hhZGVyfSAqL1xuICAgICAgICBjb25zdCB3ZWJncHVTaGFkZXIgPSB0aGlzLnNoYWRlci5pbXBsO1xuXG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gd2dwdS5jcmVhdGVSZW5kZXJQaXBlbGluZSh7XG4gICAgICAgICAgICBsYXlvdXQ6ICdhdXRvJyxcbiAgICAgICAgICAgIHZlcnRleDoge1xuICAgICAgICAgICAgICAgIG1vZHVsZTogd2ViZ3B1U2hhZGVyLmdldFZlcnRleFNoYWRlck1vZHVsZSgpLFxuICAgICAgICAgICAgICAgIGVudHJ5UG9pbnQ6IHdlYmdwdVNoYWRlci52ZXJ0ZXhFbnRyeVBvaW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJhZ21lbnQ6IHtcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHdlYmdwdVNoYWRlci5nZXRGcmFnbWVudFNoYWRlck1vZHVsZSgpLFxuICAgICAgICAgICAgICAgIGVudHJ5UG9pbnQ6IHdlYmdwdVNoYWRlci5mcmFnbWVudEVudHJ5UG9pbnQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0czogW3tcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiB0ZXh0dXJlRGVzY3IuZm9ybWF0IC8vIHVzZSB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIHRleHR1cmVcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaW1pdGl2ZToge1xuICAgICAgICAgICAgICAgIHRvcG9sb2d5OiAndHJpYW5nbGUtc3RyaXAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChwaXBlbGluZSwgJ1JlbmRlclBpcGVsaW5lLU1pcG1hcFJlbmRlcmVyJyk7XG5cbiAgICAgICAgY29uc3QgbnVtRmFjZXMgPSB3ZWJncHVUZXh0dXJlLnRleHR1cmUuY3ViZW1hcCA/IDYgOiAxO1xuXG4gICAgICAgIGNvbnN0IHNyY1ZpZXdzID0gW107XG4gICAgICAgIGZvciAobGV0IGZhY2UgPSAwOyBmYWNlIDwgbnVtRmFjZXM7IGZhY2UrKykge1xuICAgICAgICAgICAgc3JjVmlld3MucHVzaCh3ZWJncHVUZXh0dXJlLmNyZWF0ZVZpZXcoe1xuICAgICAgICAgICAgICAgIGRpbWVuc2lvbjogJzJkJyxcbiAgICAgICAgICAgICAgICBiYXNlTWlwTGV2ZWw6IDAsXG4gICAgICAgICAgICAgICAgbWlwTGV2ZWxDb3VudDogMSxcbiAgICAgICAgICAgICAgICBiYXNlQXJyYXlMYXllcjogZmFjZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggbWlwIGxldmVsIGFuZCByZW5kZXIgdGhlIHByZXZpb3VzIGxldmVsJ3MgY29udGVudHMgaW50byBpdC5cbiAgICAgICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY29tbWFuZEVuY29kZXIgPz8gd2dwdS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChjb21tYW5kRW5jb2RlciwgJ01pcG1hcFJlbmRlcmVyRW5jb2RlcicpO1xuXG4gICAgICAgIERlYnVnR3JhcGhpY3MucHVzaEdwdU1hcmtlcihkZXZpY2UsICdNSVBNQVAtUkVOREVSRVInKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRleHR1cmVEZXNjci5taXBMZXZlbENvdW50OyBpKyspIHtcblxuICAgICAgICAgICAgZm9yIChsZXQgZmFjZSA9IDA7IGZhY2UgPCBudW1GYWNlczsgZmFjZSsrKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkc3RWaWV3ID0gd2ViZ3B1VGV4dHVyZS5jcmVhdGVWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiAnMmQnLFxuICAgICAgICAgICAgICAgICAgICBiYXNlTWlwTGV2ZWw6IGksXG4gICAgICAgICAgICAgICAgICAgIG1pcExldmVsQ291bnQ6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJhc2VBcnJheUxheWVyOiBmYWNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXR0YWNobWVudHM6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBkc3RWaWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVPcDogJ3N0b3JlJ1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIERlYnVnSGVscGVyLnNldExhYmVsKHBhc3NFbmNvZGVyLCBgTWlwbWFwUmVuZGVyZXItUGFzc0VuY29kZXJfJHtpfWApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYmluZEdyb3VwID0gd2dwdS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCgwKSxcbiAgICAgICAgICAgICAgICAgICAgZW50cmllczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogdGhpcy5taW5TYW1wbGVyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogc3JjVmlld3NbZmFjZV1cbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHBpcGVsaW5lKTtcbiAgICAgICAgICAgICAgICBwYXNzRW5jb2Rlci5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKTtcbiAgICAgICAgICAgICAgICBwYXNzRW5jb2Rlci5kcmF3KDQpO1xuICAgICAgICAgICAgICAgIHBhc3NFbmNvZGVyLmVuZCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gbmV4dCBpdGVyYXRpb25cbiAgICAgICAgICAgICAgICBzcmNWaWV3c1tmYWNlXSA9IGRzdFZpZXc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBEZWJ1Z0dyYXBoaWNzLnBvcEdwdU1hcmtlcihkZXZpY2UpO1xuXG4gICAgICAgIC8vIHN1Ym1pdCB0aGUgZW5jb2RlZCBjb21tYW5kcyBpZiB3ZSBjcmVhdGVkIHRoZSBlbmNvZGVyXG4gICAgICAgIGlmICghZGV2aWNlLmNvbW1hbmRFbmNvZGVyKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNiID0gY29tbWFuZEVuY29kZXIuZmluaXNoKCk7XG4gICAgICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChjYiwgJ01pcG1hcFJlbmRlcmVyLUNvbW1hbmRCdWZmZXInKTtcbiAgICAgICAgICAgIGRldmljZS5hZGRDb21tYW5kQnVmZmVyKGNiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGludmFsaWRhdGVkIHN0YXRlXG4gICAgICAgIGRldmljZS5waXBlbGluZSA9IG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgeyBXZWJncHVNaXBtYXBSZW5kZXJlciB9O1xuIl0sIm5hbWVzIjpbIldlYmdwdU1pcG1hcFJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJjb2RlIiwic2hhZGVyIiwiU2hhZGVyIiwibmFtZSIsInNoYWRlckxhbmd1YWdlIiwiU0hBREVSTEFOR1VBR0VfV0dTTCIsInZzaGFkZXIiLCJmc2hhZGVyIiwibWluU2FtcGxlciIsIndncHUiLCJjcmVhdGVTYW1wbGVyIiwibWluRmlsdGVyIiwiZGVzdHJveSIsImdlbmVyYXRlIiwid2ViZ3B1VGV4dHVyZSIsIl9kZXZpY2UkY29tbWFuZEVuY29kZSIsInRleHR1cmVEZXNjciIsImRlc2NyIiwibWlwTGV2ZWxDb3VudCIsInRleHR1cmUiLCJ2b2x1bWUiLCJEZWJ1ZyIsIndhcm5PbmNlIiwid2ViZ3B1U2hhZGVyIiwiaW1wbCIsInBpcGVsaW5lIiwiY3JlYXRlUmVuZGVyUGlwZWxpbmUiLCJsYXlvdXQiLCJ2ZXJ0ZXgiLCJtb2R1bGUiLCJnZXRWZXJ0ZXhTaGFkZXJNb2R1bGUiLCJlbnRyeVBvaW50IiwidmVydGV4RW50cnlQb2ludCIsImZyYWdtZW50IiwiZ2V0RnJhZ21lbnRTaGFkZXJNb2R1bGUiLCJmcmFnbWVudEVudHJ5UG9pbnQiLCJ0YXJnZXRzIiwiZm9ybWF0IiwicHJpbWl0aXZlIiwidG9wb2xvZ3kiLCJEZWJ1Z0hlbHBlciIsInNldExhYmVsIiwibnVtRmFjZXMiLCJjdWJlbWFwIiwic3JjVmlld3MiLCJmYWNlIiwicHVzaCIsImNyZWF0ZVZpZXciLCJkaW1lbnNpb24iLCJiYXNlTWlwTGV2ZWwiLCJiYXNlQXJyYXlMYXllciIsImNvbW1hbmRFbmNvZGVyIiwiY3JlYXRlQ29tbWFuZEVuY29kZXIiLCJEZWJ1Z0dyYXBoaWNzIiwicHVzaEdwdU1hcmtlciIsImkiLCJkc3RWaWV3IiwicGFzc0VuY29kZXIiLCJiZWdpblJlbmRlclBhc3MiLCJjb2xvckF0dGFjaG1lbnRzIiwidmlldyIsImxvYWRPcCIsInN0b3JlT3AiLCJiaW5kR3JvdXAiLCJjcmVhdGVCaW5kR3JvdXAiLCJnZXRCaW5kR3JvdXBMYXlvdXQiLCJlbnRyaWVzIiwiYmluZGluZyIsInJlc291cmNlIiwic2V0UGlwZWxpbmUiLCJzZXRCaW5kR3JvdXAiLCJkcmF3IiwiZW5kIiwicG9wR3B1TWFya2VyIiwiY2IiLCJmaW5pc2giLCJhZGRDb21tYW5kQnVmZmVyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxvQkFBb0IsQ0FBQztFQUl2QkMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFO0FBSHBCO0FBQUEsSUFBQSxJQUFBLENBQ0FBLE1BQU0sR0FBQSxLQUFBLENBQUEsQ0FBQTtJQUdGLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNLENBQUE7O0FBRXBCO0FBQ0EsSUFBQSxNQUFNQyxJQUFJLEdBQUksQ0FBQTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUyxDQUFBLENBQUE7QUFFRCxJQUFBLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0gsTUFBTSxFQUFFO0FBQzdCSSxNQUFBQSxJQUFJLEVBQUUsNEJBQTRCO0FBQ2xDQyxNQUFBQSxjQUFjLEVBQUVDLG1CQUFtQjtBQUNuQ0MsTUFBQUEsT0FBTyxFQUFFTixJQUFJO0FBQ2JPLE1BQUFBLE9BQU8sRUFBRVAsSUFBQUE7QUFDYixLQUFDLENBQUMsQ0FBQTs7QUFFRjtJQUNBLElBQUksQ0FBQ1EsVUFBVSxHQUFHVCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsYUFBYSxDQUFDO0FBQUVDLE1BQUFBLFNBQVMsRUFBRSxRQUFBO0FBQVMsS0FBQyxDQUFDLENBQUE7QUFDeEUsR0FBQTtBQUVBQyxFQUFBQSxPQUFPQSxHQUFH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
