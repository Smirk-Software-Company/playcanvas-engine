import { DebugHelper } from '../../../core/debug.js';
import { GpuProfiler } from '../gpu-profiler.js';
import { WebgpuQuerySet } from './webgpu-query-set.js';

class WebgpuGpuProfiler extends GpuProfiler {
  constructor(device) {
    super();
    this.device = void 0;
    /** @type {number} */
    this.frameGPUMarkerSlot = void 0;
    this.device = device;

    // gpu timing queries
    this.timestampQueriesSet = device.supportsTimestampQuery ? new WebgpuQuerySet(device, true, 512) : null;
  }
  destroy() {
    var _this$timestampQuerie;
    (_this$timestampQuerie = this.timestampQueriesSet) == null ? void 0 : _this$timestampQuerie.destroy();
    this.timestampQueriesSet = null;
  }
  frameMarker(isStart) {
    if (this.timestampQueriesSet) {
      const suffix = isStart ? 'Start' : 'End';
      const commandEncoder = this.device.wgpu.createCommandEncoder();
      DebugHelper.setLabel(commandEncoder, `GPUTimestampEncoder-${suffix}`);
      this.frameGPUMarkerSlot = isStart ? this.getSlot('GpuFrame') : this.frameGPUMarkerSlot;
      commandEncoder.writeTimestamp(this.timestampQueriesSet.querySet, this.frameGPUMarkerSlot * 2 + (isStart ? 0 : 1));
      const cb = commandEncoder.finish();
      DebugHelper.setLabel(cb, `GPUTimestampEncoder-${suffix}-CommandBuffer`);
      this.device.addCommandBuffer(cb, isStart);
    }
  }
  frameStart() {
    this.processEnableRequest();
    if (this._enabled) {
      // initial timing marker
      this.frameMarker(true);
    }
  }
  frameEnd() {
    if (this._enabled) {
      var _this$timestampQuerie2;
      // final timing marker
      this.frameMarker(false);

      // schedule command buffer where timestamps are copied to CPU
      (_this$timestampQuerie2 = this.timestampQueriesSet) == null ? void 0 : _this$timestampQuerie2.resolve(this.slotCount * 2);
    }
  }
  request() {
    if (this._enabled) {
      var _this$timestampQuerie3;
      // request results
      const renderVersion = this.device.renderVersion;
      (_this$timestampQuerie3 = this.timestampQueriesSet) == null ? void 0 : _this$timestampQuerie3.request(this.slotCount, renderVersion).then(results => {
        this.report(results.renderVersion, results.timings);
      });
      super.request(renderVersion);
    }
  }
}

export { WebgpuGpuProfiler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWdwdS1wcm9maWxlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtZ3B1LXByb2ZpbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnSGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZGVidWcuanNcIjtcbmltcG9ydCB7IEdwdVByb2ZpbGVyIH0gZnJvbSBcIi4uL2dwdS1wcm9maWxlci5qc1wiO1xuaW1wb3J0IHsgV2ViZ3B1UXVlcnlTZXQgfSBmcm9tIFwiLi93ZWJncHUtcXVlcnktc2V0LmpzXCI7XG5cbmNsYXNzIFdlYmdwdUdwdVByb2ZpbGVyIGV4dGVuZHMgR3B1UHJvZmlsZXIge1xuICAgIGRldmljZTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGZyYW1lR1BVTWFya2VyU2xvdDtcblxuICAgIGNvbnN0cnVjdG9yKGRldmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRldmljZSA9IGRldmljZTtcblxuICAgICAgICAvLyBncHUgdGltaW5nIHF1ZXJpZXNcbiAgICAgICAgdGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0ID0gZGV2aWNlLnN1cHBvcnRzVGltZXN0YW1wUXVlcnkgPyBuZXcgV2ViZ3B1UXVlcnlTZXQoZGV2aWNlLCB0cnVlLCA1MTIpIDogbnVsbDtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcFF1ZXJpZXNTZXQ/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBmcmFtZU1hcmtlcihpc1N0YXJ0KSB7XG5cbiAgICAgICAgaWYgKHRoaXMudGltZXN0YW1wUXVlcmllc1NldCkge1xuXG4gICAgICAgICAgICBjb25zdCBzdWZmaXggPSBpc1N0YXJ0ID8gJ1N0YXJ0JyA6ICdFbmQnO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSB0aGlzLmRldmljZS53Z3B1LmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCk7XG4gICAgICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChjb21tYW5kRW5jb2RlciwgYEdQVVRpbWVzdGFtcEVuY29kZXItJHtzdWZmaXh9YCk7XG5cbiAgICAgICAgICAgIHRoaXMuZnJhbWVHUFVNYXJrZXJTbG90ID0gaXNTdGFydCA/IHRoaXMuZ2V0U2xvdCgnR3B1RnJhbWUnKSA6IHRoaXMuZnJhbWVHUFVNYXJrZXJTbG90O1xuICAgICAgICAgICAgY29tbWFuZEVuY29kZXIud3JpdGVUaW1lc3RhbXAodGhpcy50aW1lc3RhbXBRdWVyaWVzU2V0LnF1ZXJ5U2V0LCB0aGlzLmZyYW1lR1BVTWFya2VyU2xvdCAqIDIgKyAoaXNTdGFydCA/IDAgOiAxKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNiID0gY29tbWFuZEVuY29kZXIuZmluaXNoKCk7XG4gICAgICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChjYiwgYEdQVVRpbWVzdGFtcEVuY29kZXItJHtzdWZmaXh9LUNvbW1hbmRCdWZmZXJgKTtcblxuICAgICAgICAgICAgdGhpcy5kZXZpY2UuYWRkQ29tbWFuZEJ1ZmZlcihjYiwgaXNTdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFtZVN0YXJ0KCkge1xuXG4gICAgICAgIHRoaXMucHJvY2Vzc0VuYWJsZVJlcXVlc3QoKTtcblxuICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gaW5pdGlhbCB0aW1pbmcgbWFya2VyXG4gICAgICAgICAgICB0aGlzLmZyYW1lTWFya2VyKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnJhbWVFbmQoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIGZpbmFsIHRpbWluZyBtYXJrZXJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVNYXJrZXIoZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyBzY2hlZHVsZSBjb21tYW5kIGJ1ZmZlciB3aGVyZSB0aW1lc3RhbXBzIGFyZSBjb3BpZWQgdG8gQ1BVXG4gICAgICAgICAgICB0aGlzLnRpbWVzdGFtcFF1ZXJpZXNTZXQ/LnJlc29sdmUodGhpcy5zbG90Q291bnQgKiAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3QoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIHJlcXVlc3QgcmVzdWx0c1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVmVyc2lvbiA9IHRoaXMuZGV2aWNlLnJlbmRlclZlcnNpb247XG4gICAgICAgICAgICB0aGlzLnRpbWVzdGFtcFF1ZXJpZXNTZXQ/LnJlcXVlc3QodGhpcy5zbG90Q291bnQsIHJlbmRlclZlcnNpb24pLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydChyZXN1bHRzLnJlbmRlclZlcnNpb24sIHJlc3VsdHMudGltaW5ncyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3VwZXIucmVxdWVzdChyZW5kZXJWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgV2ViZ3B1R3B1UHJvZmlsZXIgfTtcbiJdLCJuYW1lcyI6WyJXZWJncHVHcHVQcm9maWxlciIsIkdwdVByb2ZpbGVyIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJmcmFtZUdQVU1hcmtlclNsb3QiLCJ0aW1lc3RhbXBRdWVyaWVzU2V0Iiwic3VwcG9ydHNUaW1lc3RhbXBRdWVyeSIsIldlYmdwdVF1ZXJ5U2V0IiwiZGVzdHJveSIsIl90aGlzJHRpbWVzdGFtcFF1ZXJpZSIsImZyYW1lTWFya2VyIiwiaXNTdGFydCIsInN1ZmZpeCIsImNvbW1hbmRFbmNvZGVyIiwid2dwdSIsImNyZWF0ZUNvbW1hbmRFbmNvZGVyIiwiRGVidWdIZWxwZXIiLCJzZXRMYWJlbCIsImdldFNsb3QiLCJ3cml0ZVRpbWVzdGFtcCIsInF1ZXJ5U2V0IiwiY2IiLCJmaW5pc2giLCJhZGRDb21tYW5kQnVmZmVyIiwiZnJhbWVTdGFydCIsInByb2Nlc3NFbmFibGVSZXF1ZXN0IiwiX2VuYWJsZWQiLCJmcmFtZUVuZCIsIl90aGlzJHRpbWVzdGFtcFF1ZXJpZTIiLCJyZXNvbHZlIiwic2xvdENvdW50IiwicmVxdWVzdCIsIl90aGlzJHRpbWVzdGFtcFF1ZXJpZTMiLCJyZW5kZXJWZXJzaW9uIiwidGhlbiIsInJlc3VsdHMiLCJyZXBvcnQiLCJ0aW1pbmdzIl0sIm1hcHBpbmdzIjoiOzs7O0FBSUEsTUFBTUEsaUJBQWlCLFNBQVNDLFdBQVcsQ0FBQztFQU14Q0MsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFO0FBQ2hCLElBQUEsS0FBSyxFQUFFLENBQUE7QUFBQyxJQUFBLElBQUEsQ0FOWkEsTUFBTSxHQUFBLEtBQUEsQ0FBQSxDQUFBO0FBRU47QUFBQSxJQUFBLElBQUEsQ0FDQUMsa0JBQWtCLEdBQUEsS0FBQSxDQUFBLENBQUE7SUFJZCxJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTSxDQUFBOztBQUVwQjtBQUNBLElBQUEsSUFBSSxDQUFDRSxtQkFBbUIsR0FBR0YsTUFBTSxDQUFDRyxzQkFBc0IsR0FBRyxJQUFJQyxjQUFjLENBQUNKLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFBO0FBQzNHLEdBQUE7QUFFQUssRUFBQUEsT0FBT0EsR0FBRztBQUFBLElBQUEsSUFBQUMscUJBQUEsQ0FBQTtJQUNOLENBQUFBLHFCQUFBLE9BQUksQ0FBQ0osbUJBQW1CLHFCQUF4QkkscUJBQUEsQ0FBMEJELE9BQU8sRUFBRSxDQUFBO0lBQ25DLElBQUksQ0FBQ0gsbUJBQW1CLEdBQUcsSUFBSSxDQUFBO0FBQ25DLEdBQUE7RUFFQUssV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBRWpCLElBQUksSUFBSSxDQUFDTixtQkFBbUIsRUFBRTtBQUUxQixNQUFBLE1BQU1P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
