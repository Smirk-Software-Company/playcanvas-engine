import { Debug, DebugHelper } from '../../../core/debug.js';
import { hash32Fnv1a } from '../../../core/hash.js';
import { array } from '../../../core/array-utils.js';
import { TRACEID_PIPELINELAYOUT_ALLOC, TRACEID_RENDERPIPELINE_ALLOC } from '../../../core/constants.js';
import { WebgpuVertexBufferLayout } from './webgpu-vertex-buffer-layout.js';
import { WebgpuDebug } from './webgpu-debug.js';

let _pipelineId = 0;
let _layoutId = 0;
const _primitiveTopology = ['point-list',
// PRIMITIVE_POINTS
'line-list',
// PRIMITIVE_LINES
undefined,
// PRIMITIVE_LINELOOP
'line-strip',
// PRIMITIVE_LINESTRIP
'triangle-list',
// PRIMITIVE_TRIANGLES
'triangle-strip',
// PRIMITIVE_TRISTRIP
undefined // PRIMITIVE_TRIFAN
];

const _blendOperation = ['add',
// BLENDEQUATION_ADD
'subtract',
// BLENDEQUATION_SUBTRACT
'reverse-subtract',
// BLENDEQUATION_REVERSE_SUBTRACT
'min',
// BLENDEQUATION_MIN
'max' // BLENDEQUATION_MAX
];

const _blendFactor = ['zero',
// BLENDMODE_ZERO
'one',
// BLENDMODE_ONE
'src',
// BLENDMODE_SRC_COLOR
'one-minus-src',
// BLENDMODE_ONE_MINUS_SRC_COLOR
'dst',
// BLENDMODE_DST_COLOR
'one-minus-dst',
// BLENDMODE_ONE_MINUS_DST_COLOR
'src-alpha',
// BLENDMODE_SRC_ALPHA
'src-alpha-saturated',
// BLENDMODE_SRC_ALPHA_SATURATE
'one-minus-src-alpha',
// BLENDMODE_ONE_MINUS_SRC_ALPHA
'dst-alpha',
// BLENDMODE_DST_ALPHA
'one-minus-dst-alpha',
// BLENDMODE_ONE_MINUS_DST_ALPHA
'constant',
// BLENDMODE_CONSTANT
'one-minus-constant' // BLENDMODE_ONE_MINUS_CONSTANT
];

const _compareFunction = ['never',
// FUNC_NEVER
'less',
// FUNC_LESS
'equal',
// FUNC_EQUAL
'less-equal',
// FUNC_LESSEQUAL
'greater',
// FUNC_GREATER
'not-equal',
// FUNC_NOTEQUAL
'greater-equal',
// FUNC_GREATEREQUAL
'always' // FUNC_ALWAYS
];

const _cullModes = ['none',
// CULLFACE_NONE
'back',
// CULLFACE_BACK
'front' // CULLFACE_FRONT
];

const _stencilOps = ['keep',
// STENCILOP_KEEP
'zero',
// STENCILOP_ZERO
'replace',
// STENCILOP_REPLACE
'increment-clamp',
// STENCILOP_INCREMENT
'increment-wrap',
// STENCILOP_INCREMENTWRAP
'decrement-clamp',
// STENCILOP_DECREMENT
'decrement-wrap',
// STENCILOP_DECREMENTWRAP
'invert' // STENCILOP_INVERT
];

// temp array to avoid allocation
const _bindGroupLayouts = [];

/** @ignore */
class CacheEntry {
  constructor() {
    /**
     * Render pipeline
     *
     * @type {GPURenderPipeline}
     * @private
     */
    this.pipeline = void 0;
    /**
     * The full array of hashes used to lookup the pipeline, used in case of hash collision.
     *
     * @type {Uint32Array}
     */
    this.hashes = void 0;
  }
}

/**
 * @ignore
 */
class WebgpuRenderPipeline {
  constructor(device) {
    this.lookupHashes = new Uint32Array(13);
    /** @type {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} */
    this.device = device;

    /**
     * The cache of vertex buffer layouts
     *
     * @type {WebgpuVertexBufferLayout}
     */
    this.vertexBufferLayout = new WebgpuVertexBufferLayout();

    /**
     * The cache of render pipelines
     *
     * @type {Map<number, CacheEntry[]>}
     */
    this.cache = new Map();
  }

  /** @private */
  get(primitive, vertexFormat0, vertexFormat1, shader, renderTarget, bindGroupFormats, blendState, depthState, cullMode, stencilEnabled, stencilFront, stencilBack) {
    var _vertexFormat0$render, _vertexFormat1$render, _bindGroupFormats$0$k, _bindGroupFormats$, _bindGroupFormats$1$k, _bindGroupFormats$2, _bindGroupFormats$2$k, _bindGroupFormats$3;
    Debug.assert(bindGroupFormats.length <= 3);

    // render pipeline unique hash
    const lookupHashes = this.lookupHashes;
    lookupHashes[0] = primitive.type;
    lookupHashes[1] = shader.id;
    lookupHashes[2] = cullMode;
    lookupHashes[3] = depthState.key;
    lookupHashes[4] = blendState.key;
    lookupHashes[5] = (_vertexFormat0$render = vertexFormat0 == null ? void 0 : vertexFormat0.renderingHash) != null ? _vertexFormat0$render : 0;
    lookupHashes[6] = (_vertexFormat1$render = vertexFormat1 == null ? void 0 : vertexFormat1.renderingHash) != null ? _vertexFormat1$render : 0;
    lookupHashes[7] = renderTarget.impl.key;
    lookupHashes[8] = (_bindGroupFormats$0$k = (_bindGroupFormats$ = bindGroupFormats[0]) == null ? void 0 : _bindGroupFormats$.key) != null ? _bindGroupFormats$0$k : 0;
    lookupHashes[9] = (_bindGroupFormats$1$k = (_bindGroupFormats$2 = bindGroupFormats[1]) == null ? void 0 : _bindGroupFormats$2.key) != null ? _bindGroupFormats$1$k : 0;
    lookupHashes[10] = (_bindGroupFormats$2$k = (_bindGroupFormats$3 = bindGroupFormats[2]) == null ? void 0 : _bindGroupFormats$3.key) != null ? _bindGroupFormats$2$k : 0;
    lookupHashes[11] = stencilEnabled ? stencilFront.key : 0;
    lookupHashes[12] = stencilEnabled ? stencilBack.key : 0;
    const hash = hash32Fnv1a(lookupHashes);

    // cached pipeline
    let cacheEntries = this.cache.get(hash);

    // if we have cache entries, find the exact match, as hash collision can occur
    if (cacheEntries) {
      for (let i = 0; i < cacheEntries.length; i++) {
        const entry = cacheEntries[i];
        if (array.equals(entry.hashes, lookupHashes)) {
          return entry.pipeline;
        }
      }
    }

    // no match or a hash collision, so create a new pipeline
    const primitiveTopology = _primitiveTopology[primitive.type];
    Debug.assert(primitiveTopology, `Unsupported primitive topology`, primitive);

    // pipeline layout
    const pipelineLayout = this.getPipelineLayout(bindGroupFormats);

    // vertex buffer layout
    const vertexBufferLayout = this.vertexBufferLayout.get(vertexFormat0, vertexFormat1);

    // pipeline
    const cacheEntry = new CacheEntry();
    cacheEntry.hashes = new Uint32Array(lookupHashes);
    cacheEntry.pipeline = this.create(primitiveTopology, shader, renderTarget, pipelineLayout, blendState, depthState, vertexBufferLayout, cullMode, stencilEnabled, stencilFront, stencilBack);

    // add to cache
    if (cacheEntries) {
      cacheEntries.push(cacheEntry);
    } else {
      cacheEntries = [cacheEntry];
    }
    this.cache.set(hash, cacheEntries);
    return cacheEntry.pipeline;
  }

  // TODO: this could be cached using bindGroupKey

  /**
   * @param {import('../bind-group-format.js').BindGroupFormat[]} bindGroupFormats - An array
   * of bind group formats.
   * @returns {any} Returns the pipeline layout.
   */
  getPipelineLayout(bindGroupFormats) {
    bindGroupFormats.forEach(format => {
      _bindGroupLayouts.push(format.bindGroupLayout);
    });
    const descr = {
      bindGroupLayouts: _bindGroupLayouts
    };
    _layoutId++;
    DebugHelper.setLabel(descr, `PipelineLayoutDescr-${_layoutId}`);

    /** @type {GPUPipelineLayout} */
    const pipelineLayout = this.device.wgpu.createPipelineLayout(descr);
    DebugHelper.setLabel(pipelineLayout, `PipelineLayout-${_layoutId}`);
    Debug.trace(TRACEID_PIPELINELAYOUT_ALLOC, `Alloc: Id ${_layoutId}`, {
      descr,
      bindGroupFormats
    });
    _bindGroupLayouts.length = 0;
    return pipelineLayout;
  }
  getBlend(blendState) {
    // blend needs to be undefined when blending is disabled
    let blend;
    if (blendState.blend) {
      /** @type {GPUBlendState} */
      blend = {
        color: {
          operation: _blendOperation[blendState.colorOp],
          srcFactor: _blendFactor[blendState.colorSrcFactor],
          dstFactor: _blendFactor[blendState.colorDstFactor]
        },
        alpha: {
          operation: _blendOperation[blendState.alphaOp],
          srcFactor: _blendFactor[blendState.alphaSrcFactor],
          dstFactor: _blendFactor[blendState.alphaDstFactor]
        }
      };

      // unsupported blend factors
      Debug.assert(blend.color.srcFactor !== undefined);
      Debug.assert(blend.color.dstFactor !== undefined);
      Debug.assert(blend.alpha.srcFactor !== undefined);
      Debug.assert(blend.alpha.dstFactor !== undefined);
    }
    return blend;
  }

  /** @private */
  getDepthStencil(depthState, renderTarget, stencilEnabled, stencilFront, stencilBack) {
    /** @type {GPUDepthStencilState} */
    let depthStencil;
    const {
      depth,
      stencil
    } = renderTarget;
    if (depth || stencil) {
      // format of depth-stencil attachment
      depthStencil = {
        format: renderTarget.impl.depthFormat
      };

      // depth
      if (depth) {
        depthStencil.depthWriteEnabled = depthState.write;
        depthStencil.depthCompare = _compareFunction[depthState.func];
      } else {
        // if render target does not have depth buffer
        depthStencil.depthWriteEnabled = false;
        depthStencil.depthCompare = 'always';
      }

      // stencil
      if (stencil && stencilEnabled) {
        // Note that WebGPU only supports a single mask, we use the one from front, but not from back.
        depthStencil.stencilReadMas = stencilFront.readMask;
        depthStencil.stencilWriteMask = stencilFront.writeMask;
        depthStencil.stencilFront = {
          compare: _compareFunction[stencilFront.func],
          failOp: _stencilOps[stencilFront.fail],
          passOp: _stencilOps[stencilFront.zpass],
          depthFailOp: _stencilOps[stencilFront.zfail]
        };
        depthStencil.stencilBack = {
          compare: _compareFunction[stencilBack.func],
          failOp: _stencilOps[stencilBack.fail],
          passOp: _stencilOps[stencilBack.zpass],
          depthFailOp: _stencilOps[stencilBack.zfail]
        };
      }
    }
    return depthStencil;
  }
  create(primitiveTopology, shader, renderTarget, pipelineLayout, blendState, depthState, vertexBufferLayout, cullMode, stencilEnabled, stencilFront, stencilBack) {
    const wgpu = this.device.wgpu;

    /** @type {import('./webgpu-shader.js').WebgpuShader} */
    const webgpuShader = shader.impl;

    /** @type {GPURenderPipelineDescriptor} */
    const descr = {
      vertex: {
        module: webgpuShader.getVertexShaderModule(),
        entryPoint: webgpuShader.vertexEntryPoint,
        buffers: vertexBufferLayout
      },
      fragment: {
        module: webgpuShader.getFragmentShaderModule(),
        entryPoint: webgpuShader.fragmentEntryPoint,
        targets: []
      },
      primitive: {
        topology: primitiveTopology,
        frontFace: 'ccw',
        cullMode: _cullModes[cullMode]
      },
      depthStencil: this.getDepthStencil(depthState, renderTarget, stencilEnabled, stencilFront, stencilBack),
      multisample: {
        count: renderTarget.samples
      },
      // uniform / texture binding layout
      layout: pipelineLayout
    };
    const colorAttachments = renderTarget.impl.colorAttachments;
    if (colorAttachments.length > 0) {
      // the same write mask is used by all color buffers, to match the WebGL behavior
      let writeMask = 0;
      if (blendState.redWrite) writeMask |= GPUColorWrite.RED;
      if (blendState.greenWrite) writeMask |= GPUColorWrite.GREEN;
      if (blendState.blueWrite) writeMask |= GPUColorWrite.BLUE;
      if (blendState.alphaWrite) writeMask |= GPUColorWrite.ALPHA;

      // the same blend state is used by all color buffers, to match the WebGL behavior
      const blend = this.getBlend(blendState);
      colorAttachments.forEach(attachment => {
        descr.fragment.targets.push({
          format: attachment.format,
          writeMask: writeMask,
          blend: blend
        });
      });
    }
    WebgpuDebug.validate(this.device);
    _pipelineId++;
    DebugHelper.setLabel(descr, `RenderPipelineDescr-${_pipelineId}`);
    const pipeline = wgpu.createRenderPipeline(descr);
    DebugHelper.setLabel(pipeline, `RenderPipeline-${_pipelineId}`);
    Debug.trace(TRACEID_RENDERPIPELINE_ALLOC, `Alloc: Id ${_pipelineId}`, descr);
    WebgpuDebug.end(this.device, {
      renderPipeline: this,
      descr,
      shader
    });
    return pipeline;
  }
}

export { WebgpuRenderPipeline };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LXJlbmRlci1waXBlbGluZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtcmVuZGVyLXBpcGVsaW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnLCBEZWJ1Z0hlbHBlciB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2RlYnVnLmpzXCI7XG5pbXBvcnQgeyBoYXNoMzJGbnYxYSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2hhc2guanNcIjtcbmltcG9ydCB7IGFycmF5IH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvYXJyYXktdXRpbHMuanNcIjtcbmltcG9ydCB7IFRSQUNFSURfUkVOREVSUElQRUxJTkVfQUxMT0MsIFRSQUNFSURfUElQRUxJTkVMQVlPVVRfQUxMT0MgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb25zdGFudHMuanNcIjtcblxuaW1wb3J0IHsgV2ViZ3B1VmVydGV4QnVmZmVyTGF5b3V0IH0gZnJvbSBcIi4vd2ViZ3B1LXZlcnRleC1idWZmZXItbGF5b3V0LmpzXCI7XG5pbXBvcnQgeyBXZWJncHVEZWJ1ZyB9IGZyb20gXCIuL3dlYmdwdS1kZWJ1Zy5qc1wiO1xuXG5sZXQgX3BpcGVsaW5lSWQgPSAwO1xubGV0IF9sYXlvdXRJZCA9IDA7XG5cbmNvbnN0IF9wcmltaXRpdmVUb3BvbG9neSA9IFtcbiAgICAncG9pbnQtbGlzdCcsICAgICAgIC8vIFBSSU1JVElWRV9QT0lOVFNcbiAgICAnbGluZS1saXN0JywgICAgICAgIC8vIFBSSU1JVElWRV9MSU5FU1xuICAgIHVuZGVmaW5lZCwgICAgICAgICAgLy8gUFJJTUlUSVZFX0xJTkVMT09QXG4gICAgJ2xpbmUtc3RyaXAnLCAgICAgICAvLyBQUklNSVRJVkVfTElORVNUUklQXG4gICAgJ3RyaWFuZ2xlLWxpc3QnLCAgICAvLyBQUklNSVRJVkVfVFJJQU5HTEVTXG4gICAgJ3RyaWFuZ2xlLXN0cmlwJywgICAvLyBQUklNSVRJVkVfVFJJU1RSSVBcbiAgICB1bmRlZmluZWQgICAgICAgICAgIC8vIFBSSU1JVElWRV9UUklGQU5cbl07XG5cbmNvbnN0IF9ibGVuZE9wZXJhdGlvbiA9IFtcbiAgICAnYWRkJywgICAgICAgICAgICAgIC8vIEJMRU5ERVFVQVRJT05fQUREXG4gICAgJ3N1YnRyYWN0JywgICAgICAgICAvLyBCTEVOREVRVUFUSU9OX1NVQlRSQUNUXG4gICAgJ3JldmVyc2Utc3VidHJhY3QnLCAvLyBCTEVOREVRVUFUSU9OX1JFVkVSU0VfU1VCVFJBQ1RcbiAgICAnbWluJywgICAgICAgICAgICAgIC8vIEJMRU5ERVFVQVRJT05fTUlOXG4gICAgJ21heCcgICAgICAgICAgICAgICAvLyBCTEVOREVRVUFUSU9OX01BWFxuXTtcblxuY29uc3QgX2JsZW5kRmFjdG9yID0gW1xuICAgICd6ZXJvJywgICAgICAgICAgICAgICAgIC8vIEJMRU5ETU9ERV9aRVJPXG4gICAgJ29uZScsICAgICAgICAgICAgICAgICAgLy8gQkxFTkRNT0RFX09ORVxuICAgICdzcmMnLCAgICAgICAgICAgICAgICAgIC8vIEJMRU5ETU9ERV9TUkNfQ09MT1JcbiAgICAnb25lLW1pbnVzLXNyYycsICAgICAgICAvLyBCTEVORE1PREVfT05FX01JTlVTX1NSQ19DT0xPUlxuICAgICdkc3QnLCAgICAgICAgICAgICAgICAgIC8vIEJMRU5ETU9ERV9EU1RfQ09MT1JcbiAgICAnb25lLW1pbnVzLWRzdCcsICAgICAgICAvLyBCTEVORE1PREVfT05FX01JTlVTX0RTVF9DT0xPUlxuICAgICdzcmMtYWxwaGEnLCAgICAgICAgICAgIC8vIEJMRU5ETU9ERV9TUkNfQUxQSEFcbiAgICAnc3JjLWFscGhhLXNhdHVyYXRlZCcsICAvLyBCTEVORE1PREVfU1JDX0FMUEhBX1NBVFVSQVRFXG4gICAgJ29uZS1taW51cy1zcmMtYWxwaGEnLCAgLy8gQkxFTkRNT0RFX09ORV9NSU5VU19TUkNfQUxQSEFcbiAgICAnZHN0LWFscGhhJywgICAgICAgICAgICAvLyBCTEVORE1PREVfRFNUX0FMUEhBXG4gICAgJ29uZS1taW51cy1kc3QtYWxwaGEnLCAgLy8gQkxFTkRNT0RFX09ORV9NSU5VU19EU1RfQUxQSEFcbiAgICAnY29uc3RhbnQnLCAgICAgICAgICAgICAvLyBCTEVORE1PREVfQ09OU1RBTlRcbiAgICAnb25lLW1pbnVzLWNvbnN0YW50JyAgICAvLyBCTEVORE1PREVfT05FX01JTlVTX0NPTlNUQU5UXG5dO1xuXG5jb25zdCBfY29tcGFyZUZ1bmN0aW9uID0gW1xuICAgICduZXZlcicsICAgICAgICAgICAgICAgIC8vIEZVTkNfTkVWRVJcbiAgICAnbGVzcycsICAgICAgICAgICAgICAgICAvLyBGVU5DX0xFU1NcbiAgICAnZXF1YWwnLCAgICAgICAgICAgICAgICAvLyBGVU5DX0VRVUFMXG4gICAgJ2xlc3MtZXF1YWwnLCAgICAgICAgICAgLy8gRlVOQ19MRVNTRVFVQUxcbiAgICAnZ3JlYXRlcicsICAgICAgICAgICAgICAvLyBGVU5DX0dSRUFURVJcbiAgICAnbm90LWVxdWFsJywgICAgICAgICAgICAvLyBGVU5DX05PVEVRVUFMXG4gICAgJ2dyZWF0ZXItZXF1YWwnLCAgICAgICAgLy8gRlVOQ19HUkVBVEVSRVFVQUxcbiAgICAnYWx3YXlzJyAgICAgICAgICAgICAgICAvLyBGVU5DX0FMV0FZU1xuXTtcblxuY29uc3QgX2N1bGxNb2RlcyA9IFtcbiAgICAnbm9uZScsICAgICAgICAgICAgICAgICAvLyBDVUxMRkFDRV9OT05FXG4gICAgJ2JhY2snLCAgICAgICAgICAgICAgICAgLy8gQ1VMTEZBQ0VfQkFDS1xuICAgICdmcm9udCcgICAgICAgICAgICAgICAgIC8vIENVTExGQUNFX0ZST05UXG5dO1xuXG5jb25zdCBfc3RlbmNpbE9wcyA9IFtcbiAgICAna2VlcCcsICAgICAgICAgICAgICAgICAvLyBTVEVOQ0lMT1BfS0VFUFxuICAgICd6ZXJvJywgICAgICAgICAgICAgICAgIC8vIFNURU5DSUxPUF9aRVJPXG4gICAgJ3JlcGxhY2UnLCAgICAgICAgICAgICAgLy8gU1RFTkNJTE9QX1JFUExBQ0VcbiAgICAnaW5jcmVtZW50LWNsYW1wJywgICAgICAvLyBTVEVOQ0lMT1BfSU5DUkVNRU5UXG4gICAgJ2luY3JlbWVudC13cmFwJywgICAgICAgLy8gU1RFTkNJTE9QX0lOQ1JFTUVOVFdSQVBcbiAgICAnZGVjcmVtZW50LWNsYW1wJywgICAgICAvLyBTVEVOQ0lMT1BfREVDUkVNRU5UXG4gICAgJ2RlY3JlbWVudC13cmFwJywgICAgICAgLy8gU1RFTkNJTE9QX0RFQ1JFTUVOVFdSQVBcbiAgICAnaW52ZXJ0JyAgICAgICAgICAgICAgICAvLyBTVEVOQ0lMT1BfSU5WRVJUXG5dO1xuXG4vLyB0ZW1wIGFycmF5IHRvIGF2b2lkIGFsbG9jYXRpb25cbmNvbnN0IF9iaW5kR3JvdXBMYXlvdXRzID0gW107XG5cbi8qKiBAaWdub3JlICovXG5jbGFzcyBDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgcGlwZWxpbmVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtHUFVSZW5kZXJQaXBlbGluZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBpcGVsaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bGwgYXJyYXkgb2YgaGFzaGVzIHVzZWQgdG8gbG9va3VwIHRoZSBwaXBlbGluZSwgdXNlZCBpbiBjYXNlIG9mIGhhc2ggY29sbGlzaW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge1VpbnQzMkFycmF5fVxuICAgICAqL1xuICAgIGhhc2hlcztcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFdlYmdwdVJlbmRlclBpcGVsaW5lIHtcbiAgICBsb29rdXBIYXNoZXMgPSBuZXcgVWludDMyQXJyYXkoMTMpO1xuXG4gICAgY29uc3RydWN0b3IoZGV2aWNlKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3dlYmdwdS1ncmFwaGljcy1kZXZpY2UuanMnKS5XZWJncHVHcmFwaGljc0RldmljZX0gKi9cbiAgICAgICAgdGhpcy5kZXZpY2UgPSBkZXZpY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjYWNoZSBvZiB2ZXJ0ZXggYnVmZmVyIGxheW91dHNcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge1dlYmdwdVZlcnRleEJ1ZmZlckxheW91dH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVydGV4QnVmZmVyTGF5b3V0ID0gbmV3IFdlYmdwdVZlcnRleEJ1ZmZlckxheW91dCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY2FjaGUgb2YgcmVuZGVyIHBpcGVsaW5lc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7TWFwPG51bWJlciwgQ2FjaGVFbnRyeVtdPn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgZ2V0KHByaW1pdGl2ZSwgdmVydGV4Rm9ybWF0MCwgdmVydGV4Rm9ybWF0MSwgc2hhZGVyLCByZW5kZXJUYXJnZXQsIGJpbmRHcm91cEZvcm1hdHMsIGJsZW5kU3RhdGUsXG4gICAgICAgIGRlcHRoU3RhdGUsIGN1bGxNb2RlLCBzdGVuY2lsRW5hYmxlZCwgc3RlbmNpbEZyb250LCBzdGVuY2lsQmFjaykge1xuXG4gICAgICAgIERlYnVnLmFzc2VydChiaW5kR3JvdXBGb3JtYXRzLmxlbmd0aCA8PSAzKTtcblxuICAgICAgICAvLyByZW5kZXIgcGlwZWxpbmUgdW5pcXVlIGhhc2hcbiAgICAgICAgY29uc3QgbG9va3VwSGFzaGVzID0gdGhpcy5sb29rdXBIYXNoZXM7XG4gICAgICAgIGxvb2t1cEhhc2hlc1swXSA9IHByaW1pdGl2ZS50eXBlO1xuICAgICAgICBsb29rdXBIYXNoZXNbMV0gPSBzaGFkZXIuaWQ7XG4gICAgICAgIGxvb2t1cEhhc2hlc1syXSA9IGN1bGxNb2RlO1xuICAgICAgICBsb29rdXBIYXNoZXNbM10gPSBkZXB0aFN0YXRlLmtleTtcbiAgICAgICAgbG9va3VwSGFzaGVzWzRdID0gYmxlbmRTdGF0ZS5rZXk7XG4gICAgICAgIGxvb2t1cEhhc2hlc1s1XSA9IHZlcnRleEZvcm1hdDA/LnJlbmRlcmluZ0hhc2ggPz8gMDtcbiAgICAgICAgbG9va3VwSGFzaGVzWzZdID0gdmVydGV4Rm9ybWF0MT8ucmVuZGVyaW5nSGFzaCA/PyAwO1xuICAgICAgICBsb29rdXBIYXNoZXNbN10gPSByZW5kZXJUYXJnZXQuaW1wbC5rZXk7XG4gICAgICAgIGxvb2t1cEhhc2hlc1s4XSA9IGJpbmRHcm91cEZvcm1hdHNbMF0/LmtleSA/PyAwO1xuICAgICAgICBsb29rdXBIYXNoZXNbOV0gPSBiaW5kR3JvdXBGb3JtYXRzWzFdPy5rZXkgPz8gMDtcbiAgICAgICAgbG9va3VwSGFzaGVzWzEwXSA9IGJpbmRHcm91cEZvcm1hdHNbMl0/LmtleSA/PyAwO1xuICAgICAgICBsb29rdXBIYXNoZXNbMTFdID0gc3RlbmNpbEVuYWJsZWQgPyBzdGVuY2lsRnJvbnQua2V5IDogMDtcbiAgICAgICAgbG9va3VwSGFzaGVzWzEyXSA9IHN0ZW5jaWxFbmFibGVkID8gc3RlbmNpbEJhY2sua2V5IDogMDtcbiAgICAgICAgY29uc3QgaGFzaCA9IGhhc2gzMkZudjFhKGxvb2t1cEhhc2hlcyk7XG5cbiAgICAgICAgLy8gY2FjaGVkIHBpcGVsaW5lXG4gICAgICAgIGxldCBjYWNoZUVudHJpZXMgPSB0aGlzLmNhY2hlLmdldChoYXNoKTtcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGNhY2hlIGVudHJpZXMsIGZpbmQgdGhlIGV4YWN0IG1hdGNoLCBhcyBoYXNoIGNvbGxpc2lvbiBjYW4gb2NjdXJcbiAgICAgICAgaWYgKGNhY2hlRW50cmllcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWNoZUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGNhY2hlRW50cmllc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXkuZXF1YWxzKGVudHJ5Lmhhc2hlcywgbG9va3VwSGFzaGVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkucGlwZWxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gbWF0Y2ggb3IgYSBoYXNoIGNvbGxpc2lvbiwgc28gY3JlYXRlIGEgbmV3IHBpcGVsaW5lXG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZVRvcG9sb2d5ID0gX3ByaW1pdGl2ZVRvcG9sb2d5W3ByaW1pdGl2ZS50eXBlXTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KHByaW1pdGl2ZVRvcG9sb2d5LCBgVW5zdXBwb3J0ZWQgcHJpbWl0aXZlIHRvcG9sb2d5YCwgcHJpbWl0aXZlKTtcblxuICAgICAgICAvLyBwaXBlbGluZSBsYXlvdXRcbiAgICAgICAgY29uc3QgcGlwZWxpbmVMYXlvdXQgPSB0aGlzLmdldFBpcGVsaW5lTGF5b3V0KGJpbmRHcm91cEZvcm1hdHMpO1xuXG4gICAgICAgIC8vIHZlcnRleCBidWZmZXIgbGF5b3V0XG4gICAgICAgIGNvbnN0IHZlcnRleEJ1ZmZlckxheW91dCA9IHRoaXMudmVydGV4QnVmZmVyTGF5b3V0LmdldCh2ZXJ0ZXhGb3JtYXQwLCB2ZXJ0ZXhGb3JtYXQxKTtcblxuICAgICAgICAvLyBwaXBlbGluZVxuICAgICAgICBjb25zdCBjYWNoZUVudHJ5ID0gbmV3IENhY2hlRW50cnkoKTtcbiAgICAgICAgY2FjaGVFbnRyeS5oYXNoZXMgPSBuZXcgVWludDMyQXJyYXkobG9va3VwSGFzaGVzKTtcbiAgICAgICAgY2FjaGVFbnRyeS5waXBlbGluZSA9IHRoaXMuY3JlYXRlKHByaW1pdGl2ZVRvcG9sb2d5LCBzaGFkZXIsIHJlbmRlclRhcmdldCwgcGlwZWxpbmVMYXlvdXQsIGJsZW5kU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXB0aFN0YXRlLCB2ZXJ0ZXhCdWZmZXJMYXlvdXQsIGN1bGxNb2RlLCBzdGVuY2lsRW5hYmxlZCwgc3RlbmNpbEZyb250LCBzdGVuY2lsQmFjayk7XG5cbiAgICAgICAgLy8gYWRkIHRvIGNhY2hlXG4gICAgICAgIGlmIChjYWNoZUVudHJpZXMpIHtcbiAgICAgICAgICAgIGNhY2hlRW50cmllcy5wdXNoKGNhY2hlRW50cnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVFbnRyaWVzID0gW2NhY2hlRW50cnldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGhhc2gsIGNhY2hlRW50cmllcyk7XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlRW50cnkucGlwZWxpbmU7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBjb3VsZCBiZSBjYWNoZWQgdXNpbmcgYmluZEdyb3VwS2V5XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYmluZC1ncm91cC1mb3JtYXQuanMnKS5CaW5kR3JvdXBGb3JtYXRbXX0gYmluZEdyb3VwRm9ybWF0cyAtIEFuIGFycmF5XG4gICAgICogb2YgYmluZCBncm91cCBmb3JtYXRzLlxuICAgICAqIEByZXR1cm5zIHthbnl9IFJldHVybnMgdGhlIHBpcGVsaW5lIGxheW91dC5cbiAgICAgKi9cbiAgICBnZXRQaXBlbGluZUxheW91dChiaW5kR3JvdXBGb3JtYXRzKSB7XG5cbiAgICAgICAgYmluZEdyb3VwRm9ybWF0cy5mb3JFYWNoKChmb3JtYXQpID0+IHtcbiAgICAgICAgICAgIF9iaW5kR3JvdXBMYXlvdXRzLnB1c2goZm9ybWF0LmJpbmRHcm91cExheW91dCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyID0ge1xuICAgICAgICAgICAgYmluZEdyb3VwTGF5b3V0czogX2JpbmRHcm91cExheW91dHNcbiAgICAgICAgfTtcblxuICAgICAgICBfbGF5b3V0SWQrKztcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwoZGVzY3IsIGBQaXBlbGluZUxheW91dERlc2NyLSR7X2xheW91dElkfWApO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7R1BVUGlwZWxpbmVMYXlvdXR9ICovXG4gICAgICAgIGNvbnN0IHBpcGVsaW5lTGF5b3V0ID0gdGhpcy5kZXZpY2Uud2dwdS5jcmVhdGVQaXBlbGluZUxheW91dChkZXNjcik7XG4gICAgICAgIERlYnVnSGVscGVyLnNldExhYmVsKHBpcGVsaW5lTGF5b3V0LCBgUGlwZWxpbmVMYXlvdXQtJHtfbGF5b3V0SWR9YCk7XG4gICAgICAgIERlYnVnLnRyYWNlKFRSQUNFSURfUElQRUxJTkVMQVlPVVRfQUxMT0MsIGBBbGxvYzogSWQgJHtfbGF5b3V0SWR9YCwge1xuICAgICAgICAgICAgZGVzY3IsXG4gICAgICAgICAgICBiaW5kR3JvdXBGb3JtYXRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9iaW5kR3JvdXBMYXlvdXRzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHBpcGVsaW5lTGF5b3V0O1xuICAgIH1cblxuICAgIGdldEJsZW5kKGJsZW5kU3RhdGUpIHtcblxuICAgICAgICAvLyBibGVuZCBuZWVkcyB0byBiZSB1bmRlZmluZWQgd2hlbiBibGVuZGluZyBpcyBkaXNhYmxlZFxuICAgICAgICBsZXQgYmxlbmQ7XG5cbiAgICAgICAgaWYgKGJsZW5kU3RhdGUuYmxlbmQpIHtcblxuICAgICAgICAgICAgLyoqIEB0eXBlIHtHUFVCbGVuZFN0YXRlfSAqL1xuICAgICAgICAgICAgYmxlbmQgPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBfYmxlbmRPcGVyYXRpb25bYmxlbmRTdGF0ZS5jb2xvck9wXSxcbiAgICAgICAgICAgICAgICAgICAgc3JjRmFjdG9yOiBfYmxlbmRGYWN0b3JbYmxlbmRTdGF0ZS5jb2xvclNyY0ZhY3Rvcl0sXG4gICAgICAgICAgICAgICAgICAgIGRzdEZhY3RvcjogX2JsZW5kRmFjdG9yW2JsZW5kU3RhdGUuY29sb3JEc3RGYWN0b3JdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhbHBoYToge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IF9ibGVuZE9wZXJhdGlvbltibGVuZFN0YXRlLmFscGhhT3BdLFxuICAgICAgICAgICAgICAgICAgICBzcmNGYWN0b3I6IF9ibGVuZEZhY3RvcltibGVuZFN0YXRlLmFscGhhU3JjRmFjdG9yXSxcbiAgICAgICAgICAgICAgICAgICAgZHN0RmFjdG9yOiBfYmxlbmRGYWN0b3JbYmxlbmRTdGF0ZS5hbHBoYURzdEZhY3Rvcl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyB1bnN1cHBvcnRlZCBibGVuZCBmYWN0b3JzXG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoYmxlbmQuY29sb3Iuc3JjRmFjdG9yICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGJsZW5kLmNvbG9yLmRzdEZhY3RvciAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChibGVuZC5hbHBoYS5zcmNGYWN0b3IgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoYmxlbmQuYWxwaGEuZHN0RmFjdG9yICE9PSB1bmRlZmluZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJsZW5kO1xuICAgIH1cblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGdldERlcHRoU3RlbmNpbChkZXB0aFN0YXRlLCByZW5kZXJUYXJnZXQsIHN0ZW5jaWxFbmFibGVkLCBzdGVuY2lsRnJvbnQsIHN0ZW5jaWxCYWNrKSB7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtHUFVEZXB0aFN0ZW5jaWxTdGF0ZX0gKi9cbiAgICAgICAgbGV0IGRlcHRoU3RlbmNpbDtcbiAgICAgICAgY29uc3QgeyBkZXB0aCwgc3RlbmNpbCB9ID0gcmVuZGVyVGFyZ2V0O1xuICAgICAgICBpZiAoZGVwdGggfHwgc3RlbmNpbCkge1xuXG4gICAgICAgICAgICAvLyBmb3JtYXQgb2YgZGVwdGgtc3RlbmNpbCBhdHRhY2htZW50XG4gICAgICAgICAgICBkZXB0aFN0ZW5jaWwgPSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiByZW5kZXJUYXJnZXQuaW1wbC5kZXB0aEZvcm1hdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gZGVwdGhcbiAgICAgICAgICAgIGlmIChkZXB0aCkge1xuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbC5kZXB0aFdyaXRlRW5hYmxlZCA9IGRlcHRoU3RhdGUud3JpdGU7XG4gICAgICAgICAgICAgICAgZGVwdGhTdGVuY2lsLmRlcHRoQ29tcGFyZSA9IF9jb21wYXJlRnVuY3Rpb25bZGVwdGhTdGF0ZS5mdW5jXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgcmVuZGVyIHRhcmdldCBkb2VzIG5vdCBoYXZlIGRlcHRoIGJ1ZmZlclxuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbC5kZXB0aFdyaXRlRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbC5kZXB0aENvbXBhcmUgPSAnYWx3YXlzJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3RlbmNpbFxuICAgICAgICAgICAgaWYgKHN0ZW5jaWwgJiYgc3RlbmNpbEVuYWJsZWQpIHtcblxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBXZWJHUFUgb25seSBzdXBwb3J0cyBhIHNpbmdsZSBtYXNrLCB3ZSB1c2UgdGhlIG9uZSBmcm9tIGZyb250LCBidXQgbm90IGZyb20gYmFjay5cbiAgICAgICAgICAgICAgICBkZXB0aFN0ZW5jaWwuc3RlbmNpbFJlYWRNYXMgPSBzdGVuY2lsRnJvbnQucmVhZE1hc2s7XG4gICAgICAgICAgICAgICAgZGVwdGhTdGVuY2lsLnN0ZW5jaWxXcml0ZU1hc2sgPSBzdGVuY2lsRnJvbnQud3JpdGVNYXNrO1xuXG4gICAgICAgICAgICAgICAgZGVwdGhTdGVuY2lsLnN0ZW5jaWxGcm9udCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogX2NvbXBhcmVGdW5jdGlvbltzdGVuY2lsRnJvbnQuZnVuY10sXG4gICAgICAgICAgICAgICAgICAgIGZhaWxPcDogX3N0ZW5jaWxPcHNbc3RlbmNpbEZyb250LmZhaWxdLFxuICAgICAgICAgICAgICAgICAgICBwYXNzT3A6IF9zdGVuY2lsT3BzW3N0ZW5jaWxGcm9udC56cGFzc10sXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoRmFpbE9wOiBfc3RlbmNpbE9wc1tzdGVuY2lsRnJvbnQuemZhaWxdXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbC5zdGVuY2lsQmFjayA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogX2NvbXBhcmVGdW5jdGlvbltzdGVuY2lsQmFjay5mdW5jXSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbE9wOiBfc3RlbmNpbE9wc1tzdGVuY2lsQmFjay5mYWlsXSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc09wOiBfc3RlbmNpbE9wc1tzdGVuY2lsQmFjay56cGFzc10sXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoRmFpbE9wOiBfc3RlbmNpbE9wc1tzdGVuY2lsQmFjay56ZmFpbF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlcHRoU3RlbmNpbDtcbiAgICB9XG5cbiAgICBjcmVhdGUocHJpbWl0aXZlVG9wb2xvZ3ksIHNoYWRlciwgcmVuZGVyVGFyZ2V0LCBwaXBlbGluZUxheW91dCwgYmxlbmRTdGF0ZSwgZGVwdGhTdGF0ZSwgdmVydGV4QnVmZmVyTGF5b3V0LFxuICAgICAgICBjdWxsTW9kZSwgc3RlbmNpbEVuYWJsZWQsIHN0ZW5jaWxGcm9udCwgc3RlbmNpbEJhY2spIHtcblxuICAgICAgICBjb25zdCB3Z3B1ID0gdGhpcy5kZXZpY2Uud2dwdTtcblxuICAgICAgICAvKiogQHR5cGUge2ltcG9ydCgnLi93ZWJncHUtc2hhZGVyLmpzJykuV2ViZ3B1U2hhZGVyfSAqL1xuICAgICAgICBjb25zdCB3ZWJncHVTaGFkZXIgPSBzaGFkZXIuaW1wbDtcblxuICAgICAgICAvKiogQHR5cGUge0dQVVJlbmRlclBpcGVsaW5lRGVzY3JpcHRvcn0gKi9cbiAgICAgICAgY29uc3QgZGVzY3IgPSB7XG4gICAgICAgICAgICB2ZXJ0ZXg6IHtcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHdlYmdwdVNoYWRlci5nZXRWZXJ0ZXhTaGFkZXJNb2R1bGUoKSxcbiAgICAgICAgICAgICAgICBlbnRyeVBvaW50OiB3ZWJncHVTaGFkZXIudmVydGV4RW50cnlQb2ludCxcbiAgICAgICAgICAgICAgICBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJMYXlvdXRcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgICAgICAgICAgbW9kdWxlOiB3ZWJncHVTaGFkZXIuZ2V0RnJhZ21lbnRTaGFkZXJNb2R1bGUoKSxcbiAgICAgICAgICAgICAgICBlbnRyeVBvaW50OiB3ZWJncHVTaGFkZXIuZnJhZ21lbnRFbnRyeVBvaW50LFxuICAgICAgICAgICAgICAgIHRhcmdldHM6IFtdXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwcmltaXRpdmU6IHtcbiAgICAgICAgICAgICAgICB0b3BvbG9neTogcHJpbWl0aXZlVG9wb2xvZ3ksXG4gICAgICAgICAgICAgICAgZnJvbnRGYWNlOiAnY2N3JyxcbiAgICAgICAgICAgICAgICBjdWxsTW9kZTogX2N1bGxNb2Rlc1tjdWxsTW9kZV1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRlcHRoU3RlbmNpbDogdGhpcy5nZXREZXB0aFN0ZW5jaWwoZGVwdGhTdGF0ZSwgcmVuZGVyVGFyZ2V0LCBzdGVuY2lsRW5hYmxlZCwgc3RlbmNpbEZyb250LCBzdGVuY2lsQmFjayksXG5cbiAgICAgICAgICAgIG11bHRpc2FtcGxlOiB7XG4gICAgICAgICAgICAgICAgY291bnQ6IHJlbmRlclRhcmdldC5zYW1wbGVzXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyB1bmlmb3JtIC8gdGV4dHVyZSBiaW5kaW5nIGxheW91dFxuICAgICAgICAgICAgbGF5b3V0OiBwaXBlbGluZUxheW91dFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNvbG9yQXR0YWNobWVudHMgPSByZW5kZXJUYXJnZXQuaW1wbC5jb2xvckF0dGFjaG1lbnRzO1xuICAgICAgICBpZiAoY29sb3JBdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIC8vIHRoZSBzYW1lIHdyaXRlIG1hc2sgaXMgdXNlZCBieSBhbGwgY29sb3IgYnVmZmVycywgdG8gbWF0Y2ggdGhlIFdlYkdMIGJlaGF2aW9yXG4gICAgICAgICAgICBsZXQgd3JpdGVNYXNrID0gMDtcbiAgICAgICAgICAgIGlmIChibGVuZFN0YXRlLnJlZFdyaXRlKSB3cml0ZU1hc2sgfD0gR1BVQ29sb3JXcml0ZS5SRUQ7XG4gICAgICAgICAgICBpZiAoYmxlbmRTdGF0ZS5ncmVlbldyaXRlKSB3cml0ZU1hc2sgfD0gR1BVQ29sb3JXcml0ZS5HUkVFTjtcbiAgICAgICAgICAgIGlmIChibGVuZFN0YXRlLmJsdWVXcml0ZSkgd3JpdGVNYXNrIHw9IEdQVUNvbG9yV3JpdGUuQkxVRTtcbiAgICAgICAgICAgIGlmIChibGVuZFN0YXRlLmFscGhhV3JpdGUpIHdyaXRlTWFzayB8PSBHUFVDb2xvcldyaXRlLkFMUEhBO1xuXG4gICAgICAgICAgICAvLyB0aGUgc2FtZSBibGVuZCBzdGF0ZSBpcyB1c2VkIGJ5IGFsbCBjb2xvciBidWZmZXJzLCB0byBtYXRjaCB0aGUgV2ViR0wgYmVoYXZpb3JcbiAgICAgICAgICAgIGNvbnN0IGJsZW5kID0gdGhpcy5nZXRCbGVuZChibGVuZFN0YXRlKTtcblxuICAgICAgICAgICAgY29sb3JBdHRhY2htZW50cy5mb3JFYWNoKChhdHRhY2htZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZGVzY3IuZnJhZ21lbnQudGFyZ2V0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBhdHRhY2htZW50LmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVNYXNrOiB3cml0ZU1hc2ssXG4gICAgICAgICAgICAgICAgICAgIGJsZW5kOiBibGVuZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBXZWJncHVEZWJ1Zy52YWxpZGF0ZSh0aGlzLmRldmljZSk7XG5cbiAgICAgICAgX3BpcGVsaW5lSWQrKztcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwoZGVzY3IsIGBSZW5kZXJQaXBlbGluZURlc2NyLSR7X3BpcGVsaW5lSWR9YCk7XG5cbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSB3Z3B1LmNyZWF0ZVJlbmRlclBpcGVsaW5lKGRlc2NyKTtcblxuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChwaXBlbGluZSwgYFJlbmRlclBpcGVsaW5lLSR7X3BpcGVsaW5lSWR9YCk7XG4gICAgICAgIERlYnVnLnRyYWNlKFRSQUNFSURfUkVOREVSUElQRUxJTkVfQUxMT0MsIGBBbGxvYzogSWQgJHtfcGlwZWxpbmVJZH1gLCBkZXNjcik7XG5cbiAgICAgICAgV2ViZ3B1RGVidWcuZW5kKHRoaXMuZGV2aWNlLCB7XG4gICAgICAgICAgICByZW5kZXJQaXBlbGluZTogdGhpcyxcbiAgICAgICAgICAgIGRlc2NyLFxuICAgICAgICAgICAgc2hhZGVyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwaXBlbGluZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdVJlbmRlclBpcGVsaW5lIH07XG4iXSwibmFtZXMiOlsiX3BpcGVsaW5lSWQiLCJfbGF5b3V0SWQiLCJfcHJpbWl0aXZlVG9wb2xvZ3kiLCJ1bmRlZmluZWQiLCJfYmxlbmRPcGVyYXRpb24iLCJfYmxlbmRGYWN0b3IiLCJfY29tcGFyZUZ1bmN0aW9uIiwiX2N1bGxNb2RlcyIsIl9zdGVuY2lsT3BzIiwiX2JpbmRHcm91cExheW91dHMiLCJDYWNoZUVudHJ5IiwiY29uc3RydWN0b3IiLCJwaXBlbGluZSIsImhhc2hlcyIsIldlYmdwdVJlbmRlclBpcGVsaW5lIiwiZGV2aWNlIiwibG9va3VwSGFzaGVzIiwiVWludDMyQXJyYXkiLCJ2ZXJ0ZXhCdWZmZXJMYXlvdXQiLCJXZWJncHVWZXJ0ZXhCdWZmZXJMYXlvdXQiLCJjYWNoZSIsIk1hcCIsImdldCIsInByaW1pdGl2ZSIsInZlcnRleEZvcm1hdDAiLCJ2ZXJ0ZXhGb3JtYXQxIiwic2hhZGVyIiwicmVuZGVyVGFyZ2V0IiwiYmluZEdyb3VwRm9ybWF0cyIsImJsZW5kU3RhdGUiLCJkZXB0aFN0YXRlIiwiY3VsbE1vZGUiLCJzdGVuY2lsRW5hYmxlZCIsInN0ZW5jaWxGcm9udCIsInN0ZW5jaWxCYWNrIiwiX3ZlcnRleEZvcm1hdDAkcmVuZGVyIiwiX3ZlcnRleEZvcm1hdDEkcmVuZGVyIiwiX2JpbmRHcm91cEZvcm1hdHMkMCRrIiwiX2JpbmRHcm91cEZvcm1hdHMkIiwiX2JpbmRHcm91cEZvcm1hdHMkMSRrIiwiX2JpbmRHcm91cEZvcm1hdHMkMiIsIl9iaW5kR3JvdXBGb3JtYXRzJDIkayIsIl9iaW5kR3JvdXBGb3JtYXRzJDMiLCJEZWJ1ZyIsImFzc2VydCIsImxlbmd0aCIsInR5cGUiLCJpZCIsImtleSIsInJlbmRlcmluZ0hhc2giLCJpbXBsIiwiaGFzaCIsImhhc2gzMkZudjFhIiwiY2FjaGVFbnRyaWVzIiwiaSIsImVudHJ5IiwiYXJyYXkiLCJlcXVhbHMiLCJwcmltaXRpdmVUb3BvbG9neSIsInBpcGVsaW5lTGF5b3V0IiwiZ2V0UGlwZWxpbmVMYXlvdXQiLCJjYWNoZUVudHJ5IiwiY3JlYXRlIiwicHVzaCIsInNldCIsImZvckVhY2giLCJmb3JtYXQiLCJiaW5kR3JvdXBMYXlvdXQiLCJkZXNjciIsImJpbmRHcm91cExheW91dHMiLCJEZWJ1Z0hlbHBlciIsInNldExhYmVsIiwid2dwdSIsImNyZWF0ZVBpcGVsaW5lTGF5b3V0IiwidHJhY2UiLCJUUkFDRUlEX1BJUEVMSU5FTEFZT1VUX0FMTE9DIiwiZ2V0QmxlbmQiLCJibGVuZCIsImNvbG9yIiwib3BlcmF0aW9uIiwiY29sb3JPcCIsInNyY0ZhY3RvciIsImNvbG9yU3JjRmFjdG9yIiwiZHN0RmFjdG9yIiwiY29sb3JEc3RGYWN0b3IiLCJhbHBoYSIsImFscGhhT3AiLCJhbHBoYVNyY0ZhY3RvciIsImFscGhhRHN0RmFjdG9yIiwiZ2V0RGVwdGhTdGVuY2lsIiwiZGVwdGhTdGVuY2lsIiwiZGVwdGgiLCJzdGVuY2lsIiwiZGVwdGhGb3JtYXQiLCJkZXB0aFdyaXRlRW5hYmxlZCIsIndyaXRlIiwiZGVwdGhDb21wYXJlIiwiZnVuYyIsInN0ZW5jaWxSZWFkTWFzIiwicmVhZE1hc2siLCJzdGVuY2lsV3JpdGVNYXNrIiwid3JpdGVNYXNrIiwiY29tcGFyZSIsImZhaWxPcCIsImZhaWwiLCJwYXNzT3AiLCJ6cGFzcyIsImRlcHRoRmFpbE9wIiwiemZhaWwiLCJ3ZWJncHVTaGFkZXIiLCJ2ZXJ0ZXgiLCJtb2R1bGUiLCJnZXRWZXJ0ZXhTaGFkZXJNb2R1bGUiLCJlbnRyeVBvaW50IiwidmVydGV4RW50cnlQb2ludCIsImJ1ZmZlcnMiLCJmcmFnbWVudCIsImdldEZyYWdtZW50U2hhZGVyTW9kdWxlIiwiZnJhZ21lbnRFbnRyeVBvaW50IiwidGFyZ2V0cyIsInRvcG9sb2d5IiwiZnJvbnRGYWNlIiwibXVsdGlzYW1wbGUiLCJjb3VudCIsInNhbXBsZXMiLCJsYXlvdXQiLCJjb2xvckF0dGFjaG1lbnRzIiwicmVkV3JpdGUiLCJHUFVDb2xvcldyaXRlIiwiUkVEIiwiZ3JlZW5Xcml0ZSIsIkdSRUVOIiwiYmx1ZVdyaXRlIiwiQkxVRSIsImFscGhhV3JpdGUiLCJBTFBIQSIsImF0dGFjaG1lbnQiLCJXZWJncHVEZWJ1ZyIsInZhbGlkYXRlIiwiY3JlYXRlUmVuZGVyUGlwZWxpbmUiLCJUUkFDRUlEX1JFTkRFUlBJUEVMSU5FX0FMTE9DIiwiZW5kIiwicmVuZGVyUGlwZWxpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFRQSxJQUFJQSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0FBQ25CLElBQUlDLFNBQVMsR0FBRyxDQUFDLENBQUE7QUFFakIsTUFBTUMsa0JBQWtCLEdBQUcsQ0FDdkIsWUFBWTtBQUFRO0FBQ3BCLFdBQVc7QUFBUztBQUNwQkMsU0FBUztBQUFXO0FBQ3BCLFlBQVk7QUFBUTtBQUNwQixlQUFlO0FBQUs7QUFDcEIsZ0JBQWdCO0FBQUk7QUFDcEJBLFNBQVM7QUFBVyxDQUN2QixDQUFBOztBQUVELE1BQU1DLGVBQWUsR0FBRyxDQUNwQixLQUFLO0FBQWU7QUFDcEIsVUFBVTtBQUFVO0FBQ3BCLGtCQUFrQjtBQUFFO0FBQ3BCLEtBQUs7QUFBZTtBQUNwQixLQUFLO0FBQWUsQ0FDdkIsQ0FBQTs7QUFFRCxNQUFNQyxZQUFZLEdBQUcsQ0FDakIsTUFBTTtBQUFrQjtBQUN4QixLQUFLO0FBQW1CO0FBQ3hCLEtBQUs7QUFBbUI7QUFDeEIsZUFBZTtBQUFTO0FBQ3hCLEtBQUs7QUFBbUI7QUFDeEIsZUFBZTtBQUFTO0FBQ3hCLFdBQVc7QUFBYTtBQUN4QixxQkFBcUI7QUFBRztBQUN4QixxQkFBcUI7QUFBRztBQUN4QixXQUFXO0FBQWE7QUFDeEIscUJBQXFCO0FBQUc7QUFDeEIsVUFBVTtBQUFjO0FBQ3hCLG9CQUFvQjtBQUFJLENBQzNCLENBQUE7O0FBRUQsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FDckIsT0FBTztBQUFpQjtBQUN4QixNQUFNO0FBQWtCO0FBQ3hCLE9BQU87QUFBaUI7QUFDeEIsWUFBWTtBQUFZO0FBQ3hCLFNBQVM7QUFBZTtBQUN4QixXQUFXO0FBQWE7QUFDeEIsZUFBZTtBQUFTO0FBQ3hCLFFBQVE7QUFBZ0IsQ0FDM0IsQ0FBQTs7QUFFRCxN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
