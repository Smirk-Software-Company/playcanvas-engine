import { DebugHelper, Debug } from '../../core/debug.js';
import { Tracing } from '../../core/tracing.js';
import { Color } from '../../core/math/color.js';
import { TRACEID_RENDER_PASS, TRACEID_RENDER_PASS_DETAIL } from '../../core/constants.js';
import { DebugGraphics } from './debug-graphics.js';

class ColorAttachmentOps {
  constructor() {
    /**
     * A color used to clear the color attachment when the clear is enabled.
     */
    this.clearValue = new Color(0, 0, 0, 1);
    /**
     * True if the attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clear = false;
    /**
     * True if the attachment needs to be stored after the render pass. False
     * if it can be discarded.
     * Note: This relates to the surface that is getting rendered to, and can be either
     * single or multi-sampled. Further, if a multi-sampled surface is used, the resolve
     * flag further specifies if this gets resolved to a single-sampled surface. This
     * behavior matches the WebGPU specification.
     *
     * @type {boolean}
     */
    this.store = false;
    /**
     * True if the attachment needs to be resolved.
     *
     * @type {boolean}
     */
    this.resolve = true;
    /**
     * True if the attachment needs to have mipmaps generated.
     *
     * @type {boolean}
     */
    this.mipmaps = false;
  }
}
class DepthStencilAttachmentOps {
  constructor() {
    /**
     * A depth value used to clear the depth attachment when the clear is enabled.
     */
    this.clearDepthValue = 1;
    /**
     * A stencil value used to clear the stencil attachment when the clear is enabled.
     */
    this.clearStencilValue = 0;
    /**
     * True if the depth attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clearDepth = false;
    /**
     * True if the stencil attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clearStencil = false;
    /**
     * True if the depth attachment needs to be stored after the render pass. False
     * if it can be discarded.
     *
     * @type {boolean}
     */
    this.storeDepth = false;
    /**
     * True if the stencil attachment needs to be stored after the render pass. False
     * if it can be discarded.
     *
     * @type {boolean}
     */
    this.storeStencil = false;
  }
}

/**
 * A render pass represents a node in the frame graph, and encapsulates a system which
 * renders to a render target using an execution callback.
 *
 * @ignore
 */
class RenderPass {
  /**
   * Color attachment operations for the first color attachment.
   *
   * @type {ColorAttachmentOps}
   */
  get colorOps() {
    return this.colorArrayOps[0];
  }

  /** @type {DepthStencilAttachmentOps} */

  /**
   * Creates an instance of the RenderPass.
   *
   * @param {import('../graphics/graphics-device.js').GraphicsDevice} graphicsDevice - The
   * graphics device.
   * @param {Function} [execute] - Custom function that is called to render the pass.
   */
  constructor(graphicsDevice, execute) {
    /** @type {string} */
    this.name = void 0;
    /** @type {import('../graphics/render-target.js').RenderTarget} */
    this.renderTarget = void 0;
    /**
     * Number of samples. 0 if no render target, otherwise number of samples from the render target,
     * or the main framebuffer if render target is null.
     *
     * @type {number}
     */
    this.samples = 0;
    /**
     * Array of color attachment operations. The first element corresponds to the color attachment
     * 0, and so on.
     *
     * @type {Array<ColorAttachmentOps>}
     */
    this.colorArrayOps = [];
    this.depthStencilOps = void 0;
    /**
     * If true, this pass might use dynamically rendered cubemaps. Use for a case where rendering to cubemap
     * faces is interleaved with rendering to shadows, to avoid generating cubemap mipmaps. This will likely
     * be retired when render target dependency tracking gets implemented.
     *
     * @type {boolean}
     */
    this.requiresCubemaps = true;
    /**
     * True if the render pass uses the full viewport / scissor for rendering into the render target.
     *
     * @type {boolean}
     */
    this.fullSizeClearRect = true;
    /**
     * Custom function that is called to render the pass.
     *
     * @type {Function|undefined}
     */
    this._execute = void 0;
    /**
     * Custom function that is called before the pass has started.
     *
     * @type {Function|undefined}
     */
    this._before = void 0;
    /**
     * Custom function that is called after the pass has fnished.
     *
     * @type {Function|undefined}
     */
    this._after = void 0;
    DebugHelper.setName(this, this.constructor.name);
    Debug.assert(graphicsDevice);
    this.device = graphicsDevice;
    this._execute = execute;
  }

  /**
   * @param {import('../graphics/render-target.js').RenderTarget} renderTarget - The render
   * target to render into (output). This function should be called only for render passes which
   * use render target, or passes which render directly into the default framebuffer, in which
   * case a null or undefined render target is expected.
   */
  init(renderTarget) {
    var _renderTarget$_colorB;
    // null represents the default framebuffer
    this.renderTarget = renderTarget || null;

    // defaults depend on multisampling
    this.samples = Math.max(this.renderTarget ? this.renderTarget.samples : this.device.samples, 1);

    // allocate ops only when render target is used
    this.depthStencilOps = new DepthStencilAttachmentOps();
    const numColorOps = renderTarget ? (_renderTarget$_colorB = renderTarget._colorBuffers) == null ? void 0 : _renderTarget$_colorB.length : 1;
    for (let i = 0; i < numColorOps; i++) {
      var _this$renderTarget;
      const colorOps = new ColorAttachmentOps();
      this.colorArrayOps[i] = colorOps;

      // if rendering to single-sampled buffer, this buffer needs to be stored
      if (this.samples === 1) {
        colorOps.store = true;
        colorOps.resolve = false;
      }

      // if render target needs mipmaps
      if ((_this$renderTarget = this.renderTarget) != null && (_this$renderTarget = _this$renderTarget._colorBuffers) != null && _this$renderTarget[i].mipmaps) {
        colorOps.mipmaps = true;
      }
    }
  }
  before() {
    var _this$_before;
    (_this$_before = this._before) == null ? void 0 : _this$_before.call(this);
  }
  execute() {
    var _this$_execute;
    (_this$_execute = this._execute) == null ? void 0 : _this$_execute.call(this);
  }
  after() {
    var _this$_after;
    (_this$_after = this._after) == null ? void 0 : _this$_after.call(this);
  }

  /**
   * Mark render pass as clearing the full color buffer.
   *
   * @param {Color} color - The color to clear to.
   */
  setClearColor(color) {
    // in case of MRT, we clear all color buffers.
    // TODO: expose per color buffer clear parameters on the camera, and copy them here.
    const count = this.colorArrayOps.length;
    for (let i = 0; i < count; i++) {
      const colorOps = this.colorArrayOps[i];
      colorOps.clearValue.copy(color);
      colorOps.clear = true;
    }
  }

  /**
   * Mark render pass as clearing the full depth buffer.
   *
   * @param {number} depthValue - The depth value to clear to.
   */
  setClearDepth(depthValue) {
    this.depthStencilOps.clearDepthValue = depthValue;
    this.depthStencilOps.clearDepth = true;
  }

  /**
   * Mark render pass as clearing the full stencil buffer.
   *
   * @param {number} stencilValue - The stencil value to clear to.
   */
  setClearStencil(stencilValue) {
    this.depthStencilOps.clearStencilValue = stencilValue;
    this.depthStencilOps.clearStencil = true;
  }

  /**
   * Render the render pass
   */
  render() {
    const device = this.device;
    const realPass = this.renderTarget !== undefined;
    DebugGraphics.pushGpuMarker(device, `Pass:${this.name}`);
    Debug.call(() => {
      this.log(device, device.renderPassIndex);
    });
    this.before();
    if (realPass) {
      device.startPass(this);
    }
    this.execute();
    if (realPass) {
      device.endPass(this);
    }
    this.after();
    device.renderPassIndex++;
    DebugGraphics.popGpuMarker(device);
  }
  log(device, index) {
    if (Tracing.get(TRACEID_RENDER_PASS) || Tracing.get(TRACEID_RENDER_PASS_DETAIL)) {
      var _this$renderTarget2, _rt$_colorBuffers$len, _rt$_colorBuffers;
      const rt = (_this$renderTarget2 = this.renderTarget) != null ? _this$renderTarget2 : this.renderTarget === null ? device.backBuffer : null;
      const isBackBuffer = !!(rt != null && rt.impl.assignedColorTexture) || (rt == null ? void 0 : rt.impl.suppliedColorFramebuffer) !== undefined;
      const numColor = (_rt$_colorBuffers$len = rt == null || (_rt$_colorBuffers = rt._colorBuffers) == null ? void 0 : _rt$_colorBuffers.length) != null ? _rt$_colorBuffers$len : isBackBuffer ? 1 : 0;
      const hasDepth = rt == null ? void 0 : rt.depth;
      const hasStencil = rt == null ? void 0 : rt.stencil;
      const rtInfo = rt === undefined ? '' : ` RT: ${rt ? rt.name : 'NULL'} ` + `${numColor > 0 ? `[Color${numColor > 1 ? ` x ${numColor}` : ''}]` : ''}` + `${hasDepth ? '[Depth]' : ''}` + `${hasStencil ? '[Stencil]' : ''}` + `${this.samples > 0 ? ' samples: ' + this.samples : ''}`;
      Debug.trace(TRACEID_RENDER_PASS, `${index.toString().padEnd(2, ' ')}: ${this.name.padEnd(20, ' ')}` + rtInfo.padEnd(30));
      for (let i = 0; i < numColor; i++) {
        const colorOps = this.colorArrayOps[i];
        Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    color[${i}]: ` + `${colorOps.clear ? 'clear' : 'load'}->` + `${colorOps.store ? 'store' : 'discard'} ` + `${colorOps.resolve ? 'resolve ' : ''}` + `${colorOps.mipmaps ? 'mipmaps ' : ''}`);
      }
      if (this.depthStencilOps) {
        if (hasDepth) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    depthOps: ` + `${this.depthStencilOps.clearDepth ? 'clear' : 'load'}->` + `${this.depthStencilOps.storeDepth ? 'store' : 'discard'}`);
        }
        if (hasStencil) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    stencOps: ` + `${this.depthStencilOps.clearStencil ? 'clear' : 'load'}->` + `${this.depthStencilOps.storeStencil ? 'store' : 'discard'}`);
        }
      }
    }
  }
}

export { ColorAttachmentOps, DepthStencilAttachmentOps, RenderPass };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
