import { BitPacking } from '../../core/math/bit-packing.js';
import { BLENDEQUATION_ADD, BLENDMODE_SRC_ALPHA, BLENDMODE_ONE_MINUS_SRC_ALPHA, BLENDMODE_ONE, BLENDMODE_ZERO } from './constants.js';

// masks (to only keep relevant bits)
const opMask = 0b111;
const factorMask = 0b1111;

// shifts values to where individual parts are stored
const colorOpShift = 0; // 00 - 02 (3bits)
const colorSrcFactorShift = 3; // 03 - 06 (4bits)
const colorDstFactorShift = 7; // 07 - 10 (4bits)
const alphaOpShift = 11; // 11 - 13 (3bits)
const alphaSrcFactorShift = 14; // 14 - 17 (4bits)
const alphaDstFactorShift = 18; // 18 - 21 (4bits)
const redWriteShift = 22; // 22 (1 bit)
const greenWriteShift = 23; // 23 (1 bit)
const blueWriteShift = 24; // 24 (1 bit)
const alphaWriteShift = 25; // 25 (1 bit)
const blendShift = 26; // 26 (1 bit)

// combined values access
const allWriteMasks = 0b1111;
const allWriteShift = redWriteShift;
/**
 * BlendState is a descriptor that defines how output of fragment shader is written and blended
 * into render target. A blend state can be set on a material using {@link Material#blendState},
 * or in some cases on the graphics device using {@link GraphicsDevice#setBlendState}.
 *
 * For the best performance, do not modify blend state after it has been created, but create
 * multiple blend states and assign them to the material or graphics device as needed.
 *
 * @category Graphics
 */
class BlendState {
  /**
   * Create a new BlendState instance.
   *
   * All factor parameters can take the following values:
   *
   * - {@link BLENDMODE_ZERO}
   * - {@link BLENDMODE_ONE}
   * - {@link BLENDMODE_SRC_COLOR}
   * - {@link BLENDMODE_ONE_MINUS_SRC_COLOR}
   * - {@link BLENDMODE_DST_COLOR}
   * - {@link BLENDMODE_ONE_MINUS_DST_COLOR}
   * - {@link BLENDMODE_SRC_ALPHA}
   * - {@link BLENDMODE_SRC_ALPHA_SATURATE}
   * - {@link BLENDMODE_ONE_MINUS_SRC_ALPHA}
   * - {@link BLENDMODE_DST_ALPHA}
   * - {@link BLENDMODE_ONE_MINUS_DST_ALPHA}
   * - {@link BLENDMODE_CONSTANT}
   * - {@link BLENDMODE_ONE_MINUS_CONSTANT}
   *
   * All op parameters can take the following values:
   *
   * - {@link BLENDEQUATION_ADD}
   * - {@link BLENDEQUATION_SUBTRACT}
   * - {@link BLENDEQUATION_REVERSE_SUBTRACT}
   * - {@link BLENDEQUATION_MIN}
   * - {@link BLENDEQUATION_MAX}
   *
   * Note that MIN and MAX operations on WebGL platform require either EXT_blend_minmax or WebGL2
   * to work (check device.extBlendMinmax).
   *
   * @param {boolean} [blend] - Enables or disables blending. Defaults to false.
   * @param {number} [colorOp] - Configures color blending operation. Defaults to
   * {@link BLENDEQUATION_ADD}.
   * @param {number} [colorSrcFactor] - Configures source color blending factor. Defaults to
   * {@link BLENDMODE_ONE}.
   * @param {number} [colorDstFactor] - Configures destination color blending factor. Defaults to
   * {@link BLENDMODE_ZERO}.
   * @param {number} [alphaOp] - Configures alpha blending operation. Defaults to
   * {@link BLENDEQUATION_ADD}.
   * @param {number} [alphaSrcFactor] - Configures source alpha blending factor. Defaults to
   * {@link BLENDMODE_ONE}.
   * @param {number} [alphaDstFactor] - Configures destination alpha blending factor. Defaults to
   * {@link BLENDMODE_ZERO}.
   * @param {boolean} [redWrite] - True to enable writing of the red channel and false otherwise.
   * Defaults to true.
   * @param {boolean} [greenWrite] - True to enable writing of the green channel and false
   * otherwise. Defaults to true.
   * @param {boolean} [blueWrite] - True to enable writing of the blue channel and false otherwise.
   * Defaults to true.
   * @param {boolean} [alphaWrite] - True to enable writing of the alpha channel and false
   * otherwise. Defaults to true.
   */
  constructor(blend = false, colorOp = BLENDEQUATION_ADD, colorSrcFactor = BLENDMODE_ONE, colorDstFactor = BLENDMODE_ZERO, alphaOp, alphaSrcFactor, alphaDstFactor, redWrite = true, greenWrite = true, blueWrite = true, alphaWrite = true) {
    /**
     * Bitfield representing the blend state for render target 0.
     *
     * @private
     */
    this.target0 = 0;
    this.setColorBlend(colorOp, colorSrcFactor, colorDstFactor);
    this.setAlphaBlend(alphaOp != null ? alphaOp : colorOp, alphaSrcFactor != null ? alphaSrcFactor : colorSrcFactor, alphaDstFactor != null ? alphaDstFactor : colorDstFactor);
    this.setColorWrite(redWrite, greenWrite, blueWrite, alphaWrite);
    this.blend = blend;
  }

  /**
   * Enables or disables blending.
   *
   * @type {boolean}
   */
  set blend(value) {
    this.target0 = BitPacking.set(this.target0, value ? 1 : 0, blendShift);
  }
  get blend() {
    return BitPacking.all(this.target0, blendShift);
  }
  setColorBlend(op, srcFactor, dstFactor) {
    this.target0 = BitPacking.set(this.target0, op, colorOpShift, opMask);
    this.target0 = BitPacking.set(this.target0, srcFactor, colorSrcFactorShift, factorMask);
    this.target0 = BitPacking.set(this.target0, dstFactor, colorDstFactorShift, factorMask);
  }
  setAlphaBlend(op, srcFactor, dstFactor) {
    this.target0 = BitPacking.set(this.target0, op, alphaOpShift, opMask);
    this.target0 = BitPacking.set(this.target0, srcFactor, alphaSrcFactorShift, factorMask);
    this.target0 = BitPacking.set(this.target0, dstFactor, alphaDstFactorShift, factorMask);
  }
  setColorWrite(redWrite, greenWrite, blueWrite, alphaWrite) {
    this.redWrite = redWrite;
    this.greenWrite = greenWrite;
    this.blueWrite = blueWrite;
    this.alphaWrite = alphaWrite;
  }
  get colorOp() {
    return BitPacking.get(this.target0, colorOpShift, opMask);
  }
  get colorSrcFactor() {
    return BitPacking.get(this.target0, colorSrcFactorShift, factorMask);
  }
  get colorDstFactor() {
    return BitPacking.get(this.target0, colorDstFactorShift, factorMask);
  }
  get alphaOp() {
    return BitPacking.get(this.target0, alphaOpShift, opMask);
  }
  get alphaSrcFactor() {
    return BitPacking.get(this.target0, alphaSrcFactorShift, factorMask);
  }
  get alphaDstFactor() {
    return BitPacking.get(this.target0, alphaDstFactorShift, factorMask);
  }
  set redWrite(value) {
    this.target0 = BitPacking.set(this.target0, value ? 1 : 0, redWriteShift);
  }
  get redWrite() {
    return BitPacking.all(this.target0, redWriteShift);
  }
  set greenWrite(value) {
    this.target0 = BitPacking.set(this.target0, value ? 1 : 0, greenWriteShift);
  }
  get greenWrite() {
    return BitPacking.all(this.target0, greenWriteShift);
  }
  set blueWrite(value) {
    this.target0 = BitPacking.set(this.target0, value ? 1 : 0, blueWriteShift);
  }
  get blueWrite() {
    return BitPacking.all(this.target0, blueWriteShift);
  }
  set alphaWrite(value) {
    this.target0 = BitPacking.set(this.target0, value ? 1 : 0, alphaWriteShift);
  }
  get alphaWrite() {
    return BitPacking.all(this.target0, alphaWriteShift);
  }
  get allWrite() {
    // return a number with all 4 bits, for fast compare
    return BitPacking.get(this.target0, allWriteShift, allWriteMasks);
  }

  /**
   * Copies the contents of a source blend state to this blend state.
   *
   * @param {BlendState} rhs - A blend state to copy from.
   * @returns {BlendState} Self for chaining.
   */
  copy(rhs) {
    this.target0 = rhs.target0;
    return this;
  }

  /**
   * Returns an identical copy of the specified blend state.
   *
   * @returns {this} The result of the cloning.
   */
  clone() {
    const clone = new this.constructor();
    return clone.copy(this);
  }
  get key() {
    return this.target0;
  }

  /**
   * Reports whether two BlendStates are equal.
   *
   * @param {BlendState} rhs - The blend state to compare to.
   * @returns {boolean} True if the blend states are equal and false otherwise.
   */
  equals(rhs) {
    return this.target0 === rhs.target0;
  }

  /**
   * A blend state that has blending disabled and writes to all color channels.
   *
   * @type {BlendState}
   * @readonly
   */
}
BlendState.NOBLEND = Object.freeze(new BlendState());
/**
 * A blend state that does not write to color channels.
 *
 * @type {BlendState}
 * @readonly
 */
BlendState.NOWRITE = Object.freeze(new BlendState(undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, false, false, false));
/**
 * A blend state that does simple translucency using alpha channel.
 *
 * @type {BlendState}
 * @readonly
 */
BlendState.ALPHABLEND = Object.freeze(new BlendState(true, BLENDEQUATION_ADD, BLENDMODE_SRC_ALPHA, BLENDMODE_ONE_MINUS_SRC_ALPHA));

export { BlendState };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxlbmQtc3RhdGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy9ibGVuZC1zdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaXRQYWNraW5nIH0gZnJvbSBcIi4uLy4uL2NvcmUvbWF0aC9iaXQtcGFja2luZy5qc1wiO1xuaW1wb3J0IHsgQkxFTkRFUVVBVElPTl9BREQsIEJMRU5ETU9ERV9PTkUsIEJMRU5ETU9ERV9aRVJPLCBCTEVORE1PREVfU1JDX0FMUEhBLCBCTEVORE1PREVfT05FX01JTlVTX1NSQ19BTFBIQSB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qcyc7XG5cbi8vIG1hc2tzICh0byBvbmx5IGtlZXAgcmVsZXZhbnQgYml0cylcbmNvbnN0IG9wTWFzayA9IDBiMTExO1xuY29uc3QgZmFjdG9yTWFzayA9IDBiMTExMTtcblxuLy8gc2hpZnRzIHZhbHVlcyB0byB3aGVyZSBpbmRpdmlkdWFsIHBhcnRzIGFyZSBzdG9yZWRcbmNvbnN0IGNvbG9yT3BTaGlmdCA9IDA7ICAgICAgICAgICAgIC8vIDAwIC0gMDIgKDNiaXRzKVxuY29uc3QgY29sb3JTcmNGYWN0b3JTaGlmdCA9IDM7ICAgICAgLy8gMDMgLSAwNiAoNGJpdHMpXG5jb25zdCBjb2xvckRzdEZhY3RvclNoaWZ0ID0gNzsgICAgICAvLyAwNyAtIDEwICg0Yml0cylcbmNvbnN0IGFscGhhT3BTaGlmdCA9IDExOyAgICAgICAgICAgIC8vIDExIC0gMTMgKDNiaXRzKVxuY29uc3QgYWxwaGFTcmNGYWN0b3JTaGlmdCA9IDE0OyAgICAgLy8gMTQgLSAxNyAoNGJpdHMpXG5jb25zdCBhbHBoYURzdEZhY3RvclNoaWZ0ID0gMTg7ICAgICAvLyAxOCAtIDIxICg0Yml0cylcbmNvbnN0IHJlZFdyaXRlU2hpZnQgPSAyMjsgICAgICAgICAgIC8vIDIyICgxIGJpdClcbmNvbnN0IGdyZWVuV3JpdGVTaGlmdCA9IDIzOyAgICAgICAgIC8vIDIzICgxIGJpdClcbmNvbnN0IGJsdWVXcml0ZVNoaWZ0ID0gMjQ7ICAgICAgICAgIC8vIDI0ICgxIGJpdClcbmNvbnN0IGFscGhhV3JpdGVTaGlmdCA9IDI1OyAgICAgICAgIC8vIDI1ICgxIGJpdClcbmNvbnN0IGJsZW5kU2hpZnQgPSAyNjsgICAgICAgICAgICAgIC8vIDI2ICgxIGJpdClcblxuLy8gY29tYmluZWQgdmFsdWVzIGFjY2Vzc1xuY29uc3QgYWxsV3JpdGVNYXNrcyA9IDBiMTExMTtcbmNvbnN0IGFsbFdyaXRlU2hpZnQgPSByZWRXcml0ZVNoaWZ0O1xuLyoqXG4gKiBCbGVuZFN0YXRlIGlzIGEgZGVzY3JpcHRvciB0aGF0IGRlZmluZXMgaG93IG91dHB1dCBvZiBmcmFnbWVudCBzaGFkZXIgaXMgd3JpdHRlbiBhbmQgYmxlbmRlZFxuICogaW50byByZW5kZXIgdGFyZ2V0LiBBIGJsZW5kIHN0YXRlIGNhbiBiZSBzZXQgb24gYSBtYXRlcmlhbCB1c2luZyB7QGxpbmsgTWF0ZXJpYWwjYmxlbmRTdGF0ZX0sXG4gKiBvciBpbiBzb21lIGNhc2VzIG9uIHRoZSBncmFwaGljcyBkZXZpY2UgdXNpbmcge0BsaW5rIEdyYXBoaWNzRGV2aWNlI3NldEJsZW5kU3RhdGV9LlxuICpcbiAqIEZvciB0aGUgYmVzdCBwZXJmb3JtYW5jZSwgZG8gbm90IG1vZGlmeSBibGVuZCBzdGF0ZSBhZnRlciBpdCBoYXMgYmVlbiBjcmVhdGVkLCBidXQgY3JlYXRlXG4gKiBtdWx0aXBsZSBibGVuZCBzdGF0ZXMgYW5kIGFzc2lnbiB0aGVtIHRvIHRoZSBtYXRlcmlhbCBvciBncmFwaGljcyBkZXZpY2UgYXMgbmVlZGVkLlxuICpcbiAqIEBjYXRlZ29yeSBHcmFwaGljc1xuICovXG5jbGFzcyBCbGVuZFN0YXRlIHtcbiAgICAvKipcbiAgICAgKiBCaXRmaWVsZCByZXByZXNlbnRpbmcgdGhlIGJsZW5kIHN0YXRlIGZvciByZW5kZXIgdGFyZ2V0IDAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRhcmdldDAgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEJsZW5kU3RhdGUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBBbGwgZmFjdG9yIHBhcmFtZXRlcnMgY2FuIHRha2UgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gICAgICpcbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfWkVST31cbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfT05FfVxuICAgICAqIC0ge0BsaW5rIEJMRU5ETU9ERV9TUkNfQ09MT1J9XG4gICAgICogLSB7QGxpbmsgQkxFTkRNT0RFX09ORV9NSU5VU19TUkNfQ09MT1J9XG4gICAgICogLSB7QGxpbmsgQkxFTkRNT0RFX0RTVF9DT0xPUn1cbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfT05FX01JTlVTX0RTVF9DT0xPUn1cbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfU1JDX0FMUEhBfVxuICAgICAqIC0ge0BsaW5rIEJMRU5ETU9ERV9TUkNfQUxQSEFfU0FUVVJBVEV9XG4gICAgICogLSB7QGxpbmsgQkxFTkRNT0RFX09ORV9NSU5VU19TUkNfQUxQSEF9XG4gICAgICogLSB7QGxpbmsgQkxFTkRNT0RFX0RTVF9BTFBIQX1cbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfT05FX01JTlVTX0RTVF9BTFBIQX1cbiAgICAgKiAtIHtAbGluayBCTEVORE1PREVfQ09OU1RBTlR9XG4gICAgICogLSB7QGxpbmsgQkxFTkRNT0RFX09ORV9NSU5VU19DT05TVEFOVH1cbiAgICAgKlxuICAgICAqIEFsbCBvcCBwYXJhbWV0ZXJzIGNhbiB0YWtlIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxuICAgICAqXG4gICAgICogLSB7QGxpbmsgQkxFTkRFUVVBVElPTl9BRER9XG4gICAgICogLSB7QGxpbmsgQkxFTkRFUVVBVElPTl9TVUJUUkFDVH1cbiAgICAgKiAtIHtAbGluayBCTEVOREVRVUFUSU9OX1JFVkVSU0VfU1VCVFJBQ1R9XG4gICAgICogLSB7QGxpbmsgQkxFTkRFUVVBVElPTl9NSU59XG4gICAgICogLSB7QGxpbmsgQkxFTkRFUVVBVElPTl9NQVh9XG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgTUlOIGFuZCBNQVggb3BlcmF0aW9ucyBvbiBXZWJHTCBwbGF0Zm9ybSByZXF1aXJlIGVpdGhlciBFWFRfYmxlbmRfbWlubWF4IG9yIFdlYkdMMlxuICAgICAqIHRvIHdvcmsgKGNoZWNrIGRldmljZS5leHRCbGVuZE1pbm1heCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtibGVuZF0gLSBFbmFibGVzIG9yIGRpc2FibGVzIGJsZW5kaW5nLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NvbG9yT3BdIC0gQ29uZmlndXJlcyBjb2xvciBibGVuZGluZyBvcGVyYXRpb24uIERlZmF1bHRzIHRvXG4gICAgICoge0BsaW5rIEJMRU5ERVFVQVRJT05fQUREfS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NvbG9yU3JjRmFjdG9yXSAtIENvbmZpZ3VyZXMgc291cmNlIGNvbG9yIGJsZW5kaW5nIGZhY3Rvci4gRGVmYXVsdHMgdG9cbiAgICAgKiB7QGxpbmsgQkxFTkRNT0RFX09ORX0uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtjb2xvckRzdEZhY3Rvcl0gLSBDb25maWd1cmVzIGRlc3RpbmF0aW9uIGNvbG9yIGJsZW5kaW5nIGZhY3Rvci4gRGVmYXVsdHMgdG9cbiAgICAgKiB7QGxpbmsgQkxFTkRNT0RFX1pFUk99LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGFPcF0gLSBDb25maWd1cmVzIGFscGhhIGJsZW5kaW5nIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG9cbiAgICAgKiB7QGxpbmsgQkxFTkRFUVVBVElPTl9BRER9LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGFTcmNGYWN0b3JdIC0gQ29uZmlndXJlcyBzb3VyY2UgYWxwaGEgYmxlbmRpbmcgZmFjdG9yLiBEZWZhdWx0cyB0b1xuICAgICAqIHtAbGluayBCTEVORE1PREVfT05FfS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FscGhhRHN0RmFjdG9yXSAtIENvbmZpZ3VyZXMgZGVzdGluYXRpb24gYWxwaGEgYmxlbmRpbmcgZmFjdG9yLiBEZWZhdWx0cyB0b1xuICAgICAqIHtAbGluayBCTEVORE1PREVfWkVST30uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmVkV3JpdGVdIC0gVHJ1ZSB0byBlbmFibGUgd3JpdGluZyBvZiB0aGUgcmVkIGNoYW5uZWwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2dyZWVuV3JpdGVdIC0gVHJ1ZSB0byBlbmFibGUgd3JpdGluZyBvZiB0aGUgZ3JlZW4gY2hhbm5lbCBhbmQgZmFsc2VcbiAgICAgKiBvdGhlcndpc2UuIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbYmx1ZVdyaXRlXSAtIFRydWUgdG8gZW5hYmxlIHdyaXRpbmcgb2YgdGhlIGJsdWUgY2hhbm5lbCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbYWxwaGFXcml0ZV0gLSBUcnVlIHRvIGVuYWJsZSB3cml0aW5nIG9mIHRoZSBhbHBoYSBjaGFubmVsIGFuZCBmYWxzZVxuICAgICAqIG90aGVyd2lzZS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihibGVuZCA9IGZhbHNlLCBjb2xvck9wID0gQkxFTkRFUVVBVElPTl9BREQsIGNvbG9yU3JjRmFjdG9yID0gQkxFTkRNT0RFX09ORSwgY29sb3JEc3RGYWN0b3IgPSBCTEVORE1PREVfWkVSTyxcbiAgICAgICAgYWxwaGFPcCwgYWxwaGFTcmNGYWN0b3IsIGFscGhhRHN0RmFjdG9yLFxuICAgICAgICByZWRXcml0ZSA9IHRydWUsIGdyZWVuV3JpdGUgPSB0cnVlLCBibHVlV3JpdGUgPSB0cnVlLCBhbHBoYVdyaXRlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNldENvbG9yQmxlbmQoY29sb3JPcCwgY29sb3JTcmNGYWN0b3IsIGNvbG9yRHN0RmFjdG9yKTtcbiAgICAgICAgdGhpcy5zZXRBbHBoYUJsZW5kKGFscGhhT3AgPz8gY29sb3JPcCwgYWxwaGFTcmNGYWN0b3IgPz8gY29sb3JTcmNGYWN0b3IsIGFscGhhRHN0RmFjdG9yID8/IGNvbG9yRHN0RmFjdG9yKTtcbiAgICAgICAgdGhpcy5zZXRDb2xvcldyaXRlKHJlZFdyaXRlLCBncmVlbldyaXRlLCBibHVlV3JpdGUsIGFscGhhV3JpdGUpO1xuICAgICAgICB0aGlzLmJsZW5kID0gYmxlbmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBibGVuZGluZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNldCBibGVuZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRhcmdldDAgPSBCaXRQYWNraW5nLnNldCh0aGlzLnRhcmdldDAsIHZhbHVlID8gMSA6IDAsIGJsZW5kU2hpZnQpO1xuICAgIH1cblxuICAgIGdldCBibGVuZCgpIHtcbiAgICAgICAgcmV0dXJuIEJpdFBhY2tpbmcuYWxsKHRoaXMudGFyZ2V0MCwgYmxlbmRTaGlmdCk7XG4gICAgfVxuXG4gICAgc2V0Q29sb3JCbGVuZChvcCwgc3JjRmFjdG9yLCBkc3RGYWN0b3IpIHtcbiAgICAgICAgdGhpcy50YXJnZXQwID0gQml0UGFja2luZy5zZXQodGhpcy50YXJnZXQwLCBvcCwgY29sb3JPcFNoaWZ0LCBvcE1hc2spO1xuICAgICAgICB0aGlzLnRhcmdldDAgPSBCaXRQYWNraW5nLnNldCh0aGlzLnRhcmdldDAsIHNyY0ZhY3RvciwgY29sb3JTcmNGYWN0b3JTaGlmdCwgZmFjdG9yTWFzayk7XG4gICAgICAgIHRoaXMudGFyZ2V0MCA9IEJpdFBhY2tpbmcuc2V0KHRoaXMudGFyZ2V0MCwgZHN0RmFjdG9yLCBjb2xvckRzdEZhY3RvclNoaWZ0LCBmYWN0b3JNYXNrKTtcbiAgICB9XG5cbiAgICBzZXRBbHBoYUJsZW5kKG9wLCBzcmNGYWN0b3IsIGRzdEZhY3Rvcikge1xuICAgICAgICB0aGlzLnRhcmdldDAgPSBCaXRQYWNraW5nLnNldCh0aGlzLnRhcmdldDAsIG9wLCBhbHBoYU9wU2hpZnQsIG9wTWFzayk7XG4gICAgICAgIHRoaXMudGFyZ2V0MCA9IEJpdFBhY2tpbmcuc2V0KHRoaXMudGFyZ2V0MCwgc3JjRmFjdG9yLCBhbHBoYVNyY0ZhY3RvclNoaWZ0LCBmYWN0b3JNYXNrKTtcbiAgICAgICAgdGhpcy50YXJnZXQwID0gQml0UGFja2luZy5zZXQodGhpcy50YXJnZXQwLCBkc3RGYWN0b3IsIGFscGhhRHN0RmFjdG9yU2hpZnQsIGZhY3Rvck1hc2spO1xuICAgIH1cblxuICAgIHNldENvbG9yV3JpdGUocmVkV3JpdGUsIGdyZWVuV3JpdGUsIGJsdWVXcml0ZSwgYWxwaGFXcml0ZSkge1xuICAgICAgICB0aGlzLnJlZFdyaXRlID0gcmVkV3JpdGU7XG4gICAgICAgIHRoaXMuZ3JlZW5Xcml0ZSA9IGdyZWVuV3JpdGU7XG4gICAgICAgIHRoaXMuYmx1ZVdyaXRlID0gYmx1ZVdyaXRlO1xuICAgICAgICB0aGlzLmFscGhhV3JpdGUgPSBhbHBoYVdyaXRlO1xuICAgIH1cblxuICAgIGdldCBjb2xvck9wKCkge1xuICAgICAgICByZXR1cm4gQml0UGFja2luZy5nZXQodGhpcy50YXJnZXQwLCBjb2xvck9wU2hpZnQsIG9wTWFzayk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbG9yU3JjRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gQml0UGFja2luZy5nZXQodGhpcy50YXJnZXQwLCBjb2xvclNyY0ZhY3RvclNoaWZ0LCBmYWN0b3JNYXNrKTtcbiAgICB9XG5cbiAgICBnZXQgY29sb3JEc3RGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBCaXRQYWNraW5nLmdldCh0aGlzLnRhcmdldDAsIGNvbG9yRHN0RmFjdG9yU2hpZnQsIGZhY3Rvck1hc2spO1xuICAgIH1cblxuICAgIGdldCBhbHBoYU9wKCkge1xuICAgICAgICByZXR1cm4gQml0UGFja2luZy5nZXQodGhpcy50YXJnZXQwLCBhbHBoYU9wU2hpZnQsIG9wTWFzayk7XG4gICAgfVxuXG4gICAgZ2V0IGFscGhhU3JjRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gQml0UGFja2luZy5nZXQodGhpcy50YXJnZXQwLCBhbHBoYVNyY0ZhY3RvclNoaWZ0LCBmYWN0b3JNYXNrKTtcbiAgICB9XG5cbiAgICBnZXQgYWxwaGFEc3RGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBCaXRQYWNraW5nLmdldCh0aGlzLnRhcmdldDAsIGFscGhhRHN0RmFjdG9yU2hpZnQsIGZhY3Rvck1hc2spO1xuICAgIH1cblxuICAgIHNldCByZWRXcml0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRhcmdldDAgPSBCaXRQYWNraW5nLnNldCh0aGlzLnRhcmdldDAsIHZhbHVlID8gMSA6IDAsIHJlZFdyaXRlU2hpZnQpO1xuICAgIH1cblxuICAgIGdldCByZWRXcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIEJpdFBhY2tpbmcuYWxsKHRoaXMudGFyZ2V0MCwgcmVkV3JpdGVTaGlmdCk7XG4gICAgfVxuXG4gICAgc2V0IGdyZWVuV3JpdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy50YXJnZXQwID0gQml0UGFja2luZy5zZXQodGhpcy50YXJnZXQwLCB2YWx1ZSA/IDEgOiAwLCBncmVlbldyaXRlU2hpZnQpO1xuICAgIH1cblxuICAgIGdldCBncmVlbldyaXRlKCkge1xuICAgICAgICByZXR1cm4gQml0UGFja2luZy5hbGwodGhpcy50YXJnZXQwLCBncmVlbldyaXRlU2hpZnQpO1xuICAgIH1cblxuICAgIHNldCBibHVlV3JpdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy50YXJnZXQwID0gQml0UGFja2luZy5zZXQodGhpcy50YXJnZXQwLCB2YWx1ZSA/IDEgOiAwLCBibHVlV3JpdGVTaGlmdCk7XG4gICAgfVxuXG4gICAgZ2V0IGJsdWVXcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIEJpdFBhY2tpbmcuYWxsKHRoaXMudGFyZ2V0MCwgYmx1ZVdyaXRlU2hpZnQpO1xuICAgIH1cblxuICAgIHNldCBhbHBoYVdyaXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0MCA9IEJpdFBhY2tpbmcuc2V0KHRoaXMudGFyZ2V0MCwgdmFsdWUgPyAxIDogMCwgYWxwaGFXcml0ZVNoaWZ0KTtcbiAgICB9XG5cbiAgICBnZXQgYWxwaGFXcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIEJpdFBhY2tpbmcuYWxsKHRoaXMudGFyZ2V0MCwgYWxwaGFXcml0ZVNoaWZ0KTtcbiAgICB9XG5cbiAgICBnZXQgYWxsV3JpdGUoKSB7XG4gICAgICAgIC8vIHJldHVybiBhIG51bWJlciB3aXRoIGFsbCA0IGJpdHMsIGZvciBmYXN0IGNvbXBhcmVcbiAgICAgICAgcmV0dXJuIEJpdFBhY2tpbmcuZ2V0KHRoaXMudGFyZ2V0MCwgYWxsV3JpdGVTaGlmdCwgYWxsV3JpdGVNYXNrcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBjb250ZW50cyBvZiBhIHNvdXJjZSBibGVuZCBzdGF0ZSB0byB0aGlzIGJsZW5kIHN0YXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCbGVuZFN0YXRlfSByaHMgLSBBIGJsZW5kIHN0YXRlIHRvIGNvcHkgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7QmxlbmRTdGF0ZX0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgY29weShyaHMpIHtcbiAgICAgICAgdGhpcy50YXJnZXQwID0gcmhzLnRhcmdldDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaWRlbnRpY2FsIGNvcHkgb2YgdGhlIHNwZWNpZmllZCBibGVuZCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt0aGlzfSBUaGUgcmVzdWx0IG9mIHRoZSBjbG9uaW5nLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCk7XG4gICAgICAgIHJldHVybiBjbG9uZS5jb3B5KHRoaXMpO1xuICAgIH1cblxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwb3J0cyB3aGV0aGVyIHR3byBCbGVuZFN0YXRlcyBhcmUgZXF1YWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0JsZW5kU3RhdGV9IHJocyAtIFRoZSBibGVuZCBzdGF0ZSB0byBjb21wYXJlIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBibGVuZCBzdGF0ZXMgYXJlIGVxdWFsIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZXF1YWxzKHJocykge1xuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQwID09PSByaHMudGFyZ2V0MDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGJsZW5kIHN0YXRlIHRoYXQgaGFzIGJsZW5kaW5nIGRpc2FibGVkIGFuZCB3cml0ZXMgdG8gYWxsIGNvbG9yIGNoYW5uZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge0JsZW5kU3RhdGV9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgc3RhdGljIE5PQkxFTkQgPSBPYmplY3QuZnJlZXplKG5ldyBCbGVuZFN0YXRlKCkpO1xuXG4gICAgLyoqXG4gICAgICogQSBibGVuZCBzdGF0ZSB0aGF0IGRvZXMgbm90IHdyaXRlIHRvIGNvbG9yIGNoYW5uZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge0JsZW5kU3RhdGV9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgc3RhdGljIE5PV1JJVEUgPSBPYmplY3QuZnJlZXplKG5ldyBCbGVuZFN0YXRlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UpKTtcblxuICAgIC8qKlxuICAgICAqIEEgYmxlbmQgc3RhdGUgdGhhdCBkb2VzIHNpbXBsZSB0cmFuc2x1Y2VuY3kgdXNpbmcgYWxwaGEgY2hhbm5lbC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCbGVuZFN0YXRlfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHN0YXRpYyBBTFBIQUJMRU5EID0gT2JqZWN0LmZyZWV6ZShuZXcgQmxlbmRTdGF0ZSh0cnVlLCBCTEVOREVRVUFUSU9OX0FERCwgQkxFTkRNT0RFX1NSQ19BTFBIQSwgQkxFTkRNT0RFX09ORV9NSU5VU19TUkNfQUxQSEEpKTtcbn1cblxuZXhwb3J0IHsgQmxlbmRTdGF0ZSB9O1xuIl0sIm5hbWVzIjpbIm9wTWFzayIsImZhY3Rvck1hc2siLCJjb2xvck9wU2hpZnQiLCJjb2xvclNyY0ZhY3RvclNoaWZ0IiwiY29sb3JEc3RGYWN0b3JTaGlmdCIsImFscGhhT3BTaGlmdCIsImFscGhhU3JjRmFjdG9yU2hpZnQiLCJhbHBoYURzdEZhY3RvclNoaWZ0IiwicmVkV3JpdGVTaGlmdCIsImdyZWVuV3JpdGVTaGlmdCIsImJsdWVXcml0ZVNoaWZ0IiwiYWxwaGFXcml0ZVNoaWZ0IiwiYmxlbmRTaGlmdCIsImFsbFdyaXRlTWFza3MiLCJhbGxXcml0ZVNoaWZ0IiwiQmxlbmRTdGF0ZSIsImNvbnN0cnVjdG9yIiwiYmxlbmQiLCJjb2xvck9wIiwiQkxFTkRFUVVBVElPTl9BREQiLCJjb2xvclNyY0ZhY3RvciIsIkJMRU5ETU9ERV9PTkUiLCJjb2xvckRzdEZhY3RvciIsIkJMRU5ETU9ERV9aRVJPIiwiYWxwaGFPcCIsImFscGhhU3JjRmFjdG9yIiwiYWxwaGFEc3RGYWN0b3IiLCJyZWRXcml0ZSIsImdyZWVuV3JpdGUiLCJibHVlV3JpdGUiLCJhbHBoYVdyaXRlIiwidGFyZ2V0MCIsInNldENvbG9yQmxlbmQiLCJzZXRBbHBoYUJsZW5kIiwic2V0Q29sb3JXcml0ZSIsInZhbHVlIiwiQml0UGFja2luZyIsInNldCIsImFsbCIsIm9wIiwic3JjRmFjdG9yIiwiZHN0RmFjdG9yIiwiZ2V0IiwiYWxsV3JpdGUiLCJjb3B5IiwicmhzIiwiY2xvbmUiLCJrZXkiLCJlcXVhbHMiLCJOT0JMRU5EIiwiT2JqZWN0IiwiZnJlZXplIiwiTk9XUklURSIsInVuZGVmaW5lZCIsIkFMUEhBQkxFTkQiLCJCTEVORE1PREVfU1JDX0FMUEhBIiwiQkxFTkRNT0RFX09ORV9NSU5VU19TUkNfQUxQSEEiXSwibWFwcGluZ3MiOiI7OztBQUdBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHLEtBQUssQ0FBQTtBQUNwQixNQUFNQyxVQUFVLEdBQUcsTUFBTSxDQUFBOztBQUV6QjtBQUNBLE1BQU1DLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQU1DLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUM5QixNQUFNQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLE1BQU1DLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUMvQixNQUFNQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFDL0IsTUFBTUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUN6QixNQUFNQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBQzNCLE1BQU1DLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUMzQixNQUFNQyxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUV0QjtBQUNBLE1BQU1DLGFBQWEsR0FBRyxNQUFNLENBQUE7QUFDNUIsTUFBTUMsYUFBYSxHQUFHTixhQUFhLENBQUE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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
