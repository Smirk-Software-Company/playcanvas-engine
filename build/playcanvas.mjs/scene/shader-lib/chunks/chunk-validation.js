import { CHUNKAPI_1_57, CHUNKAPI_1_60, CHUNKAPI_1_55, CHUNKAPI_1_62, CHUNKAPI_1_65, CHUNKAPI_1_51, CHUNKAPI_1_56 } from '../../../platform/graphics/constants.js';
import { Debug } from '../../../core/debug.js';
import { shaderChunks } from './chunks.js';

const chunkVersions = {
  // frontend
  aoPS: CHUNKAPI_1_57,
  clearCoatPS: CHUNKAPI_1_57,
  clearCoatGlossPS: CHUNKAPI_1_60,
  clearCoatNormalPS: CHUNKAPI_1_57,
  diffusePS: CHUNKAPI_1_57,
  diffuseDetailMapPS: CHUNKAPI_1_57,
  emissivePS: CHUNKAPI_1_57,
  glossPS: CHUNKAPI_1_60,
  lightmapDirPS: CHUNKAPI_1_55,
  lightmapSinglePS: CHUNKAPI_1_55,
  metalnessPS: CHUNKAPI_1_57,
  normalMapPS: CHUNKAPI_1_57,
  normalDetailMapPS: CHUNKAPI_1_57,
  opacityPS: CHUNKAPI_1_57,
  parallaxPS: CHUNKAPI_1_57,
  sheenPS: CHUNKAPI_1_57,
  sheenGlossPS: CHUNKAPI_1_60,
  specularPS: CHUNKAPI_1_57,
  specularityFactorPS: CHUNKAPI_1_57,
  thicknessPS: CHUNKAPI_1_57,
  transmissionPS: CHUNKAPI_1_57,
  // backend
  normalVertexPS: CHUNKAPI_1_55,
  startPS: CHUNKAPI_1_55,
  ambientConstantPS: CHUNKAPI_1_62,
  ambientEnvPS: CHUNKAPI_1_62,
  ambientSHPS: CHUNKAPI_1_62,
  aoDiffuseOccPS: CHUNKAPI_1_62,
  aoSpecOccPS: CHUNKAPI_1_62,
  aoSpecOccConstPS: CHUNKAPI_1_62,
  aoSpecOccConstSimplePS: CHUNKAPI_1_62,
  aoSpecOccSimplePS: CHUNKAPI_1_62,
  clusteredLightPS: CHUNKAPI_1_62,
  clusteredLightShadowPS: CHUNKAPI_1_62,
  combinePS: CHUNKAPI_1_62,
  falloffInvSquaredPS: CHUNKAPI_1_62,
  falloffLinearPS: CHUNKAPI_1_62,
  lightDiffuseLambertPS: CHUNKAPI_1_62,
  lightSheenPS: CHUNKAPI_1_62,
  lightSpecularAnisoGGXPS: CHUNKAPI_1_62,
  lightSpecularBlinnPS: CHUNKAPI_1_62,
  lightSpecularPhongPS: CHUNKAPI_1_62,
  ltcPS: CHUNKAPI_1_62,
  reflDirPS: CHUNKAPI_1_62,
  reflDirAnisoPS: CHUNKAPI_1_62,
  reflectionCCPS: CHUNKAPI_1_62,
  reflectionCubePS: CHUNKAPI_1_62,
  reflectionEnvPS: CHUNKAPI_1_62,
  reflectionEnvHQPS: CHUNKAPI_1_62,
  reflectionSheenPS: CHUNKAPI_1_62,
  reflectionSpherePS: CHUNKAPI_1_62,
  reflectionSphereLowPS: CHUNKAPI_1_62,
  shadowCommonPS: CHUNKAPI_1_62,
  shadowCoordPS: CHUNKAPI_1_62,
  shadowCoordPerspZBufferPS: CHUNKAPI_1_62,
  shadowEVSMPS: CHUNKAPI_1_62,
  shadowEVSMnPS: CHUNKAPI_1_62,
  shadowStandardPS: CHUNKAPI_1_62,
  shadowStandardGL2PS: CHUNKAPI_1_62,
  shadowVSM8PS: CHUNKAPI_1_62,
  spotPS: CHUNKAPI_1_62,
  TBNPS: CHUNKAPI_1_62,
  TBNObjectSpacePS: CHUNKAPI_1_62,
  TBNderivativePS: CHUNKAPI_1_62,
  TBNfastPS: CHUNKAPI_1_62,
  endPS: CHUNKAPI_1_65,
  metalnessModulatePS: CHUNKAPI_1_65,
  outputAlphaPS: CHUNKAPI_1_65,
  outputAlphaPremulPS: CHUNKAPI_1_65,
  fresnelSchlickPS: CHUNKAPI_1_65,
  iridescenceDiffractionPS: CHUNKAPI_1_65,
  lightmapAddPS: CHUNKAPI_1_65,
  lightmapDirAddPS: CHUNKAPI_1_65,
  refractionCubePS: CHUNKAPI_1_65,
  refractionDynamicPS: CHUNKAPI_1_65
};

// removed
const removedChunks = {
  ambientPrefilteredCubePS: CHUNKAPI_1_51,
  ambientPrefilteredCubeLodPS: CHUNKAPI_1_51,
  dpAtlasQuadPS: CHUNKAPI_1_51,
  genParaboloidPS: CHUNKAPI_1_51,
  prefilterCubemapPS: CHUNKAPI_1_51,
  reflectionDpAtlasPS: CHUNKAPI_1_51,
  reflectionPrefilteredCubePS: CHUNKAPI_1_51,
  reflectionPrefilteredCubeLodPS: CHUNKAPI_1_51,
  refractionPS: CHUNKAPI_1_56,
  combineClearCoatPS: CHUNKAPI_1_56,
  combineDiffusePS: CHUNKAPI_1_56,
  combineDiffuseSpecularPS: CHUNKAPI_1_56,
  combineDiffuseSpecularNoReflPS: CHUNKAPI_1_56,
  combineDiffuseSpecularNoReflSeparateAmbientPS: CHUNKAPI_1_56,
  combineDiffuseSpecularOldPS: CHUNKAPI_1_56,
  combineDiffuseSpecularNoConservePS: CHUNKAPI_1_55,
  lightmapSingleVertPS: CHUNKAPI_1_55,
  normalMapFastPS: CHUNKAPI_1_55,
  specularAaNonePS: CHUNKAPI_1_55,
  specularAaToksvigPS: CHUNKAPI_1_55,
  specularAaToksvigFastPS: CHUNKAPI_1_55
};

// compare two "major.minor" semantic version strings and return true if a is a smaller version than b.
const semverLess = (a, b) => {
  const aver = a.split('.').map(t => parseInt(t, 10));
  const bver = b.split('.').map(t => parseInt(t, 10));
  return aver[0] < bver[0] || aver[0] === bver[0] && aver[1] < bver[1];
};

// validate user chunks
const validateUserChunks = userChunks => {
  const userAPIVersion = userChunks.APIVersion;
  for (const chunkName in userChunks) {
    if (chunkName === 'APIVersion') {
      continue;
    }
    if (!shaderChunks.hasOwnProperty(chunkName)) {
      const removedVersion = removedChunks[chunkName];
      if (removedVersion) {
        Debug.warnOnce(`Shader chunk '${chunkName}' was removed in API ${removedVersion} and is no longer supported.`);
      } else {
        Debug.warnOnce(`Shader chunk '${chunkName}' is not supported.`);
      }
    } else {
      const engineAPIVersion = chunkVersions[chunkName];
      const chunkIsOutdated = engineAPIVersion && (!userAPIVersion || semverLess(userAPIVersion, engineAPIVersion));
      if (chunkIsOutdated) {
        Debug.warnOnce(`Shader chunk '${chunkName}' is API version ${engineAPIVersion}, but the supplied chunk is version ${userAPIVersion || '-'}. Please update to the latest API: https://developer.playcanvas.com/en/user-manual/graphics/shader-chunk-migrations/`);
      }
    }
  }
};

export { validateUserChunks };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmstdmFsaWRhdGlvbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NjZW5lL3NoYWRlci1saWIvY2h1bmtzL2NodW5rLXZhbGlkYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ0hVTktBUElfMV81MSwgQ0hVTktBUElfMV81NSwgQ0hVTktBUElfMV81NiwgQ0hVTktBUElfMV81NywgQ0hVTktBUElfMV82MCwgQ0hVTktBUElfMV82MiwgQ0hVTktBUElfMV82NSB9IGZyb20gJy4uLy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZGVidWcuanMnO1xuaW1wb3J0IHsgc2hhZGVyQ2h1bmtzIH0gZnJvbSAnLi9jaHVua3MuanMnO1xuXG5jb25zdCBjaHVua1ZlcnNpb25zID0ge1xuICAgIC8vIGZyb250ZW5kXG4gICAgYW9QUzogQ0hVTktBUElfMV81NyxcbiAgICBjbGVhckNvYXRQUzogQ0hVTktBUElfMV81NyxcbiAgICBjbGVhckNvYXRHbG9zc1BTOiBDSFVOS0FQSV8xXzYwLFxuICAgIGNsZWFyQ29hdE5vcm1hbFBTOiBDSFVOS0FQSV8xXzU3LFxuICAgIGRpZmZ1c2VQUzogQ0hVTktBUElfMV81NyxcbiAgICBkaWZmdXNlRGV0YWlsTWFwUFM6IENIVU5LQVBJXzFfNTcsXG4gICAgZW1pc3NpdmVQUzogQ0hVTktBUElfMV81NyxcbiAgICBnbG9zc1BTOiBDSFVOS0FQSV8xXzYwLFxuICAgIGxpZ2h0bWFwRGlyUFM6IENIVU5LQVBJXzFfNTUsXG4gICAgbGlnaHRtYXBTaW5nbGVQUzogQ0hVTktBUElfMV81NSxcbiAgICBtZXRhbG5lc3NQUzogQ0hVTktBUElfMV81NyxcbiAgICBub3JtYWxNYXBQUzogQ0hVTktBUElfMV81NyxcbiAgICBub3JtYWxEZXRhaWxNYXBQUzogQ0hVTktBUElfMV81NyxcbiAgICBvcGFjaXR5UFM6IENIVU5LQVBJXzFfNTcsXG4gICAgcGFyYWxsYXhQUzogQ0hVTktBUElfMV81NyxcbiAgICBzaGVlblBTOiBDSFVOS0FQSV8xXzU3LFxuICAgIHNoZWVuR2xvc3NQUzogQ0hVTktBUElfMV82MCxcbiAgICBzcGVjdWxhclBTOiBDSFVOS0FQSV8xXzU3LFxuICAgIHNwZWN1bGFyaXR5RmFjdG9yUFM6IENIVU5LQVBJXzFfNTcsXG4gICAgdGhpY2tuZXNzUFM6IENIVU5LQVBJXzFfNTcsXG4gICAgdHJhbnNtaXNzaW9uUFM6IENIVU5LQVBJXzFfNTcsXG5cbiAgICAvLyBiYWNrZW5kXG4gICAgbm9ybWFsVmVydGV4UFM6IENIVU5LQVBJXzFfNTUsXG4gICAgc3RhcnRQUzogQ0hVTktBUElfMV81NSxcblxuICAgIGFtYmllbnRDb25zdGFudFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGFtYmllbnRFbnZQUzogQ0hVTktBUElfMV82MixcbiAgICBhbWJpZW50U0hQUzogQ0hVTktBUElfMV82MixcbiAgICBhb0RpZmZ1c2VPY2NQUzogQ0hVTktBUElfMV82MixcbiAgICBhb1NwZWNPY2NQUzogQ0hVTktBUElfMV82MixcbiAgICBhb1NwZWNPY2NDb25zdFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGFvU3BlY09jY0NvbnN0U2ltcGxlUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgYW9TcGVjT2NjU2ltcGxlUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgY2x1c3RlcmVkTGlnaHRQUzogQ0hVTktBUElfMV82MixcbiAgICBjbHVzdGVyZWRMaWdodFNoYWRvd1BTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGNvbWJpbmVQUzogQ0hVTktBUElfMV82MixcbiAgICBmYWxsb2ZmSW52U3F1YXJlZFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGZhbGxvZmZMaW5lYXJQUzogQ0hVTktBUElfMV82MixcbiAgICBsaWdodERpZmZ1c2VMYW1iZXJ0UFM6IENIVU5LQVBJXzFfNjIsXG4gICAgbGlnaHRTaGVlblBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGxpZ2h0U3BlY3VsYXJBbmlzb0dHWFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGxpZ2h0U3BlY3VsYXJCbGlublBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGxpZ2h0U3BlY3VsYXJQaG9uZ1BTOiBDSFVOS0FQSV8xXzYyLFxuICAgIGx0Y1BTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHJlZmxEaXJQUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsRGlyQW5pc29QUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsZWN0aW9uQ0NQUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsZWN0aW9uQ3ViZVBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHJlZmxlY3Rpb25FbnZQUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsZWN0aW9uRW52SFFQUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsZWN0aW9uU2hlZW5QUzogQ0hVTktBUElfMV82MixcbiAgICByZWZsZWN0aW9uU3BoZXJlUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgcmVmbGVjdGlvblNwaGVyZUxvd1BTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHNoYWRvd0NvbW1vblBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHNoYWRvd0Nvb3JkUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgc2hhZG93Q29vcmRQZXJzcFpCdWZmZXJQUzogQ0hVTktBUElfMV82MixcbiAgICBzaGFkb3dFVlNNUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgc2hhZG93RVZTTW5QUzogQ0hVTktBUElfMV82MixcbiAgICBzaGFkb3dTdGFuZGFyZFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHNoYWRvd1N0YW5kYXJkR0wyUFM6IENIVU5LQVBJXzFfNjIsXG4gICAgc2hhZG93VlNNOFBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIHNwb3RQUzogQ0hVTktBUElfMV82MixcbiAgICBUQk5QUzogQ0hVTktBUElfMV82MixcbiAgICBUQk5PYmplY3RTcGFjZVBTOiBDSFVOS0FQSV8xXzYyLFxuICAgIFRCTmRlcml2YXRpdmVQUzogQ0hVTktBUElfMV82MixcbiAgICBUQk5mYXN0UFM6IENIVU5LQVBJXzFfNjIsXG5cbiAgICBlbmRQUzogQ0hVTktBUElfMV82NSxcbiAgICBtZXRhbG5lc3NNb2R1bGF0ZVBTOiBDSFVOS0FQSV8xXzY1LFxuICAgIG91dHB1dEFscGhhUFM6IENIVU5LQVBJXzFfNjUsXG4gICAgb3V0cHV0QWxwaGFQcmVtdWxQUzogQ0hVTktBUElfMV82NSxcbiAgICBmcmVzbmVsU2NobGlja1BTOiBDSFVOS0FQSV8xXzY1LFxuICAgIGlyaWRlc2NlbmNlRGlmZnJhY3Rpb25QUzogQ0hVTktBUElfMV82NSxcbiAgICBsaWdodG1hcEFkZFBTOiBDSFVOS0FQSV8xXzY1LFxuICAgIGxpZ2h0bWFwRGlyQWRkUFM6IENIVU5LQVBJXzFfNjUsXG4gICAgcmVmcmFjdGlvbkN1YmVQUzogQ0hVTktBUElfMV82NSxcbiAgICByZWZyYWN0aW9uRHluYW1pY1BTOiBDSFVOS0FQSV8xXzY1XG59O1xuXG4vLyByZW1vdmVkXG5jb25zdCByZW1vdmVkQ2h1bmtzID0ge1xuICAgIGFtYmllbnRQcmVmaWx0ZXJlZEN1YmVQUzogQ0hVTktBUElfMV81MSxcbiAgICBhbWJpZW50UHJlZmlsdGVyZWRDdWJlTG9kUFM6IENIVU5LQVBJXzFfNTEsXG4gICAgZHBBdGxhc1F1YWRQUzogQ0hVTktBUElfMV81MSxcbiAgICBnZW5QYXJhYm9sb2lkUFM6IENIVU5LQVBJXzFfNTEsXG4gICAgcHJlZmlsdGVyQ3ViZW1hcFBTOiBDSFVOS0FQSV8xXzUxLFxuICAgIHJlZmxlY3Rpb25EcEF0bGFzUFM6IENIVU5LQVBJXzFfNTEsXG4gICAgcmVmbGVjdGlvblByZWZpbHRlcmVkQ3ViZVBTOiBDSFVOS0FQSV8xXzUxLFxuICAgIHJlZmxlY3Rpb25QcmVmaWx0ZXJlZEN1YmVMb2RQUzogQ0hVTktBUElfMV81MSxcbiAgICByZWZyYWN0aW9uUFM6IENIVU5LQVBJXzFfNTYsXG4gICAgY29tYmluZUNsZWFyQ29hdFBTOiBDSFVOS0FQSV8xXzU2LFxuICAgIGNvbWJpbmVEaWZmdXNlUFM6IENIVU5LQVBJXzFfNTYsXG4gICAgY29tYmluZURpZmZ1c2VTcGVjdWxhclBTOiBDSFVOS0FQSV8xXzU2LFxuICAgIGNvbWJpbmVEaWZmdXNlU3BlY3VsYXJOb1JlZmxQUzogQ0hVTktBUElfMV81NixcbiAgICBjb21iaW5lRGlmZnVzZVNwZWN1bGFyTm9SZWZsU2VwYXJhdGVBbWJpZW50UFM6IENIVU5LQVBJXzFfNTYsXG4gICAgY29tYmluZURpZmZ1c2VTcGVjdWxhck9sZFBTOiBDSFVOS0FQSV8xXzU2LFxuICAgIGNvbWJpbmVEaWZmdXNlU3BlY3VsYXJOb0NvbnNlcnZlUFM6IENIVU5LQVBJXzFfNTUsXG4gICAgbGlnaHRtYXBTaW5nbGVWZXJ0UFM6IENIVU5LQVBJXzFfNTUsXG4gICAgbm9ybWFsTWFwRmFzdFBTOiBDSFVOS0FQSV8xXzU1LFxuICAgIHNwZWN1bGFyQWFOb25lUFM6IENIVU5LQVBJXzFfNTUsXG4gICAgc3BlY3VsYXJBYVRva3N2aWdQUzogQ0hVTktBUElfMV81NSxcbiAgICBzcGVjdWxhckFhVG9rc3ZpZ0Zhc3RQUzogQ0hVTktBUElfMV81NVxufTtcblxuLy8gY29tcGFyZSB0d28gXCJtYWpvci5taW5vclwiIHNlbWFudGljIHZlcnNpb24gc3RyaW5ncyBhbmQgcmV0dXJuIHRydWUgaWYgYSBpcyBhIHNtYWxsZXIgdmVyc2lvbiB0aGFuIGIuXG5jb25zdCBzZW12ZXJMZXNzID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCBhdmVyID0gYS5zcGxpdCgnLicpLm1hcCh0ID0+IHBhcnNlSW50KHQsIDEwKSk7XG4gICAgY29uc3QgYnZlciA9IGIuc3BsaXQoJy4nKS5tYXAodCA9PiBwYXJzZUludCh0LCAxMCkpO1xuICAgIHJldHVybiAoYXZlclswXSA8IGJ2ZXJbMF0pIHx8ICgoYXZlclswXSA9PT0gYnZlclswXSkgJiYgKGF2ZXJbMV0gPCBidmVyWzFdKSk7XG59O1xuXG4vLyB2YWxpZGF0ZSB1c2VyIGNodW5rc1xuY29uc3QgdmFsaWRhdGVVc2VyQ2h1bmtzID0gKHVzZXJDaHVua3MpID0+IHtcbiAgICBjb25zdCB1c2VyQVBJVmVyc2lvbiA9IHVzZXJDaHVua3MuQVBJVmVyc2lvbjtcbiAgICBmb3IgKGNvbnN0IGNodW5rTmFtZSBpbiB1c2VyQ2h1bmtzKSB7XG4gICAgICAgIGlmIChjaHVua05hbWUgPT09ICdBUElWZXJzaW9uJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNoYWRlckNodW5rcy5oYXNPd25Qcm9wZXJ0eShjaHVua05hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkVmVyc2lvbiA9IHJlbW92ZWRDaHVua3NbY2h1bmtOYW1lXTtcbiAgICAgICAgICAgIGlmIChyZW1vdmVkVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIERlYnVnLndhcm5PbmNlKGBTaGFkZXIgY2h1bmsgJyR7Y2h1bmtOYW1lfScgd2FzIHJlbW92ZWQgaW4gQVBJICR7cmVtb3ZlZFZlcnNpb259IGFuZCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuT25jZShgU2hhZGVyIGNodW5rICcke2NodW5rTmFtZX0nIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbmdpbmVBUElWZXJzaW9uID0gY2h1bmtWZXJzaW9uc1tjaHVua05hbWVdO1xuICAgICAgICAgICAgY29uc3QgY2h1bmtJc091dGRhdGVkID0gZW5naW5lQVBJVmVyc2lvbiAmJiAoIXVzZXJBUElWZXJzaW9uIHx8IHNlbXZlckxlc3ModXNlckFQSVZlcnNpb24sIGVuZ2luZUFQSVZlcnNpb24pKTtcblxuICAgICAgICAgICAgaWYgKGNodW5rSXNPdXRkYXRlZCkge1xuICAgICAgICAgICAgICAgIERlYnVnLndhcm5PbmNlKGBTaGFkZXIgY2h1bmsgJyR7Y2h1bmtOYW1lfScgaXMgQVBJIHZlcnNpb24gJHtlbmdpbmVBUElWZXJzaW9ufSwgYnV0IHRoZSBzdXBwbGllZCBjaHVuayBpcyB2ZXJzaW9uICR7dXNlckFQSVZlcnNpb24gfHwgJy0nfS4gUGxlYXNlIHVwZGF0ZSB0byB0aGUgbGF0ZXN0IEFQSTogaHR0cHM6Ly9kZXZlbG9wZXIucGxheWNhbnZhcy5jb20vZW4vdXNlci1tYW51YWwvZ3JhcGhpY3Mvc2hhZGVyLWNodW5rLW1pZ3JhdGlvbnMvYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQge1xuICAgIHZhbGlkYXRlVXNlckNodW5rc1xufTtcbiJdLCJuYW1lcyI6WyJjaHVua1ZlcnNpb25zIiwiYW9QUyIsIkNIVU5LQVBJXzFfNTciLCJjbGVhckNvYXRQUyIsImNsZWFyQ29hdEdsb3NzUFMiLCJDSFVOS0FQSV8xXzYwIiwiY2xlYXJDb2F0Tm9ybWFsUFMiLCJkaWZmdXNlUFMiLCJkaWZmdXNlRGV0YWlsTWFwUFMiLCJlbWlzc2l2ZVBTIiwiZ2xvc3NQUyIsImxpZ2h0bWFwRGlyUFMiLCJDSFVOS0FQSV8xXzU1IiwibGlnaHRtYXBTaW5nbGVQUyIsIm1ldGFsbmVzc1BTIiwibm9ybWFsTWFwUFMiLCJub3JtYWxEZXRhaWxNYXBQUyIsIm9wYWNpdHlQUyIsInBhcmFsbGF4UFMiLCJzaGVlblBTIiwic2hlZW5HbG9zc1BTIiwic3BlY3VsYXJQUyIsInNwZWN1bGFyaXR5RmFjdG9yUFMiLCJ0aGlja25lc3NQUyIsInRyYW5zbWlzc2lvblBTIiwibm9ybWFsVmVydGV4UFMiLCJzdGFydFBTIiwiYW1iaWVudENvbnN0YW50UFMiLCJDSFVOS0FQSV8xXzYyIiwiYW1iaWVudEVudlBTIiwiYW1iaWVudFNIUFMiLCJhb0RpZmZ1c2VPY2NQUyIsImFvU3BlY09jY1BTIiwiYW9TcGVjT2NjQ29uc3RQUyIsImFvU3BlY09jY0NvbnN0U2ltcGxlUFMiLCJhb1NwZWNPY2NTaW1wbGVQUyIsImNsdXN0ZXJlZExpZ2h0UFMiLCJjbHVzdGVyZWRMaWdodFNoYWRvd1BTIiwiY29tYmluZVBTIiwiZmFsbG9mZkludlNxdWFyZWRQUyIsImZhbGxvZmZMaW5lYXJQUyIsImxpZ2h0RGlmZnVzZUxhbWJlcnRQUyIsImxpZ2h0U2hlZW5QUyIsImxpZ2h0U3BlY3VsYXJBbmlzb0dHWFBTIiwibGlnaHRTcGVjdWxhckJsaW5uUFMiLCJsaWdodFNwZWN1bGFyUGhvbmdQUyIsImx0Y1BTIiwicmVmbERpclBTIiwicmVmbERpckFuaXNvUFMiLCJyZWZsZWN0aW9uQ0NQUyIsInJlZmxlY3Rpb25DdWJlUFMiLCJyZWZsZWN0aW9uRW52UFMiLCJyZWZsZWN0aW9uRW52SFFQUyIsInJlZmxlY3Rpb25TaGVlblBTIiwicmVmbGVjdGlvblNwaGVyZVBTIiwicmVmbGVjdGlvblNwaGVyZUxvd1BTIiwic2hhZG93Q29tbW9uUFMiLCJzaGFkb3dDb29yZFBTIiwic2hhZG93Q29vcmRQZXJzcFpCdWZmZXJQUyIsInNoYWRvd0VWU01QUyIsInNoYWRvd0VWU01uUFMiLCJzaGFkb3dTdGFuZGFyZFBTIiwic2hhZG93U3RhbmRhcmRHTDJQUyIsInNoYWRvd1ZTTThQUyIsInNwb3RQUyIsIlRCTlBTIiwiVEJOT2JqZWN0U3BhY2VQUyIsIlRCTmRlcml2YXRpdmVQUyIsIlRCTmZhc3RQUyIsImVuZFBTIiwiQ0hVTktBUElfMV82NSIsIm1ldGFsbmVzc01vZHVsYXRlUFMiLCJvdXRwdXRBbHBoYVBTIiwib3V0cHV0QWxwaGFQcmVtdWxQUyIsImZyZXNuZWxTY2hsaWNrUFMiLCJpcmlkZXNjZW5jZURpZmZyYWN0aW9uUFMiLCJsaWdodG1hcEFkZFBTIiwibGlnaHRtYXBEaXJBZGRQUyIsInJlZnJhY3Rpb25DdWJlUFMiLCJyZWZyYWN0aW9uRHluYW1pY1BTIiwicmVtb3ZlZENodW5rcyIsImFtYmllbnRQcmVmaWx0ZXJlZEN1YmVQUyIsIkNIVU5LQVBJXzFfNTEiLCJhbWJpZW50UHJlZmlsdGVyZWRDdWJlTG9kUFMiLCJkcEF0bGFzUXVhZFBTIiwiZ2VuUGFyYWJvbG9pZFBTIiwicHJlZmlsdGVyQ3ViZW1hcFBTIiwicmVmbGVjdGlvbkRwQXRsYXNQUyIsInJlZmxlY3Rpb25QcmVmaWx0ZXJlZEN1YmVQUyIsInJlZmxlY3Rpb25QcmVmaWx0ZXJlZEN1YmVMb2RQUyIsInJlZnJhY3Rpb25QUyIsIkNIVU5LQVBJXzFfNTYiLCJjb21iaW5lQ2xlYXJDb2F0UFMiLCJjb21iaW5lRGlmZnVzZVBTIiwiY29tYmluZURpZmZ1c2VTcGVjdWxhclBTIiwiY29tYmluZURpZmZ1c2VTcGVjdWxhck5vUmVmbFBTIiwiY29tYmluZURpZmZ1c2VTcGVjdWxhck5vUmVmbFNlcGFyYXRlQW1iaWVudFBTIiwiY29tYmluZURpZmZ1c2VTcGVjdWxhck9sZFBTIiwiY29tYmluZURpZmZ1c2VTcGVjdWxhck5vQ29uc2VydmVQUyIsImxpZ2h0bWFwU2luZ2xlVmVydFBTIiwibm9ybWFsTWFwRmFzdFBTIiwic3BlY3VsYXJBYU5vbmVQUyIsInNwZWN1bGFyQWFUb2tzdmlnUFMiLCJzcGVjdWxhckFhVG9rc3ZpZ0Zhc3RQUyIsInNlbXZlckxlc3MiLCJhIiwiYiIsImF2ZXIiLCJzcGxpdCIsIm1hcCIsInQiLCJwYXJzZUludCIsImJ2ZXIiLCJ2YWxpZGF0ZVVzZXJDaHVua3MiLCJ1c2VyQ2h1bmtzIiwidXNlckFQSVZlcnNpb24iLCJBUElWZXJzaW9uIiwiY2h1bmtOYW1lIiwic2hhZGVyQ2h1bmtzIiwiaGFzT3duUHJvcGVydHkiLCJyZW1vdmVkVmVyc2lvbiIsIkRlYnVnIiwid2Fybk9uY2UiLCJlbmdpbmVBUElWZXJzaW9uIiwiY2h1bmtJc091dGRhdGVkIl0sIm1hcHBpbmdzIjoiOzs7O0FBSUEsTUFBTUEsYUFBYSxHQUFHO0FBQ2xCO0FBQ0FDLEVBQUFBLElBQUksRUFBRUMsYUFBYTtBQUNuQkMsRUFBQUEsV0FBVyxFQUFFRCxhQUFhO0FBQzFCRSxFQUFBQSxnQkFBZ0IsRUFBRUMsYUFBYTtBQUMvQkMsRUFBQUEsaUJBQWlCLEVBQUVKLGFBQWE7QUFDaENLLEVBQUFBLFNBQVMsRUFB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
