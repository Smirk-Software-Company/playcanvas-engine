import { SEMANTIC_POSITION } from '../../../platform/graphics/constants.js';
import { shaderChunks } from '../chunks/chunks.js';
import { ChunkUtils } from '../chunk-utils.js';
import { ShaderUtils } from '../../../platform/graphics/shader-utils.js';
import { ShaderGenerator } from './shader-generator.js';

class ShaderGeneratorSkybox extends ShaderGenerator {
  generateKey(options) {
    return options.type === 'cubemap' ? `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}-${options.fixSeams}-${options.mip}` : `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}`;
  }
  createShaderDefinition(device, options) {
    let fshader = '';
    if (options.type === 'cubemap') {
      const mip2size = [128, 64, /* 32 */16, 8, 4, 2];
      fshader += options.mip ? shaderChunks.fixCubemapSeamsStretchPS : shaderChunks.fixCubemapSeamsNonePS;
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += ShaderGenerator.gammaCode(options.gamma);
      fshader += ShaderGenerator.tonemapCode(options.toneMapping);
      fshader += shaderChunks.skyboxHDRPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding)).replace(/\$FIXCONST/g, 1 - 1 / mip2size[options.mip] + "");
    } else {
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += ShaderGenerator.gammaCode(options.gamma);
      fshader += ShaderGenerator.tonemapCode(options.toneMapping);
      fshader += shaderChunks.sphericalPS;
      fshader += shaderChunks.envAtlasPS;
      fshader += shaderChunks.skyboxEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding));
    }
    return ShaderUtils.createDefinition(device, {
      name: 'SkyboxShader',
      attributes: {
        aPosition: SEMANTIC_POSITION
      },
      vertexCode: shaderChunks.skyboxVS,
      fragmentCode: fshader
    });
  }
}
const skybox = new ShaderGeneratorSkybox();

export { skybox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2t5Ym94LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvc2hhZGVyLWxpYi9wcm9ncmFtcy9za3lib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0VNQU5USUNfUE9TSVRJT04gfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2hhZGVyQ2h1bmtzIH0gZnJvbSAnLi4vY2h1bmtzL2NodW5rcy5qcyc7XG5pbXBvcnQgeyBDaHVua1V0aWxzIH0gZnJvbSAnLi4vY2h1bmstdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBTaGFkZXJVdGlscyB9IGZyb20gJy4uLy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3NoYWRlci11dGlscy5qcyc7XG5pbXBvcnQgeyBTaGFkZXJHZW5lcmF0b3IgfSBmcm9tICcuL3NoYWRlci1nZW5lcmF0b3IuanMnO1xuXG5jbGFzcyBTaGFkZXJHZW5lcmF0b3JTa3lib3ggZXh0ZW5kcyBTaGFkZXJHZW5lcmF0b3Ige1xuICAgIGdlbmVyYXRlS2V5KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMudHlwZSA9PT0gJ2N1YmVtYXAnID9cbiAgICAgICAgICAgIGBza3lib3gtJHtvcHRpb25zLnR5cGV9LSR7b3B0aW9ucy5lbmNvZGluZ30tJHtvcHRpb25zLnVzZUludGVuc2l0eX0tJHtvcHRpb25zLmdhbW1hfS0ke29wdGlvbnMudG9uZU1hcHBpbmd9LSR7b3B0aW9ucy5maXhTZWFtc30tJHtvcHRpb25zLm1pcH1gIDpcbiAgICAgICAgICAgIGBza3lib3gtJHtvcHRpb25zLnR5cGV9LSR7b3B0aW9ucy5lbmNvZGluZ30tJHtvcHRpb25zLnVzZUludGVuc2l0eX0tJHtvcHRpb25zLmdhbW1hfS0ke29wdGlvbnMudG9uZU1hcHBpbmd9YDtcbiAgICB9XG5cbiAgICBjcmVhdGVTaGFkZXJEZWZpbml0aW9uKGRldmljZSwgb3B0aW9ucykge1xuICAgICAgICBsZXQgZnNoYWRlciA9ICcnO1xuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSAnY3ViZW1hcCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pcDJzaXplID0gWzEyOCwgNjQsIC8qIDMyICovIDE2LCA4LCA0LCAyXTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy5taXAgPyBzaGFkZXJDaHVua3MuZml4Q3ViZW1hcFNlYW1zU3RyZXRjaFBTIDogc2hhZGVyQ2h1bmtzLmZpeEN1YmVtYXBTZWFtc05vbmVQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy51c2VJbnRlbnNpdHkgPyBzaGFkZXJDaHVua3MuZW52TXVsdGlwbHlQUyA6IHNoYWRlckNodW5rcy5lbnZDb25zdFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZGVjb2RlUFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci5nYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci50b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXBwaW5nKTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNreWJveEhEUlBTXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJERFQ09ERS9nLCBDaHVua1V0aWxzLmRlY29kZUZ1bmMob3B0aW9ucy5lbmNvZGluZykpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJEZJWENPTlNUL2csICgxIC0gMSAvIG1pcDJzaXplW29wdGlvbnMubWlwXSkgKyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gb3B0aW9ucy51c2VJbnRlbnNpdHkgPyBzaGFkZXJDaHVua3MuZW52TXVsdGlwbHlQUyA6IHNoYWRlckNodW5rcy5lbnZDb25zdFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZGVjb2RlUFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci5nYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgICAgICBmc2hhZGVyICs9IFNoYWRlckdlbmVyYXRvci50b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXBwaW5nKTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNwaGVyaWNhbFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZW52QXRsYXNQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNreWJveEVudlBTLnJlcGxhY2UoL1xcJERFQ09ERS9nLCBDaHVua1V0aWxzLmRlY29kZUZ1bmMob3B0aW9ucy5lbmNvZGluZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZGV2aWNlLCB7XG4gICAgICAgICAgICBuYW1lOiAnU2t5Ym94U2hhZGVyJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhUG9zaXRpb246IFNFTUFOVElDX1BPU0lUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVydGV4Q29kZTogc2hhZGVyQ2h1bmtzLnNreWJveFZTLFxuICAgICAgICAgICAgZnJhZ21lbnRDb2RlOiBmc2hhZGVyXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3Qgc2t5Ym94ID0gbmV3IFNoYWRlckdlbmVyYXRvclNreWJveCgpO1xuXG5leHBvcnQgeyBza3lib3ggfTtcbiJdLCJuYW1lcyI6WyJTaGFkZXJHZW5lcmF0b3JTa3lib3giLCJTaGFkZXJHZW5lcmF0b3IiLCJnZW5lcmF0ZUtleSIsIm9wdGlvbnMiLCJ0eXBlIiwiZW5jb2RpbmciLCJ1c2VJbnRlbnNpdHkiLCJnYW1tYSIsInRvbmVNYXBwaW5nIiwiZml4U2VhbXMiLCJtaXAiLCJjcmVhdGVTaGFkZXJEZWZpbml0aW9uIiwiZGV2aWNlIiwiZnNoYWRlciIsIm1pcDJzaXplIiwic2hhZGVyQ2h1bmtzIiwiZml4Q3ViZW1hcFNlYW1zU3RyZXRjaFBTIiwiZml4Q3ViZW1hcFNlYW1zTm9uZVBTIiwiZW52TXVsdGlwbHlQUyIsImVudkNvbnN0UFMiLCJkZWNvZGVQUyIsImdhbW1hQ29kZSIsInRvbmVtYXBDb2RlIiwic2t5Ym94SERSUFMiLCJyZXBsYWNlIiwiQ2h1bmtVdGlscyIsImRlY29kZUZ1bmMiLCJzcGhlcmljYWxQUyIsImVudkF0bGFzUFMiLCJza3lib3hFbnZQUyIsIlNoYWRlclV0aWxzIiwiY3JlYXRlRGVmaW5pdGlvbiIsIm5hbWUiLCJhdHRyaWJ1dGVzIiwiYVBvc2l0aW9uIiwiU0VNQU5USUNfUE9TSVRJT04iLCJ2ZXJ0ZXhDb2RlIiwic2t5Ym94VlMiLCJmcmFnbWVudENvZGUiLCJza3lib3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BLE1BQU1BLHFCQUFxQixTQUFTQyxlQUFlLENBQUM7RUFDaERDLFdBQVdBLENBQUNDLE9BQU8sRUFBRTtJQUNqQixPQUFPQSxPQUFPLENBQUNDLElBQUksS0FBSyxTQUFTLEdBQzVCLENBQUEsT0FBQSxFQUFTRCxPQUFPLENBQUNDLElBQUssQ0FBQSxDQUFBLEVBQUdELE9BQU8sQ0FBQ0UsUUFBUyxDQUFHRixDQUFBQSxFQUFBQSxPQUFPLENBQUNHLFlBQWEsQ0FBR0gsQ0FBQUEsRUFBQUEsT0FBTyxDQUFDSSxLQUFNLENBQUdKLENBQUFBLEVBQUFBLE9BQU8sQ0FBQ0ssV0FBWSxDQUFHTCxDQUFBQSxFQUFBQSxPQUFPLENBQUNNLFFBQVMsQ0FBQSxDQUFBLEVBQUdOLE9BQU8sQ0FBQ08sR0FBSSxDQUFBLENBQUMsR0FDOUksQ0FBQSxPQUFBLEVBQVNQLE9BQU8sQ0FBQ0MsSUFBSyxDQUFBLENBQUEsRUFBR0QsT0FBTyxDQUFDRSxRQUFTLENBQUdGLENBQUFBLEVBQUFBLE9BQU8sQ0FBQ0csWUFBYSxDQUFHSCxDQUFBQSxFQUFBQSxPQUFPLENBQUNJLEtBQU0sQ0FBR0osQ0FBQUEsRUFBQUEsT0FBTyxDQUFDSyxXQUFZLENBQUMsQ0FBQSxDQUFBO0FBQ3BILEdBQUE7QUFFQUcsRUFBQUEsc0JBQXNCQSxDQUFDQyxNQUFNLEVBQUVULE9BQU8sRUFBRTtJQUNwQyxJQUFJVSxPQUFPLEdBQUcsRUFBRSxDQUFBO0FBQ2hCLElBQUEsSUFBSVYsT0FBTyxDQUFDQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzVCLE1BQUEsTUFBTVUsUUFBUSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtNQUNoREQsT0FBTyxJQUFJVixPQUFPLENBQUNPLEdBQUcsR0FBR0ssWUFBWSxDQUFDQyx3QkFBd0IsR0FBR0QsWUFBWSxDQUFDRSxxQkFBcUIsQ0FBQTtNQUNuR0osT0FBTyxJQUFJVixPQUFPLENBQUNHLFlBQVksR0FBR1MsWUFBWSxDQUFDRyxhQUFhLEdBQUdILFlBQVksQ0FBQ0ksVUFBVSxDQUFBO01BQ3RGTixPQUFPLElBQUlFLFlBQVksQ0FBQ0ssUUFBUSxDQUFBO01BQ2hDUCxPQUFPLElBQUlaLGVBQWUsQ0FBQ29CLFNBQVMsQ0FBQ2xCLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDLENBQUE7TUFDbkRNLE9BQU8sSUFBSVosZUFBZSxDQUFDcUIsV0FBVyxDQUFDbkIsT0FBTyxDQUFDSyxXQUFXLENBQUMsQ0FBQTtBQUMzREssTUFBQUEsT0FBTyxJQUFJRSxZQUFZLENBQUNRLFdBQVcsQ0FDOUJDLE9BQU8sQ0FBQyxXQUFXLEVBQUVDLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDdkIsT0FBTyxDQUFDRSxRQUFRLENBQUMsQ0FBQyxDQUM3RG1CLE9BQU8sQ0FBQyxhQUFhLEVBQUcsQ0FBQyxHQUFHLENBQUMsR0FBR1YsUUFBUSxDQUFDWCxPQUFPLENBQUNPLEdBQUcsQ0FBQyxHQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ3JFLEtBQUMsTUFBTTtNQUNIRyxPQUFPLElBQUlWLE9BQU8sQ0FBQ0csWUFBWSxHQUFHUyxZQUFZLENBQUNHLGFBQWEsR0FBR0gsWUFBWSxDQUFDSSxVQUFVLENBQUE7TUFDdEZOLE9BQU8sSUFBSUUsWUFBWSxDQUFDSyxRQUFRLENBQUE7TUFDaENQLE9BQU8sSUFBSVosZUFBZSxDQUFDb0IsU0FBUyxDQUFDbEIsT0FBTyxDQUFDSSxLQUFLLENBQUMsQ0FBQTtNQUNuRE0sT0FBTyxJQUFJWixlQUFlLENBQUNxQixXQUFXLENBQUNuQixPQUFPLENBQUNLLFdBQVcsQ0FBQyxDQUFBO01BQzNESyxPQUFPLElBQUlFLFlBQVksQ0FBQ1ksV0FBVyxDQUFBO01BQ25DZCxPQUFPLElBQUlFLFlBQVksQ0FBQ2EsVUFBVSxDQUFBO0FBQ2xDZixNQUFBQSxPQUFPLElBQUlFLFlBQVksQ0FBQ2MsV0FBVyxDQUFDTCxPQUFPLENBQUMsV0FBVyxFQUFFQyxVQUFVLENBQUNDLFVBQVUsQ0FBQ3ZCLE9BQU8sQ0FBQ0UsUUFBUSxDQUFDLENBQUMsQ0FBQTtBQUNyRyxLQUFBO0FBRUEsSUFBQSxPQUFPeUIsV0FBVyxDQUFDQyxnQkFBZ0IsQ0FBQ25CLE1BQU0sRUFBRTtBQUN4Q29CLE1BQUFBLElBQUksRUFBRSxjQUFjO0FBQ3BCQyxNQUFBQSxVQUFVLEVBQUU7QUFDUkMsUUFBQUEsU0FBUyxFQUFFQyxpQkFBQUE7T0FDZDtNQUNEQyxVQUFVLEVBQUVyQixZQUFZLENBQUNzQixRQUFRO0FBQ2pDQyxNQUFBQSxZQUFZLEVBQUV6QixPQUFBQTtBQUNsQixLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFDSixDQUFBO0FBRUEsTUFBTTBCLE1BQU0sR0FBRyxJQUFJdkMscUJBQXFCOzs7OyJ9
