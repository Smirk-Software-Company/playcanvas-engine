import { Debug } from '../../core/debug.js';
import { PIXELFORMAT_RGBA8, FILTER_NEAREST, ADDRESS_CLAMP_TO_EDGE } from '../../platform/graphics/constants.js';
import { Texture } from '../../platform/graphics/texture.js';
import { LIGHTTYPE_DIRECTIONAL } from '../constants.js';
import { RenderPassCookieRenderer } from './render-pass-cookie-renderer.js';

/**
 * Helper class used by clustered lighting system to render cookies into the texture atlas,
 * similarly to shadow renderer.
 *
 * @ignore
 */
class CookieRenderer {
  constructor(device, lightTextureAtlas) {
    this.device = device;
    this.lightTextureAtlas = lightTextureAtlas;
    this.renderPass = this.createRenderPass(lightTextureAtlas.cookieRenderTarget);
  }
  destroy() {
    this.renderPass.destroy();
  }
  static createTexture(device, resolution) {
    const texture = new Texture(device, {
      name: 'CookieAtlas',
      width: resolution,
      height: resolution,
      format: PIXELFORMAT_RGBA8,
      cubemap: false,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE
    });
    return texture;
  }
  filter(lights, filteredLights) {
    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];

      // skip directional lights
      if (light._type === LIGHTTYPE_DIRECTIONAL) continue;

      // skip clustered cookies with no assigned atlas slot
      if (!light.atlasViewportAllocated) continue;

      // only render cookie when the slot is reassigned (assuming the cookie texture is static)
      if (!light.atlasSlotUpdated) continue;
      if (light.enabled && light.cookie && light.visibleThisFrame) {
        filteredLights.push(light);
      }
    }
  }
  createRenderPass(renderTarget) {
    Debug.assert(renderTarget);

    // prepare a single render pass to render all quads to the render target
    const renderPass = new RenderPassCookieRenderer(this.device, this.lightTextureAtlas.cubeSlotsOffsets);
    renderPass.init(renderTarget);
    renderPass.colorOps.clear = false;
    renderPass.depthStencilOps.clearDepth = false;
    return renderPass;
  }
  render(lights) {
    // pick lights we need to update the cookies for
    const filteredLights = this.renderPass._filteredLights;
    this.filter(lights, filteredLights);
    if (filteredLights.length > 0) {
      // render the pass
      this.renderPass.render();
      filteredLights.length = 0;
    }
  }
}

export { CookieRenderer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLXJlbmRlcmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NlbmUvcmVuZGVyZXIvY29va2llLXJlbmRlcmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IEFERFJFU1NfQ0xBTVBfVE9fRURHRSwgRklMVEVSX05FQVJFU1QsIFBJWEVMRk9STUFUX1JHQkE4IH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy90ZXh0dXJlLmpzJztcblxuaW1wb3J0IHsgTElHSFRUWVBFX0RJUkVDVElPTkFMIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFJlbmRlclBhc3NDb29raWVSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyLXBhc3MtY29va2llLXJlbmRlcmVyLmpzJztcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdXNlZCBieSBjbHVzdGVyZWQgbGlnaHRpbmcgc3lzdGVtIHRvIHJlbmRlciBjb29raWVzIGludG8gdGhlIHRleHR1cmUgYXRsYXMsXG4gKiBzaW1pbGFybHkgdG8gc2hhZG93IHJlbmRlcmVyLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgQ29va2llUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgbGlnaHRUZXh0dXJlQXRsYXMpIHtcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBkZXZpY2U7XG4gICAgICAgIHRoaXMubGlnaHRUZXh0dXJlQXRsYXMgPSBsaWdodFRleHR1cmVBdGxhcztcblxuICAgICAgICB0aGlzLnJlbmRlclBhc3MgPSB0aGlzLmNyZWF0ZVJlbmRlclBhc3MobGlnaHRUZXh0dXJlQXRsYXMuY29va2llUmVuZGVyVGFyZ2V0KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnJlbmRlclBhc3MuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVUZXh0dXJlKGRldmljZSwgcmVzb2x1dGlvbikge1xuXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZShkZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWU6ICdDb29raWVBdGxhcycsXG4gICAgICAgICAgICB3aWR0aDogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIGhlaWdodDogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIGZvcm1hdDogUElYRUxGT1JNQVRfUkdCQTgsXG4gICAgICAgICAgICBjdWJlbWFwOiBmYWxzZSxcbiAgICAgICAgICAgIG1pcG1hcHM6IGZhbHNlLFxuICAgICAgICAgICAgbWluRmlsdGVyOiBGSUxURVJfTkVBUkVTVCxcbiAgICAgICAgICAgIG1hZ0ZpbHRlcjogRklMVEVSX05FQVJFU1QsXG4gICAgICAgICAgICBhZGRyZXNzVTogQUREUkVTU19DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgYWRkcmVzc1Y6IEFERFJFU1NfQ0xBTVBfVE9fRURHRVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG5cbiAgICBmaWx0ZXIobGlnaHRzLCBmaWx0ZXJlZExpZ2h0cykge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaWdodCA9IGxpZ2h0c1tpXTtcblxuICAgICAgICAgICAgLy8gc2tpcCBkaXJlY3Rpb25hbCBsaWdodHNcbiAgICAgICAgICAgIGlmIChsaWdodC5fdHlwZSA9PT0gTElHSFRUWVBFX0RJUkVDVElPTkFMKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBza2lwIGNsdXN0ZXJlZCBjb29raWVzIHdpdGggbm8gYXNzaWduZWQgYXRsYXMgc2xvdFxuICAgICAgICAgICAgaWYgKCFsaWdodC5hdGxhc1ZpZXdwb3J0QWxsb2NhdGVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBvbmx5IHJlbmRlciBjb29raWUgd2hlbiB0aGUgc2xvdCBpcyByZWFzc2lnbmVkIChhc3N1bWluZyB0aGUgY29va2llIHRleHR1cmUgaXMgc3RhdGljKVxuICAgICAgICAgICAgaWYgKCFsaWdodC5hdGxhc1Nsb3RVcGRhdGVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAobGlnaHQuZW5hYmxlZCAmJiBsaWdodC5jb29raWUgJiYgbGlnaHQudmlzaWJsZVRoaXNGcmFtZSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkTGlnaHRzLnB1c2gobGlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUmVuZGVyUGFzcyhyZW5kZXJUYXJnZXQpIHtcblxuICAgICAgICBEZWJ1Zy5hc3NlcnQocmVuZGVyVGFyZ2V0KTtcblxuICAgICAgICAvLyBwcmVwYXJlIGEgc2luZ2xlIHJlbmRlciBwYXNzIHRvIHJlbmRlciBhbGwgcXVhZHMgdG8gdGhlIHJlbmRlciB0YXJnZXRcbiAgICAgICAgY29uc3QgcmVuZGVyUGFzcyA9IG5ldyBSZW5kZXJQYXNzQ29va2llUmVuZGVyZXIodGhpcy5kZXZpY2UsIHRoaXMubGlnaHRUZXh0dXJlQXRsYXMuY3ViZVNsb3RzT2Zmc2V0cyk7XG4gICAgICAgIHJlbmRlclBhc3MuaW5pdChyZW5kZXJUYXJnZXQpO1xuICAgICAgICByZW5kZXJQYXNzLmNvbG9yT3BzLmNsZWFyID0gZmFsc2U7XG4gICAgICAgIHJlbmRlclBhc3MuZGVwdGhTdGVuY2lsT3BzLmNsZWFyRGVwdGggPSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gcmVuZGVyUGFzcztcbiAgICB9XG5cbiAgICByZW5kZXIobGlnaHRzKSB7XG5cbiAgICAgICAgLy8gcGljayBsaWdodHMgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGNvb2tpZXMgZm9yXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkTGlnaHRzID0gdGhpcy5yZW5kZXJQYXNzLl9maWx0ZXJlZExpZ2h0cztcbiAgICAgICAgdGhpcy5maWx0ZXIobGlnaHRzLCBmaWx0ZXJlZExpZ2h0cyk7XG4gICAgICAgIGlmIChmaWx0ZXJlZExpZ2h0cy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIC8vIHJlbmRlciB0aGUgcGFzc1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQYXNzLnJlbmRlcigpO1xuXG4gICAgICAgICAgICBmaWx0ZXJlZExpZ2h0cy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb29raWVSZW5kZXJlciB9O1xuIl0sIm5hbWVzIjpbIkNvb2tpZVJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJsaWdodFRleHR1cmVBdGxhcyIsInJlbmRlclBhc3MiLCJjcmVhdGVSZW5kZXJQYXNzIiwiY29va2llUmVuZGVyVGFyZ2V0IiwiZGVzdHJveSIsImNyZWF0ZVRleHR1cmUiLCJyZXNvbHV0aW9uIiwidGV4dHVyZSIsIlRleHR1cmUiLCJuYW1lIiwid2lkdGgiLCJoZWlnaHQiLCJmb3JtYXQiLCJQSVhFTEZPUk1BVF9SR0JBOCIsImN1YmVtYXAiLCJtaXBtYXBzIiwibWluRmlsdGVyIiwiRklMVEVSX05FQVJFU1QiLCJtYWdGaWx0ZXIiLCJhZGRyZXNzVSIsIkFERFJFU1NfQ0xBTVBfVE9fRURHRSIsImFkZHJlc3NWIiwiZmlsdGVyIiwibGlnaHRzIiwiZmlsdGVyZWRMaWdodHMiLCJpIiwibGVuZ3RoIiwibGlnaHQiLCJfdHlwZSIsIkxJR0hUVFlQRV9ESVJFQ1RJT05BTCIsImF0bGFzVmlld3BvcnRBbGxvY2F0ZWQiLCJhdGxhc1Nsb3RVcGRhdGVkIiwiZW5hYmxlZCIsImNvb2tpZSIsInZpc2libGVUaGlzRnJhbWUiLCJwdXNoIiwicmVuZGVyVGFyZ2V0IiwiRGVidWciLCJhc3NlcnQiLCJSZW5kZXJQYXNzQ29va2llUmVuZGVyZXIiLCJjdWJlU2xvdHNPZmZzZXRzIiwiaW5pdCIsImNvbG9yT3BzIiwiY2xlYXIiLCJkZXB0aFN0ZW5jaWxPcHMiLCJjbGVhckRlcHRoIiwicmVuZGVyIiwiX2ZpbHRlcmVkTGlnaHRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxjQUFjLENBQUM7QUFDakJDLEVBQUFBLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsaUJBQWlCLEVBQUU7SUFDbkMsSUFBSSxDQUFDRCxNQUFNLEdBQUdBLE1BQU0sQ0FBQTtJQUNwQixJQUFJLENBQUNDLGlCQUFpQixHQUFHQSxpQkFBaUIsQ0FBQTtJQUUxQyxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFDRixpQkFBaUIsQ0FBQ0csa0JBQWtCLENBQUMsQ0FBQTtBQUNqRixHQUFBO0FBRUFDLEVBQUFBLE9BQU9BLEdBQUc7QUFDTixJQUFBLElBQUksQ0FBQ0gsVUFBVSxDQUFDRyxPQUFPLEVBQUUsQ0FBQTtBQUM3QixHQUFBO0FBRUEsRUFBQSxPQUFPQyxhQUFhQSxDQUFDTixNQUFNLEVBQUVPLFVBQVUsRUFBRTtBQUVyQyxJQUFBLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUNULE1BQU0sRUFBRTtBQUNoQ1UsTUFBQUEsSUFBSSxFQUFFLGFBQWE7QUFDbkJDLE1BQUFBLEtBQUssRUFBRUosVUFBVTtBQUNqQkssTUFBQUEsTUFBTSxFQUFFTCxVQUFVO0FBQ2xCTSxNQUFBQSxNQUFNLEVBQUVDLGlCQUFpQjtBQUN6QkMsTUFBQUEsT0FBTyxFQUFFLEtBQUs7QUFDZEMsTUFBQUEsT0FBTyxFQUFFLEtBQUs7QUFDZEMsTUFBQUEsU0FBUyxFQUFFQyxjQUFjO0FBQ3pCQyxNQUFBQSxTQUFTLEVBQUVELGNBQWM7QUFDekJFLE1BQUFBLFFBQVEsRUFBRUMscUJBQXFCO0FBQy9CQyxNQUFBQSxRQUFRLEVBQUVELHFCQUFBQTtBQUNkLEtBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBQSxPQUFPYixPQUFPLENBQUE7QUFDbEIsR0FBQTtBQUVBZSxFQUFBQSxNQUFNQSxDQUFDQyxNQUFNLEVBQUVDLGNBQWMsRUFBRTtBQUUzQixJQUFBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsTUFBQSxNQUFNRSxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0UsQ0FBQyxDQUFDLENBQUE7O0FBRXZCO0FBQ0EsTUFBQSxJQUFJRSxLQUFLLENBQUNDLEtBQUssS0FBS0MscUJBQXFCLEVBQ3JDLFNBQUE7O0FBRUo7QUFDQSxNQUFBLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxzQkFBc0IsRUFDN0IsU0FBQTs7QUFFSjtBQUNBLE1BQUEsSUFBSSxDQUFDSCxLQUFLLENBQUNJLGdCQUFnQixFQUN2QixTQUFBO01BRUosSUFBSUosS0FBSyxDQUFDSyxPQUFPLElBQUlMLEtBQUssQ0FBQ00sTUFBTSxJQUFJTixLQUFLLENBQUNPLGdCQUFnQixFQUFFO0FBQ3pEVixRQUFBQSxjQUFjLENBQUNXLElBQUksQ0FBQ1IsS0FBSyxDQUFDLENBQUE7QUFDOUIsT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBO0VBRUF6QixnQkFBZ0JBLENBQUNrQyxZQUFZLEVBQUU7QUFFM0JDLElBQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDRixZQUFZLENBQUMsQ0FBQTs7QUFFMUI7QUFDQSxJQUFBLE1BQU1uQyxVQUFVLEdBQUcsSUFBSXNDLHdCQUF3QixDQUFDLElBQUksQ0FBQ3hDLE1BQU0sRUFBRSxJQUFJLENBQUNDLGlCQUFpQixDQUFDd0MsZ0JBQWdCLENBQUMsQ0FBQTtBQUNyR3ZDLElBQUFBLFVBQVUsQ0FBQ3dDLElBQUksQ0FBQ0wsWUFBWSxDQUFDLENBQUE7QUFDN0JuQyxJQUFBQSxVQUFVLENBQUN5QyxRQUFRLENBQUNDLEtBQUssR0FBRyxLQUFLLENBQUE7QUFDakMxQyxJQUFBQSxVQUFVLENBQUMyQyxlQUFlLENBQUNDLFVBQVUsR0FBRyxLQUFLLENBQUE7QUFFN0MsSUFBQSxPQUFPNUMsVUFBVSxDQUFBO0FBQ3JCLEdBQUE7RUFFQTZDLE1BQU1BLENBQUN2QixNQUFNLEVBQUU7QUFFWDtBQUNBLElBQUEsTUFBTUMsY0FBYyxHQUFHLElBQUksQ0FBQ3ZCLFVBQVUsQ0FBQzhDLGVBQWUsQ0FBQTtBQUN0RCxJQUFBLElBQUksQ0FBQ3pCLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFQyxjQUFjLENBQUMsQ0FBQTtBQUNuQyxJQUFBLElBQUlBLGNBQWMsQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUUzQjtBQUNBLE1BQUEsSUFBSSxDQUFDekIsVUFBVSxDQUFDNkMsTUFBTSxFQUFFLENBQUE7TUFFeEJ0QixjQUFjLENBQUNFLE1BQU0sR0FBRyxDQUFDLENBQUE7QUFDN0IsS0FBQTtBQUNKLEdBQUE7QUFDSjs7OzsifQ==
