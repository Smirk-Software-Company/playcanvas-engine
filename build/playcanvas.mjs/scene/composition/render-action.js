/**
 * Class representing an entry in the final order of rendering of cameras and layers in the engine
 * this is populated at runtime based on LayerComposition
 *
 * @ignore
 */
class RenderAction {
  constructor() {
    // index into a layer stored in LayerComposition.layerList
    this.layerIndex = 0;

    // the layer
    this.layer = null;

    // index into a camera array of the layer, stored in Layer.cameras
    this.cameraIndex = 0;

    // camera of type CameraComponent
    this.camera = null;

    /**
     * render target this render action renders to (taken from either camera or layer)
     *
     * @type {import('../../platform/graphics/render-target.js').RenderTarget|null}
     */
    this.renderTarget = null;

    // light clusters (type WorldClusters)
    this.lightClusters = null;

    // clear flags
    this.clearColor = false;
    this.clearDepth = false;
    this.clearStencil = false;

    // true if this render action should trigger postprocessing callback for the camera
    this.triggerPostprocess = false;

    // true if this is first render action using this camera
    this.firstCameraUse = false;

    // true if this is the last render action using this camera
    this.lastCameraUse = false;

    // directional lights that needs to update their shadows for this render action. The array is
    // filled in during light culling each frame.
    this.directionalLights = [];

    // an array of view bind groups (the number of these corresponds to the number of views when XR is used)
    /** @type {import('../../platform/graphics/bind-group.js').BindGroup[]} */
    this.viewBindGroups = [];
  }

  // releases GPU resources
  destroy() {
    this.viewBindGroups.forEach(bg => {
      bg.defaultUniformBuffer.destroy();
      bg.destroy();
    });
    this.viewBindGroups.length = 0;
  }
  get hasDirectionalShadowLights() {
    return this.directionalLights.length > 0;
  }

  /**
   * @param {import('./layer-composition.js').LayerComposition} layerComposition - The layer
   * composition.
   * @returns {boolean} - True if the layer / sublayer referenced by the render action is enabled
   */
  isLayerEnabled(layerComposition) {
    const layer = layerComposition.layerList[this.layerIndex];
    return layer.enabled && layerComposition.subLayerEnabled[this.layerIndex];
  }
}

export { RenderAction };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLWFjdGlvbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lL2NvbXBvc2l0aW9uL3JlbmRlci1hY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gZW50cnkgaW4gdGhlIGZpbmFsIG9yZGVyIG9mIHJlbmRlcmluZyBvZiBjYW1lcmFzIGFuZCBsYXllcnMgaW4gdGhlIGVuZ2luZVxuICogdGhpcyBpcyBwb3B1bGF0ZWQgYXQgcnVudGltZSBiYXNlZCBvbiBMYXllckNvbXBvc2l0aW9uXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBSZW5kZXJBY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgIC8vIGluZGV4IGludG8gYSBsYXllciBzdG9yZWQgaW4gTGF5ZXJDb21wb3NpdGlvbi5sYXllckxpc3RcbiAgICAgICAgdGhpcy5sYXllckluZGV4ID0gMDtcblxuICAgICAgICAvLyB0aGUgbGF5ZXJcbiAgICAgICAgdGhpcy5sYXllciA9IG51bGw7XG5cbiAgICAgICAgLy8gaW5kZXggaW50byBhIGNhbWVyYSBhcnJheSBvZiB0aGUgbGF5ZXIsIHN0b3JlZCBpbiBMYXllci5jYW1lcmFzXG4gICAgICAgIHRoaXMuY2FtZXJhSW5kZXggPSAwO1xuXG4gICAgICAgIC8vIGNhbWVyYSBvZiB0eXBlIENhbWVyYUNvbXBvbmVudFxuICAgICAgICB0aGlzLmNhbWVyYSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbmRlciB0YXJnZXQgdGhpcyByZW5kZXIgYWN0aW9uIHJlbmRlcnMgdG8gKHRha2VuIGZyb20gZWl0aGVyIGNhbWVyYSBvciBsYXllcilcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge2ltcG9ydCgnLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvcmVuZGVyLXRhcmdldC5qcycpLlJlbmRlclRhcmdldHxudWxsfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW5kZXJUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIC8vIGxpZ2h0IGNsdXN0ZXJzICh0eXBlIFdvcmxkQ2x1c3RlcnMpXG4gICAgICAgIHRoaXMubGlnaHRDbHVzdGVycyA9IG51bGw7XG5cbiAgICAgICAgLy8gY2xlYXIgZmxhZ3NcbiAgICAgICAgdGhpcy5jbGVhckNvbG9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xlYXJEZXB0aCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsZWFyU3RlbmNpbCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHRydWUgaWYgdGhpcyByZW5kZXIgYWN0aW9uIHNob3VsZCB0cmlnZ2VyIHBvc3Rwcm9jZXNzaW5nIGNhbGxiYWNrIGZvciB0aGUgY2FtZXJhXG4gICAgICAgIHRoaXMudHJpZ2dlclBvc3Rwcm9jZXNzID0gZmFsc2U7XG5cbiAgICAgICAgLy8gdHJ1ZSBpZiB0aGlzIGlzIGZpcnN0IHJlbmRlciBhY3Rpb24gdXNpbmcgdGhpcyBjYW1lcmFcbiAgICAgICAgdGhpcy5maXJzdENhbWVyYVVzZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgbGFzdCByZW5kZXIgYWN0aW9uIHVzaW5nIHRoaXMgY2FtZXJhXG4gICAgICAgIHRoaXMubGFzdENhbWVyYVVzZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGRpcmVjdGlvbmFsIGxpZ2h0cyB0aGF0IG5lZWRzIHRvIHVwZGF0ZSB0aGVpciBzaGFkb3dzIGZvciB0aGlzIHJlbmRlciBhY3Rpb24uIFRoZSBhcnJheSBpc1xuICAgICAgICAvLyBmaWxsZWQgaW4gZHVyaW5nIGxpZ2h0IGN1bGxpbmcgZWFjaCBmcmFtZS5cbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0cyA9IFtdO1xuXG4gICAgICAgIC8vIGFuIGFycmF5IG9mIHZpZXcgYmluZCBncm91cHMgKHRoZSBudW1iZXIgb2YgdGhlc2UgY29ycmVzcG9uZHMgdG8gdGhlIG51bWJlciBvZiB2aWV3cyB3aGVuIFhSIGlzIHVzZWQpXG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9iaW5kLWdyb3VwLmpzJykuQmluZEdyb3VwW119ICovXG4gICAgICAgIHRoaXMudmlld0JpbmRHcm91cHMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyByZWxlYXNlcyBHUFUgcmVzb3VyY2VzXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy52aWV3QmluZEdyb3Vwcy5mb3JFYWNoKChiZykgPT4ge1xuICAgICAgICAgICAgYmcuZGVmYXVsdFVuaWZvcm1CdWZmZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgYmcuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52aWV3QmluZEdyb3Vwcy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGdldCBoYXNEaXJlY3Rpb25hbFNoYWRvd0xpZ2h0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uYWxMaWdodHMubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9sYXllci1jb21wb3NpdGlvbi5qcycpLkxheWVyQ29tcG9zaXRpb259IGxheWVyQ29tcG9zaXRpb24gLSBUaGUgbGF5ZXJcbiAgICAgKiBjb21wb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBsYXllciAvIHN1YmxheWVyIHJlZmVyZW5jZWQgYnkgdGhlIHJlbmRlciBhY3Rpb24gaXMgZW5hYmxlZFxuICAgICAqL1xuICAgIGlzTGF5ZXJFbmFibGVkKGxheWVyQ29tcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBsYXllckNvbXBvc2l0aW9uLmxheWVyTGlzdFt0aGlzLmxheWVySW5kZXhdO1xuICAgICAgICByZXR1cm4gbGF5ZXIuZW5hYmxlZCAmJiBsYXllckNvbXBvc2l0aW9uLnN1YkxheWVyRW5hYmxlZFt0aGlzLmxheWVySW5kZXhdO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUmVuZGVyQWN0aW9uIH07XG4iXSwibmFtZXMiOlsiUmVuZGVyQWN0aW9uIiwiY29uc3RydWN0b3IiLCJsYXllckluZGV4IiwibGF5ZXIiLCJjYW1lcmFJbmRleCIsImNhbWVyYSIsInJlbmRlclRhcmdldCIsImxpZ2h0Q2x1c3RlcnMiLCJjbGVhckNvbG9yIiwiY2xlYXJEZXB0aCIsImNsZWFyU3RlbmNpbCIsInRyaWdnZXJQb3N0cHJvY2VzcyIsImZpcnN0Q2FtZXJhVXNlIiwibGFzdENhbWVyYVVzZSIsImRpcmVjdGlvbmFsTGlnaHRzIiwidmlld0JpbmRHcm91cHMiLCJkZXN0cm95IiwiZm9yRWFjaCIsImJnIiwiZGVmYXVsdFVuaWZvcm1CdWZmZXIiLCJsZW5ndGgiLCJoYXNEaXJlY3Rpb25hbFNoYWRvd0xpZ2h0cyIsImlzTGF5ZXJFbmFibGVkIiwibGF5ZXJDb21wb3NpdGlvbiIsImxheWVyTGlzdCIsImVuYWJsZWQiLCJzdWJMYXllckVuYWJsZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFlBQVksQ0FBQztBQUNmQyxFQUFBQSxXQUFXQSxHQUFHO0FBRVY7SUFDQSxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDLENBQUE7O0FBRW5CO0lBQ0EsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFBOztBQUVqQjtJQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLENBQUMsQ0FBQTs7QUFFcEI7SUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUE7O0FBRWxCO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUE7O0FBRXhCO0lBQ0EsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSSxDQUFBOztBQUV6QjtJQUNBLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUN2QixJQUFJLENBQUNDLFVBQVUsR0FBRyxLQUFLLENBQUE7SUFDdkIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsS0FBSyxDQUFBOztBQUV6QjtJQUNBLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsS0FBSyxDQUFBOztBQUUvQjtJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEtBQUssQ0FBQTs7QUFFM0I7SUFDQSxJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFLLENBQUE7O0FBRTFCO0FBQ0E7SUFDQSxJQUFJLENBQUNDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTs7QUFFM0I7QUFDQTtJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEVBQUUsQ0FBQTtBQUM1QixHQUFBOztBQUVBO0FBQ0FDLEVBQUFBLE9BQU9BLEdBQUc7QUFDTixJQUFBLElBQUksQ0FBQ0QsY0FBYyxDQUFDRSxPQUFPLENBQUVDLEVBQUUsSUFBSztBQUNoQ0EsTUFBQUEsRUFBRSxDQUFDQyxvQkFBb0IsQ0FBQ0gsT0FBTyxFQUFFLENBQUE7TUFDakNFLEVBQUUsQ0FBQ0YsT0FBTyxFQUFFLENBQUE7QUFDaEIsS0FBQyxDQUFDLENBQUE7QUFDRixJQUFBLElBQUksQ0FBQ0QsY0FBYyxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQ2xDLEdBQUE7RUFFQSxJQUFJQywwQkFBMEJBLEdBQUc7QUFDN0IsSUFBQSxPQUFPLElBQUksQ0FBQ1AsaUJBQWlCLENBQUNNLE1BQU0sR0FBRyxDQUFDLENBQUE7QUFDNUMsR0FBQTs7QUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lFLGNBQWNBLENBQUNDLGdCQUFnQixFQUFFO0lBQzdCLE1BQU1wQixLQUFLLEdBQUdvQixnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FBQ3RCLFVBQVUsQ0FBQyxDQUFBO0lBQ3pELE9BQU9DLEtBQUssQ0FBQ3NCLE9BQU8sSUFBSUYsZ0JBQWdCLENBQUNHLGVBQWUsQ0FBQyxJQUFJLENBQUN4QixVQUFVLENBQUMsQ0FBQTtBQUM3RSxHQUFBO0FBQ0o7Ozs7In0=
