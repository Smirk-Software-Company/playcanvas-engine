import { script } from '../script.js';
import { ScriptTypes } from '../script/script-types.js';
import { ResourceLoader } from './loader.js';

/** @typedef {import('./handler.js').ResourceHandler} ResourceHandler */

/**
 * Resource handler for loading JavaScript files dynamically.  Two types of JavaScript files can be
 * loaded, PlayCanvas scripts which contain calls to {@link createScript}, or regular JavaScript
 * files, such as third-party libraries.
 *
 * @implements {ResourceHandler}
 */
class ScriptHandler {
  /**
   * Create a new ScriptHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   * @hideconstructor
   */
  constructor(app) {
    /**
     * Type of the resource the handler handles.
     *
     * @type {string}
     */
    this.handlerType = "script";
    this._app = app;
    this._scripts = {};
    this._cache = {};
  }
  clearCache() {
    for (const key in this._cache) {
      const element = this._cache[key];
      const parent = element.parentNode;
      if (parent) parent.removeChild(element);
    }
    this._cache = {};
  }
  load(url, callback) {
    // Scripts don't support bundling since we concatenate them. Below is for consistency.
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }
    const self = this;
    script.app = this._app;
    this._loadScript(url.load, (err, url, extra) => {
      if (!err) {
        if (script.legacy) {
          let Type = null;
          // pop the type from the loading stack
          if (ScriptTypes._types.length) {
            Type = ScriptTypes._types.pop();
          }
          if (Type) {
            // store indexed by URL
            this._scripts[url] = Type;
          } else {
            Type = null;
          }

          // return the resource
          callback(null, Type, extra);
        } else {
          const obj = {};
          for (let i = 0; i < ScriptTypes._types.length; i++) obj[ScriptTypes._types[i].name] = ScriptTypes._types[i];
          ScriptTypes._types.length = 0;
          callback(null, obj, extra);

          // no cache for scripts
          delete self._loader._cache[ResourceLoader.makeKey(url, 'script')];
        }
      } else {
        callback(err);
      }
    });
  }
  open(url, data) {
    return data;
  }
  patch(asset, assets) {}
  _loadScript(url, callback) {
    const head = document.head;
    const element = document.createElement('script');
    this._cache[url] = element;

    // use async=false to force scripts to execute in order
    element.async = false;
    element.addEventListener('error', function (e) {
      callback(`Script: ${e.target.src} failed to load`);
    }, false);
    let done = false;
    element.onload = element.onreadystatechange = function () {
      if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
        done = true; // prevent double event firing
        callback(null, url, element);
      }
    };
    // set the src attribute after the onload callback is set, to avoid an instant loading failing to fire the callback
    element.src = url;
    head.appendChild(element);
  }
}

export { ScriptHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL3NjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY3JpcHQgfSBmcm9tICcuLi9zY3JpcHQuanMnO1xuaW1wb3J0IHsgU2NyaXB0VHlwZXMgfSBmcm9tICcuLi9zY3JpcHQvc2NyaXB0LXR5cGVzLmpzJztcbmltcG9ydCB7IFJlc291cmNlTG9hZGVyIH0gZnJvbSAnLi9sb2FkZXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9oYW5kbGVyLmpzJykuUmVzb3VyY2VIYW5kbGVyfSBSZXNvdXJjZUhhbmRsZXIgKi9cblxuLyoqXG4gKiBSZXNvdXJjZSBoYW5kbGVyIGZvciBsb2FkaW5nIEphdmFTY3JpcHQgZmlsZXMgZHluYW1pY2FsbHkuICBUd28gdHlwZXMgb2YgSmF2YVNjcmlwdCBmaWxlcyBjYW4gYmVcbiAqIGxvYWRlZCwgUGxheUNhbnZhcyBzY3JpcHRzIHdoaWNoIGNvbnRhaW4gY2FsbHMgdG8ge0BsaW5rIGNyZWF0ZVNjcmlwdH0sIG9yIHJlZ3VsYXIgSmF2YVNjcmlwdFxuICogZmlsZXMsIHN1Y2ggYXMgdGhpcmQtcGFydHkgbGlicmFyaWVzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtSZXNvdXJjZUhhbmRsZXJ9XG4gKi9cbmNsYXNzIFNjcmlwdEhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdGhlIHJlc291cmNlIHRoZSBoYW5kbGVyIGhhbmRsZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGhhbmRsZXJUeXBlID0gXCJzY3JpcHRcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBTY3JpcHRIYW5kbGVyIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gYXBwIC0gVGhlIHJ1bm5pbmcge0BsaW5rIEFwcEJhc2V9LlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgdGhpcy5fYXBwID0gYXBwO1xuICAgICAgICB0aGlzLl9zY3JpcHRzID0geyB9O1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHsgfTtcbiAgICB9XG5cbiAgICBjbGVhckNhY2hlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlW2tleV07XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAocGFyZW50KVxuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIGxvYWQodXJsLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBTY3JpcHRzIGRvbid0IHN1cHBvcnQgYnVuZGxpbmcgc2luY2Ugd2UgY29uY2F0ZW5hdGUgdGhlbS4gQmVsb3cgaXMgZm9yIGNvbnNpc3RlbmN5LlxuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHVybCA9IHtcbiAgICAgICAgICAgICAgICBsb2FkOiB1cmwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWw6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBzY3JpcHQuYXBwID0gdGhpcy5fYXBwO1xuXG4gICAgICAgIHRoaXMuX2xvYWRTY3JpcHQodXJsLmxvYWQsIChlcnIsIHVybCwgZXh0cmEpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcmlwdC5sZWdhY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IFR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAvLyBwb3AgdGhlIHR5cGUgZnJvbSB0aGUgbG9hZGluZyBzdGFja1xuICAgICAgICAgICAgICAgICAgICBpZiAoU2NyaXB0VHlwZXMuX3R5cGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSA9IFNjcmlwdFR5cGVzLl90eXBlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBpbmRleGVkIGJ5IFVSTFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NyaXB0c1t1cmxdID0gVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSByZXNvdXJjZVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBUeXBlLCBleHRyYSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU2NyaXB0VHlwZXMuX3R5cGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1NjcmlwdFR5cGVzLl90eXBlc1tpXS5uYW1lXSA9IFNjcmlwdFR5cGVzLl90eXBlc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBTY3JpcHRUeXBlcy5fdHlwZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBvYmosIGV4dHJhKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBubyBjYWNoZSBmb3Igc2NyaXB0c1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5fbG9hZGVyLl9jYWNoZVtSZXNvdXJjZUxvYWRlci5tYWtlS2V5KHVybCwgJ3NjcmlwdCcpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW4odXJsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBhdGNoKGFzc2V0LCBhc3NldHMpIHsgfVxuXG4gICAgX2xvYWRTY3JpcHQodXJsLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICB0aGlzLl9jYWNoZVt1cmxdID0gZWxlbWVudDtcblxuICAgICAgICAvLyB1c2UgYXN5bmM9ZmFsc2UgdG8gZm9yY2Ugc2NyaXB0cyB0byBleGVjdXRlIGluIG9yZGVyXG4gICAgICAgIGVsZW1lbnQuYXN5bmMgPSBmYWxzZTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGBTY3JpcHQ6ICR7ZS50YXJnZXQuc3JjfSBmYWlsZWQgdG8gbG9hZGApO1xuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC5vbmxvYWQgPSBlbGVtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghZG9uZSAmJiAoIXRoaXMucmVhZHlTdGF0ZSB8fCAodGhpcy5yZWFkeVN0YXRlID09PSAnbG9hZGVkJyB8fCB0aGlzLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpKSkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlOyAvLyBwcmV2ZW50IGRvdWJsZSBldmVudCBmaXJpbmdcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB1cmwsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBzZXQgdGhlIHNyYyBhdHRyaWJ1dGUgYWZ0ZXIgdGhlIG9ubG9hZCBjYWxsYmFjayBpcyBzZXQsIHRvIGF2b2lkIGFuIGluc3RhbnQgbG9hZGluZyBmYWlsaW5nIHRvIGZpcmUgdGhlIGNhbGxiYWNrXG4gICAgICAgIGVsZW1lbnQuc3JjID0gdXJsO1xuXG4gICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTY3JpcHRIYW5kbGVyIH07XG4iXSwibmFtZXMiOlsiU2NyaXB0SGFuZGxlciIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaGFuZGxlclR5cGUiLCJfYXBwIiwiX3NjcmlwdHMiLCJfY2FjaGUiLCJjbGVhckNhY2hlIiwia2V5IiwiZWxlbWVudCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImxvYWQiLCJ1cmwiLCJjYWxsYmFjayIsIm9yaWdpbmFsIiwic2VsZiIsInNjcmlwdCIsIl9sb2FkU2NyaXB0IiwiZXJyIiwiZXh0cmEiLCJsZWdhY3kiLCJUeXBlIiwiU2NyaXB0VHlwZXMiLCJfdHlwZXMiLCJsZW5ndGgiLCJwb3AiLCJvYmoiLCJpIiwibmFtZSIsIl9sb2FkZXIiLCJSZXNvdXJjZUxvYWRlciIsIm1ha2VLZXkiLCJvcGVuIiwiZGF0YSIsInBhdGNoIiwiYXNzZXQiLCJhc3NldHMiLCJoZWFkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXN5bmMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInNyYyIsImRvbmUiLCJvbmxvYWQiLCJvbnJlYWR5c3RhdGVj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
