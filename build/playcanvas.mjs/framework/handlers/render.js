import { Render } from '../../scene/render.js';

/** @typedef {import('./handler.js').ResourceHandler} ResourceHandler */

// The scope of this function is the render asset
function onContainerAssetLoaded(containerAsset) {
  const renderAsset = this;
  if (!renderAsset.resource) return;
  const containerResource = containerAsset.resource;
  const render = containerResource.renders && containerResource.renders[renderAsset.data.renderIndex];
  if (render) {
    renderAsset.resource.meshes = render.resource.meshes;
  }
}

// The scope of this function is the render asset
function onContainerAssetAdded(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.on('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.off('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  renderAsset.registry.once('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  if (!containerAsset.resource) {
    renderAsset.registry.load(containerAsset);
  } else {
    onContainerAssetLoaded.call(renderAsset, containerAsset);
  }
}
function onContainerAssetRemoved(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  if (renderAsset.resource) {
    renderAsset.resource.destroy();
  }
}

/**
 * Resource handler used for loading {@link Render} resources.
 *
 * @implements {ResourceHandler}
 * @category Graphics
 */
class RenderHandler {
  /**
   * Create a new RenderHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   * @hideconstructor
   */
  constructor(app) {
    /**
     * Type of the resource the handler handles.
     *
     * @type {string}
     */
    this.handlerType = "render";
    this._registry = app.assets;
  }
  load(url, callback, asset) {}
  open(url, data) {
    return new Render();
  }
  patch(asset, registry) {
    if (!asset.data.containerAsset) return;
    const containerAsset = registry.get(asset.data.containerAsset);
    if (!containerAsset) {
      registry.once('add:' + asset.data.containerAsset, onContainerAssetAdded, asset);
      return;
    }
    onContainerAssetAdded.call(asset, containerAsset);
  }
}

export { RenderHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL3JlbmRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXIgfSBmcm9tICcuLi8uLi9zY2VuZS9yZW5kZXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9oYW5kbGVyLmpzJykuUmVzb3VyY2VIYW5kbGVyfSBSZXNvdXJjZUhhbmRsZXIgKi9cblxuLy8gVGhlIHNjb3BlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdGhlIHJlbmRlciBhc3NldFxuZnVuY3Rpb24gb25Db250YWluZXJBc3NldExvYWRlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcbiAgICBpZiAoIXJlbmRlckFzc2V0LnJlc291cmNlKSByZXR1cm47XG5cbiAgICBjb25zdCBjb250YWluZXJSZXNvdXJjZSA9IGNvbnRhaW5lckFzc2V0LnJlc291cmNlO1xuXG4gICAgY29uc3QgcmVuZGVyID0gY29udGFpbmVyUmVzb3VyY2UucmVuZGVycyAmJiBjb250YWluZXJSZXNvdXJjZS5yZW5kZXJzW3JlbmRlckFzc2V0LmRhdGEucmVuZGVySW5kZXhdO1xuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgICAgcmVuZGVyQXNzZXQucmVzb3VyY2UubWVzaGVzID0gcmVuZGVyLnJlc291cmNlLm1lc2hlcztcbiAgICB9XG59XG5cbi8vIFRoZSBzY29wZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRoZSByZW5kZXIgYXNzZXRcbmZ1bmN0aW9uIG9uQ29udGFpbmVyQXNzZXRBZGRlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcblxuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9mZignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vbignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vZmYoJ3JlbW92ZTonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRSZW1vdmVkLCByZW5kZXJBc3NldCk7XG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub25jZSgncmVtb3ZlOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldFJlbW92ZWQsIHJlbmRlckFzc2V0KTtcblxuICAgIGlmICghY29udGFpbmVyQXNzZXQucmVzb3VyY2UpIHtcbiAgICAgICAgcmVuZGVyQXNzZXQucmVnaXN0cnkubG9hZChjb250YWluZXJBc3NldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb25Db250YWluZXJBc3NldExvYWRlZC5jYWxsKHJlbmRlckFzc2V0LCBjb250YWluZXJBc3NldCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvbkNvbnRhaW5lckFzc2V0UmVtb3ZlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcblxuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9mZignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcblxuICAgIGlmIChyZW5kZXJBc3NldC5yZXNvdXJjZSkge1xuICAgICAgICByZW5kZXJBc3NldC5yZXNvdXJjZS5kZXN0cm95KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlc291cmNlIGhhbmRsZXIgdXNlZCBmb3IgbG9hZGluZyB7QGxpbmsgUmVuZGVyfSByZXNvdXJjZXMuXG4gKlxuICogQGltcGxlbWVudHMge1Jlc291cmNlSGFuZGxlcn1cbiAqIEBjYXRlZ29yeSBHcmFwaGljc1xuICovXG5jbGFzcyBSZW5kZXJIYW5kbGVyIHtcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSByZXNvdXJjZSB0aGUgaGFuZGxlciBoYW5kbGVzLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBoYW5kbGVyVHlwZSA9IFwicmVuZGVyXCI7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmVuZGVySGFuZGxlciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAtYmFzZS5qcycpLkFwcEJhc2V9IGFwcCAtIFRoZSBydW5uaW5nIHtAbGluayBBcHBCYXNlfS5cbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gYXBwLmFzc2V0cztcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2ssIGFzc2V0KSB7XG4gICAgfVxuXG4gICAgb3Blbih1cmwsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBwYXRjaChhc3NldCwgcmVnaXN0cnkpIHtcbiAgICAgICAgaWYgKCFhc3NldC5kYXRhLmNvbnRhaW5lckFzc2V0KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckFzc2V0ID0gcmVnaXN0cnkuZ2V0KGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lckFzc2V0KSB7XG4gICAgICAgICAgICByZWdpc3RyeS5vbmNlKCdhZGQ6JyArIGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQsIG9uQ29udGFpbmVyQXNzZXRBZGRlZCwgYXNzZXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25Db250YWluZXJBc3NldEFkZGVkLmNhbGwoYXNzZXQsIGNvbnRhaW5lckFzc2V0KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlckhhbmRsZXIgfTtcbiJdLCJuYW1lcyI6WyJvbkNvbnRhaW5lckFzc2V0TG9hZGVkIiwiY29udGFpbmVyQXNzZXQiLCJyZW5kZXJBc3NldCIsInJlc291cmNlIiwiY29udGFpbmVyUmVzb3VyY2UiLCJyZW5kZXIiLCJyZW5kZXJzIiwiZGF0YSIsInJlbmRlckluZGV4IiwibWVzaGVzIiwib25Db250YWluZXJBc3NldEFkZGVkIiwicmVnaXN0cnkiLCJvZmYiLCJpZCIsIm9uIiwib25Db250YWluZXJBc3NldFJlbW92ZWQiLCJvbmNlIiwibG9hZCIsImNhbGwiLCJkZXN0cm95IiwiUmVuZGVySGFuZGxlciIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaGFuZGxlclR5cGUiLCJfcmVnaXN0cnkiLCJhc3NldHMiLCJ1cmwiLCJjYWxsYmFjayIsImFzc2V0Iiwib3BlbiIsIlJlbmRlciIsInBhdGNoIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOztBQUVBOztBQUVBO0FBQ0EsU0FBU0Esc0JBQXNCQSxDQUFDQyxjQUFjLEVBQUU7RUFDNUMsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN4QixFQUFBLElBQUksQ0FBQ0EsV0FBVyxDQUFDQyxRQUFRLEVBQUUsT0FBQTtBQUUzQixFQUFBLE1BQU1DLGlCQUFpQixHQUFHSCxjQUFjLENBQUNFLFFBQVEsQ0FBQTtBQUVqRCxFQUFBLE1BQU1FLE1BQU0sR0FBR0QsaUJBQWlCLENBQUNFLE9BQU8sSUFBSUYsaUJBQWlCLENBQUNFLE9BQU8sQ0FBQ0osV0FBVyxDQUFDSyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFBO0FBQ25HLEVBQUEsSUFBSUgsTUFBTSxFQUFFO0lBQ1JILFdBQVcsQ0FBQ0MsUUFBUSxDQUFDTSxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDTSxNQUFNLENBQUE7QUFDeEQsR0FBQTtBQUNKLENBQUE7O0FBRUE7QUFDQSxTQUFTQyxxQkFBcUJBLENBQUNULGNBQWMsRUFBRTtFQUMzQyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxD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
