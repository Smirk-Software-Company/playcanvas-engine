const ASCII_LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
const ASCII_UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const ASCII_LETTERS = ASCII_LOWERCASE + ASCII_UPPERCASE;
const HIGH_SURROGATE_BEGIN = 0xD800;
const HIGH_SURROGATE_END = 0xDBFF;
const LOW_SURROGATE_BEGIN = 0xDC00;
const LOW_SURROGATE_END = 0xDFFF;
const ZERO_WIDTH_JOINER = 0x200D;

// Flag emoji
const REGIONAL_INDICATOR_BEGIN = 0x1F1E6;
const REGIONAL_INDICATOR_END = 0x1F1FF;

// Skin color modifications to emoji
const FITZPATRICK_MODIFIER_BEGIN = 0x1F3FB;
const FITZPATRICK_MODIFIER_END = 0x1F3FF;

// Accent characters
const DIACRITICAL_MARKS_BEGIN = 0x20D0;
const DIACRITICAL_MARKS_END = 0x20FF;

// Special emoji joins
const VARIATION_MODIFIER_BEGIN = 0xFE00;
const VARIATION_MODIFIER_END = 0xFE0F;
function getCodePointData(string, i = 0) {
  const size = string.length;

  // Account for out-of-bounds indices:
  if (i < 0 || i >= size) {
    return null;
  }
  const first = string.charCodeAt(i);
  if (size > 1 && first >= HIGH_SURROGATE_BEGIN && first <= HIGH_SURROGATE_END) {
    const second = string.charCodeAt(i + 1);
    if (second >= LOW_SURROGATE_BEGIN && second <= LOW_SURROGATE_END) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return {
        code: (first - HIGH_SURROGATE_BEGIN) * 0x400 + second - LOW_SURROGATE_BEGIN + 0x10000,
        long: true
      };
    }
  }
  return {
    code: first,
    long: false
  };
}
function isCodeBetween(string, begin, end) {
  if (!string) return false;
  const codeData = getCodePointData(string);
  if (codeData) {
    const code = codeData.code;
    return code >= begin && code <= end;
  }
  return false;
}
function numCharsToTakeForNextSymbol(string, index) {
  if (index === string.length - 1) {
    // Last character in the string, so we can only take 1
    return 1;
  }
  if (isCodeBetween(string[index], HIGH_SURROGATE_BEGIN, HIGH_SURROGATE_END)) {
    const first = string.substring(index, index + 2);
    const second = string.substring(index + 2, index + 4);

    // check if second character is fitzpatrick (color) modifier
    // or if this is a pair of regional indicators (a flag)
    if (isCodeBetween(second, FITZPATRICK_MODIFIER_BEGIN, FITZPATRICK_MODIFIER_END) || isCodeBetween(first, REGIONAL_INDICATOR_BEGIN, REGIONAL_INDICATOR_END) && isCodeBetween(second, REGIONAL_INDICATOR_BEGIN, REGIONAL_INDICATOR_END)) {
      return 4;
    }

    // check if next character is a modifier, in which case we should return it
    if (isCodeBetween(second, VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
      return 3;
    }

    // return surrogate pair
    return 2;
  }

  // check if next character is the emoji modifier, in which case we should include it
  if (isCodeBetween(string[index + 1], VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
    return 2;
  }

  // just a regular character
  return 1;
}

/**
 * Extended String API.
 *
 * @namespace
 */
const string = {
  /**
   * All lowercase letters.
   *
   * @type {string}
   */
  ASCII_LOWERCASE: ASCII_LOWERCASE,
  /**
   * All uppercase letters.
   *
   * @type {string}
   */
  ASCII_UPPERCASE: ASCII_UPPERCASE,
  /**
   * All ASCII letters.
   *
   * @type {string}
   */
  ASCII_LETTERS: ASCII_LETTERS,
  /**
   * Return a string with \{n\} replaced with the n-th argument.
   *
   * @param {string} s - The string to format.
   * @param {...*} args - All other arguments are substituted into the string.
   * @returns {string} The formatted string.
   * @example
   * const s = pc.string.format("Hello {0}", "world");
   * console.log(s); // Prints "Hello world"
   */
  format: function (s, ...args) {
    for (let i = 0; i < args.length; i++) {
      s = s.replace(`{${i}}`, args[i]);
    }
    return s;
  },
  /**
   * Get the code point number for a character in a string. Polyfill for
   * [`codePointAt`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt}.
   *
   * @param {string} string - The string to get the code point from.
   * @param {number} [i] - The index in the string.
   * @returns {number} The code point value for the character in the string.
   */
  getCodePoint: function (string, i) {
    const codePointData = getCodePointData(string, i);
    return codePointData && codePointData.code;
  },
  /**
   * Gets an array of all code points in a string.
   *
   * @param {string} string - The string to get code points from.
   * @returns {number[]} The code points in the string.
   */
  getCodePoints: function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Not a string');
    }
    let i = 0;
    const arr = [];
    let codePoint;
    while (!!(codePoint = getCodePointData(string, i))) {
      arr.push(codePoint.code);
      i += codePoint.long ? 2 : 1;
    }
    return arr;
  },
  /**
   * Gets an array of all grapheme clusters (visible symbols) in a string. This is needed because
   * some symbols (such as emoji or accented characters) are actually made up of multiple
   * character codes. See {@link https://mathiasbynens.be/notes/javascript-unicode here} for more
   * info.
   *
   * @param {string} string - The string to break into symbols.
   * @returns {string[]} The symbols in the string.
   */
  getSymbols: function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Not a string');
    }
    let index = 0;
    const length = string.length;
    const output = [];
    let take = 0;
    let ch;
    while (index < length) {
      take += numCharsToTakeForNextSymbol(string, index + take);
      ch = string[index + take];
      // Handle special cases
      if (isCodeBetween(ch, DIACRITICAL_MARKS_BEGIN, DIACRITICAL_MARKS_END)) {
        ch = string[index + take++];
      }
      if (isCodeBetween(ch, VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
        ch = string[index + take++];
      }
      if (ch && ch.charCodeAt(0) === ZERO_WIDTH_JOINER) {
        ch = string[index + take++];
        // Not a complete char yet
        continue;
      }
      const char = string.substring(index, index + take);
      output.push(char);
      index += take;
      take = 0;
    }
    return output;
  },
  /**
   * Get the string for a given code point or set of code points. Polyfill for
   * [`fromCodePoint`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint}.
   *
   * @param {...number} args - The code points to convert to a string.
   * @returns {string} The converted string.
   */
  fromCodePoint: function /* ...args */
  () {
    const chars = [];
    let current;
    let codePoint;
    let units;
    for (let i = 0; i < arguments.length; ++i) {
      current = Number(arguments[i]);
      codePoint = current - 0x10000;
      units = current > 0xFFFF ? [(codePoint >> 10) + 0xD800, codePoint % 0x400 + 0xDC00] : [current];
      chars.push(String.fromCharCode.apply(null, units));
    }
    return chars.join('');
  }
};

export { string };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29yZS9zdHJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVNDSUlfTE9XRVJDQVNFID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbmNvbnN0IEFTQ0lJX1VQUEVSQ0FTRSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG5jb25zdCBBU0NJSV9MRVRURVJTID0gQVNDSUlfTE9XRVJDQVNFICsgQVNDSUlfVVBQRVJDQVNFO1xuXG5jb25zdCBISUdIX1NVUlJPR0FURV9CRUdJTiA9IDB4RDgwMDtcbmNvbnN0IEhJR0hfU1VSUk9HQVRFX0VORCA9IDB4REJGRjtcbmNvbnN0IExPV19TVVJST0dBVEVfQkVHSU4gPSAweERDMDA7XG5jb25zdCBMT1dfU1VSUk9HQVRFX0VORCA9IDB4REZGRjtcbmNvbnN0IFpFUk9fV0lEVEhfSk9JTkVSID0gMHgyMDBEO1xuXG4vLyBGbGFnIGVtb2ppXG5jb25zdCBSRUdJT05BTF9JTkRJQ0FUT1JfQkVHSU4gPSAweDFGMUU2O1xuY29uc3QgUkVHSU9OQUxfSU5ESUNBVE9SX0VORCA9IDB4MUYxRkY7XG5cbi8vIFNraW4gY29sb3IgbW9kaWZpY2F0aW9ucyB0byBlbW9qaVxuY29uc3QgRklUWlBBVFJJQ0tfTU9ESUZJRVJfQkVHSU4gPSAweDFGM0ZCO1xuY29uc3QgRklUWlBBVFJJQ0tfTU9ESUZJRVJfRU5EID0gMHgxRjNGRjtcblxuLy8gQWNjZW50IGNoYXJhY3RlcnNcbmNvbnN0IERJQUNSSVRJQ0FMX01BUktTX0JFR0lOID0gMHgyMEQwO1xuY29uc3QgRElBQ1JJVElDQUxfTUFSS1NfRU5EID0gMHgyMEZGO1xuXG4vLyBTcGVjaWFsIGVtb2ppIGpvaW5zXG5jb25zdCBWQVJJQVRJT05fTU9ESUZJRVJfQkVHSU4gPSAweEZFMDA7XG5jb25zdCBWQVJJQVRJT05fTU9ESUZJRVJfRU5EID0gMHhGRTBGO1xuXG5mdW5jdGlvbiBnZXRDb2RlUG9pbnREYXRhKHN0cmluZywgaSA9IDApIHtcbiAgICBjb25zdCBzaXplID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIC8vIEFjY291bnQgZm9yIG91dC1vZi1ib3VuZHMgaW5kaWNlczpcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBzaXplKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChzaXplID4gMSAmJiBmaXJzdCA+PSBISUdIX1NVUlJPR0FURV9CRUdJTiAmJiBmaXJzdCA8PSBISUdIX1NVUlJPR0FURV9FTkQpIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICBpZiAoc2Vjb25kID49IExPV19TVVJST0dBVEVfQkVHSU4gJiYgc2Vjb25kIDw9IExPV19TVVJST0dBVEVfRU5EKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29kZTogKGZpcnN0IC0gSElHSF9TVVJST0dBVEVfQkVHSU4pICogMHg0MDAgKyBzZWNvbmQgLSBMT1dfU1VSUk9HQVRFX0JFR0lOICsgMHgxMDAwMCxcbiAgICAgICAgICAgICAgICBsb25nOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogZmlyc3QsXG4gICAgICAgIGxvbmc6IGZhbHNlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNDb2RlQmV0d2VlbihzdHJpbmcsIGJlZ2luLCBlbmQpIHtcbiAgICBpZiAoIXN0cmluZylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGNvZGVEYXRhID0gZ2V0Q29kZVBvaW50RGF0YShzdHJpbmcpO1xuICAgIGlmIChjb2RlRGF0YSkge1xuICAgICAgICBjb25zdCBjb2RlID0gY29kZURhdGEuY29kZTtcbiAgICAgICAgcmV0dXJuIGNvZGUgPj0gYmVnaW4gJiYgY29kZSA8PSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbnVtQ2hhcnNUb1Rha2VGb3JOZXh0U3ltYm9sKHN0cmluZywgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IHN0cmluZy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIExhc3QgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcsIHNvIHdlIGNhbiBvbmx5IHRha2UgMVxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzQ29kZUJldHdlZW4oc3RyaW5nW2luZGV4XSwgSElHSF9TVVJST0dBVEVfQkVHSU4sIEhJR0hfU1VSUk9HQVRFX0VORCkpIHtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBzdHJpbmcuc3Vic3RyaW5nKGluZGV4LCBpbmRleCArIDIpO1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBzdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgMiwgaW5kZXggKyA0KTtcblxuICAgICAgICAvLyBjaGVjayBpZiBzZWNvbmQgY2hhcmFjdGVyIGlzIGZpdHpwYXRyaWNrIChjb2xvcikgbW9kaWZpZXJcbiAgICAgICAgLy8gb3IgaWYgdGhpcyBpcyBhIHBhaXIgb2YgcmVnaW9uYWwgaW5kaWNhdG9ycyAoYSBmbGFnKVxuICAgICAgICBpZiAoaXNDb2RlQmV0d2VlbihzZWNvbmQsIEZJVFpQQVRSSUNLX01PRElGSUVSX0JFR0lOLCBGSVRaUEFUUklDS19NT0RJRklFUl9FTkQpIHx8XG4gICAgICAgICAgICAoaXNDb2RlQmV0d2VlbihmaXJzdCwgUkVHSU9OQUxfSU5ESUNBVE9SX0JFR0lOLCBSRUdJT05BTF9JTkRJQ0FUT1JfRU5EKSAmJlxuICAgICAgICAgICAgaXNDb2RlQmV0d2VlbihzZWNvbmQsIFJFR0lPTkFMX0lORElDQVRPUl9CRUdJTiwgUkVHSU9OQUxfSU5ESUNBVE9SX0VORCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBpZiBuZXh0IGNoYXJhY3RlciBpcyBhIG1vZGlmaWVyLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCByZXR1cm4gaXRcbiAgICAgICAgaWYgKGlzQ29kZUJldHdlZW4oc2Vjb25kLCBWQVJJQVRJT05fTU9ESUZJRVJfQkVHSU4sIFZBUklBVElPTl9NT0RJRklFUl9FTkQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBzdXJyb2dhdGUgcGFpclxuICAgICAgICByZXR1cm4gMjtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBuZXh0IGNoYXJhY3RlciBpcyB0aGUgZW1vamkgbW9kaWZpZXIsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGluY2x1ZGUgaXRcbiAgICBpZiAoaXNDb2RlQmV0d2VlbihzdHJpbmdbaW5kZXggKyAxXSwgVkFSSUFUSU9OX01PRElGSUVSX0JFR0lOLCBWQVJJQVRJT05fTU9ESUZJRVJfRU5EKSkge1xuICAgICAgICByZXR1cm4gMjtcbiAgICB9XG5cbiAgICAvLyBqdXN0IGEgcmVndWxhciBjaGFyYWN0ZXJcbiAgICByZXR1cm4gMTtcbn1cblxuLyoqXG4gKiBFeHRlbmRlZCBTdHJpbmcgQVBJLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqL1xuY29uc3Qgc3RyaW5nID0ge1xuICAgIC8qKlxuICAgICAqIEFsbCBsb3dlcmNhc2UgbGV0dGVycy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQVNDSUlfTE9XRVJDQVNFOiBBU0NJSV9MT1dFUkNBU0UsXG5cbiAgICAvKipcbiAgICAgKiBBbGwgdXBwZXJjYXNlIGxldHRlcnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEFTQ0lJX1VQUEVSQ0FTRTogQVNDSUlfVVBQRVJDQVNFLFxuXG4gICAgLyoqXG4gICAgICogQWxsIEFTQ0lJIGxldHRlcnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEFTQ0lJX0xFVFRFUlM6IEFTQ0lJX0xFVFRFUlMsXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgd2l0aCBcXHtuXFx9IHJlcGxhY2VkIHdpdGggdGhlIG4tdGggYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBzdHJpbmcgdG8gZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyAtIEFsbCBvdGhlciBhcmd1bWVudHMgYXJlIHN1YnN0aXR1dGVkIGludG8gdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHMgPSBwYy5zdHJpbmcuZm9ybWF0KFwiSGVsbG8gezB9XCIsIFwid29ybGRcIik7XG4gICAgICogY29uc29sZS5sb2cocyk7IC8vIFByaW50cyBcIkhlbGxvIHdvcmxkXCJcbiAgICAgKi9cbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIChzLCAuLi5hcmdzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZShgeyR7aX19YCwgYXJnc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29kZSBwb2ludCBudW1iZXIgZm9yIGEgY2hhcmFjdGVyIGluIGEgc3RyaW5nLiBQb2x5ZmlsbCBmb3JcbiAgICAgKiBbYGNvZGVQb2ludEF0YF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2NvZGVQb2ludEF0fS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBUaGUgc3RyaW5nIHRvIGdldCB0aGUgY29kZSBwb2ludCBmcm9tLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbaV0gLSBUaGUgaW5kZXggaW4gdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY29kZSBwb2ludCB2YWx1ZSBmb3IgdGhlIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGdldENvZGVQb2ludDogZnVuY3Rpb24gKHN0cmluZywgaSkge1xuICAgICAgICBjb25zdCBjb2RlUG9pbnREYXRhID0gZ2V0Q29kZVBvaW50RGF0YShzdHJpbmcsIGkpO1xuICAgICAgICByZXR1cm4gY29kZVBvaW50RGF0YSAmJiBjb2RlUG9pbnREYXRhLmNvZGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgYW4gYXJyYXkgb2YgYWxsIGNvZGUgcG9pbnRzIGluIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIFRoZSBzdHJpbmcgdG8gZ2V0IGNvZGUgcG9pbnRzIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcltdfSBUaGUgY29kZSBwb2ludHMgaW4gdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBnZXRDb2RlUG9pbnRzOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgbGV0IGNvZGVQb2ludDtcbiAgICAgICAgd2hpbGUgKCEhKGNvZGVQb2ludCA9IGdldENvZGVQb2ludERhdGEoc3RyaW5nLCBpKSkpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKGNvZGVQb2ludC5jb2RlKTtcbiAgICAgICAgICAgIGkgKz0gY29kZVBvaW50LmxvbmcgPyAyIDogMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGFycmF5IG9mIGFsbCBncmFwaGVtZSBjbHVzdGVycyAodmlzaWJsZSBzeW1ib2xzKSBpbiBhIHN0cmluZy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZVxuICAgICAqIHNvbWUgc3ltYm9scyAoc3VjaCBhcyBlbW9qaSBvciBhY2NlbnRlZCBjaGFyYWN0ZXJzKSBhcmUgYWN0dWFsbHkgbWFkZSB1cCBvZiBtdWx0aXBsZVxuICAgICAqIGNoYXJhY3RlciBjb2Rlcy4gU2VlIHtAbGluayBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlIGhlcmV9IGZvciBtb3JlXG4gICAgICogaW5mby5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBUaGUgc3RyaW5nIHRvIGJyZWFrIGludG8gc3ltYm9scy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119IFRoZSBzeW1ib2xzIGluIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZ2V0U3ltYm9sczogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgICAgICBsZXQgdGFrZSA9IDA7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0YWtlICs9IG51bUNoYXJzVG9UYWtlRm9yTmV4dFN5bWJvbChzdHJpbmcsIGluZGV4ICsgdGFrZSk7XG4gICAgICAgICAgICBjaCA9IHN0cmluZ1tpbmRleCArIHRha2VdO1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZXNcbiAgICAgICAgICAgIGlmIChpc0NvZGVCZXR3ZWVuKGNoLCBESUFDUklUSUNBTF9NQVJLU19CRUdJTiwgRElBQ1JJVElDQUxfTUFSS1NfRU5EKSkge1xuICAgICAgICAgICAgICAgIGNoID0gc3RyaW5nW2luZGV4ICsgKHRha2UrKyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ29kZUJldHdlZW4oY2gsIFZBUklBVElPTl9NT0RJRklFUl9CRUdJTiwgVkFSSUFUSU9OX01PRElGSUVSX0VORCkpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHN0cmluZ1tpbmRleCArICh0YWtlKyspXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaCAmJiBjaC5jaGFyQ29kZUF0KDApID09PSBaRVJPX1dJRFRIX0pPSU5FUikge1xuICAgICAgICAgICAgICAgIGNoID0gc3RyaW5nW2luZGV4ICsgKHRha2UrKyldO1xuICAgICAgICAgICAgICAgIC8vIE5vdCBhIGNvbXBsZXRlIGNoYXIgeWV0XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gc3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyB0YWtlKTtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGNoYXIpO1xuICAgICAgICAgICAgaW5kZXggKz0gdGFrZTtcbiAgICAgICAgICAgIHRha2UgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RyaW5nIGZvciBhIGdpdmVuIGNvZGUgcG9pbnQgb3Igc2V0IG9mIGNvZGUgcG9pbnRzLiBQb2x5ZmlsbCBmb3JcbiAgICAgKiBbYGZyb21Db2RlUG9pbnRgXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZnJvbUNvZGVQb2ludH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gey4uLm51bWJlcn0gYXJncyAtIFRoZSBjb2RlIHBvaW50cyB0byBjb252ZXJ0IHRvIGEgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgICAgIGxldCBjdXJyZW50O1xuICAgICAgICBsZXQgY29kZVBvaW50O1xuICAgICAgICBsZXQgdW5pdHM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gTnVtYmVyKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBjdXJyZW50IC0gMHgxMDAwMDtcbiAgICAgICAgICAgIHVuaXRzID0gY3VycmVudCA+IDB4RkZGRiA/IFsoY29kZVBvaW50ID4+IDEwKSArIDB4RDgwMCwgKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMF0gOiBbY3VycmVudF07XG4gICAgICAgICAgICBjaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdW5pdHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhcnMuam9pbignJyk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgc3RyaW5nIH07XG4iXSwibmFtZXMiOlsiQVNDSUlfTE9XRVJDQVNFIiwiQVNDSUlfVVBQRVJDQVNFIiwiQVNDSUlfTEVUVEVSUyIsIkhJR0hfU1VSUk9HQVRFX0JFR0lOIiwiSElHSF9TVVJST0dBVEVfRU5EIiwiTE9XX1NVUlJPR0FURV9CRUdJTiIsIkxPV19TVVJST0dBVEVfRU5EIiwiWkVST19XSURUSF9KT0lORVIiLCJSRUdJT05BTF9JTkRJQ0FUT1JfQkVHSU4iLCJSRUdJT05BTF9JTkRJQ0FUT1JfRU5EIiwiRklUWlBBVFJJQ0tfTU9ESUZJRVJfQkVHSU4iLCJGSVRaUEFUUklDS19NT0RJRklFUl9FTkQiLCJESUFDUklUSUNBTF9NQVJLU19CRUdJTiIsIkRJQUNSSVRJQ0FMX01BUktTX0VORCIsIlZBUklBVElPTl9NT0RJRklFUl9CRUdJTiIsIlZBUklBVElPTl9NT0RJRklFUl9FTkQiLCJnZXRDb2RlUG9pbnREYXRhIiwic3RyaW5nIiwiaSIsInNpemUiLCJsZW5ndGgiLCJmaXJzdCIsImNoYXJDb2RlQXQiLCJzZWNvbmQiLCJjb2RlIiwibG9uZyIsImlzQ29kZUJldHdlZW4iLCJiZWdpbiIsImVuZCIsImNvZGVEYXRhIiwibnVtQ2hhcnNUb1Rha2VGb3JOZXh0U3ltYm9sIiwiaW5kZXgiLCJzdWJzdHJpbmciLCJmb3JtYXQiLCJzIiwiYXJncyIsInJlcGxhY2UiLCJnZXRDb2RlUG9pbnQiLCJjb2RlUG9pbnREYXRhIiwiZ2V0Q29kZVBvaW50cyIsIlR5cGVFcnJvciIsImFyciIsImNvZGVQb2ludCIsInB1c2giLCJnZXRTeW1ib2xzIiwib3V0cHV0IiwidGFrZSIsImNoIiwiY2hhciIsImZyb21Db2RlUG9pbnQiLCJjaGFycyIsImN1cnJlbnQiLCJ1bml0cyIsImFyZ3VtZW50cyIsIk51bWJlciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5Iiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBZSxHQUFHLDRCQUE0QixDQUFBO0FBQ3BELE1BQU1DLGVBQWUsR0FBRyw0QkFBNEIsQ0FBQTtBQUNwRCxNQUFNQyxhQUFhLEdBQUdGLGVBQWUsR0FBR0MsZUFBZSxDQUFBO0FBRXZELE1BQU1FLG9C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
